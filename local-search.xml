<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux 单片机把玩之 我用香橙派Zero 3 做服务器</title>
    <link href="/my-orangepi-zero-3/"/>
    <url>/my-orangepi-zero-3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家龙年大吉! 便当拜个晚年.</p><p>“拥有一个服务器”是我刚接触互联网时一个最<code>憧憬, 禁忌, 梦幻</code>的梦.</p><p>憧憬和梦幻不过多解释, 禁忌是因为未成年的实名(使命? 或许都有)限制.</p><p>如今, 我上了大学, 有了充足的时间和略多的金钱, 终于狠狠心, 花<code>99米</code>入了香橙派Zero 3 这块小小的单片机.</p><blockquote><p>单片机, 全称单片微型计算机. 其实无论是香橙派还是树莓派还是什么派, 严格来说都应该叫”单板机”. 可见维基百科: <a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E7%89%87%E6%9C%BA">单片机</a> 和 <a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E6%9D%BF%E6%9C%BA">单板机</a>, 谨向咬文嚼字的读者说明, 看不懂也无所谓.</p></blockquote><p>你可能要问了: 不是说服务器是梦吗? 跟这什么香橙派, 什么单片机有什么关系?</p><p>诶, 有关系!</p><p>网络上大家说的”我买了个服务器&#x2F;我买了个腾讯云”其实是”我租了一台云服务器(VPS)的简略说法”, 高性能的服务器实体往往都是以集群的方式存放在企业管理的机房内, 消费者得到的是<code>使用服务器的期限</code>, 时间一到又要继续付费.</p><p>而我购入的这个派, 实际上就是一个<code>巴掌大的服务器</code>!</p><p>你可能又要问了: 巴掌大能干嘛?! 这东西什么配置?</p><p>正所谓一分价钱一分货, 99块钱能买到什么配置诸君可自行想象. 我以自己亲身测出来数据说明一下:</p><ul><li>CPU: <code>i5-12500H</code>单线程计算5000位圆周率的时间是11.056秒, 而香橙派Zero 3是一分半钟(以人类的视角来看没多大差距, 但以计算机的视角来看相差了可不止几辈子)</li><li>内存: 正常PC&#x2F;笔记本8G&#x2F;16G起步, 此派的内存最低为1G, 还有1.5&#x2F;2&#x2F;4G的配置</li><li>储存: 固态机械通通不能用, 派比硬盘还小, 只能使用tf卡作储存, 我购入了闪迪的64G储存卡</li></ul><p>如此辣鸡的配置, Windows是肯定装不了的, 但是配上Linux, 只能说是绰绰有余了.</p><p>Linux有那么神奇? 没错, Linux就是那么神奇, 几乎有着<code>变废为宝</code>的神奇效果, 再烂的硬件也能重获新生.</p><blockquote><p>除非这个硬件真的物理上的烂了…</p></blockquote><p>如果你打算并已经购入了相关派, 那么可以继续往下阅读. 没有阅读欲望的读者至此已经被我硬灌了一些东西, 不如善始善终.</p><p>好了, 接下来就不一会扯Linux, 一会扯服务器了. 咱们专心来把玩一下这小巧精致的香橙派Zero 3.</p><blockquote><p>注: 后面的内容会牵扯到Linux的知识, 我会尽量对我的操作进行解释. 如有疑问, 可在评论区提出.</p></blockquote><h2 id="玩之前我做了些什么"><a href="#玩之前我做了些什么" class="headerlink" title="玩之前我做了些什么"></a>玩之前我做了些什么</h2><p>官方的文档非常非常详细, 安装系统的流程我不再赘述. 简单说明一下安装完成之后我做了些什么.</p><blockquote><p>我安装的是官方提供的 Debian 12 桌面版, 内存是1.5G.</p></blockquote><p>因为进到路由器后台查看派的IP, 再用ssh连接的方法太麻烦, 我直接用一根microHDMI线接到显示器上, 很快配好了WIFI, 蓝牙等信息, 顺带把密码改了一下.</p><p>改用户密码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo passwd orangepi<br></code></pre></td></tr></table></figure><p>改root密码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo passwd<br></code></pre></td></tr></table></figure><p>后来想改用户名, 网上搜了一些教程, 只能说有风险, 不建议尝试.</p><p>接着更新软件包(更新这步我其实是上来就干的)</p><p>打开终端执行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt update -y &amp;&amp; sudo apt upgrade -y<br></code></pre></td></tr></table></figure><p>以更新所有软件包.</p><p>更新完成后, 即使没有要求, 建议重启一下.</p><h2 id="我是怎么玩的"><a href="#我是怎么玩的" class="headerlink" title="我是怎么玩的"></a>我是怎么玩的</h2><h3 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h3><p>万事翻为先.</p><p>由于派的CPU架构是ARM, 再加上Linux的因素, 可以使用的翻墙软件少之又少.</p><p>提供三种思路:</p><ol><li><p>PC&#x2F;笔记本翻墙, 把局域网模式打开, 确保派和电脑在同一网络, 在派的终端输入&#96;export https_proxy&#x3D;xxx.xxx.xxx.xxx:xxxxx(开着翻墙软件的电脑的IP:端口号) 随后就可以进行一些需要翻墙的操作了, 例如从Github下文件之类的.</p></li><li><p>安卓手机如果root, 可在谷歌商店搜索<code>VPN热点</code>, 安装给予root权限后, 打开<code>WLAN热点</code>开关即可使用.</p></li><li><p>我之前写过一个<a href="https://github.com/wzk0/clash_tui">clash_tui</a>, 一个简易的clash终端版本, 这也是我现在正在使用的方案, 有兴趣的读者可以自行尝试.</p></li></ol><hr><h3 id="推荐的服务"><a href="#推荐的服务" class="headerlink" title="推荐的服务"></a>推荐的服务</h3><p>既然作为一个服务器了, 就理应跑一些服务. 不然这东西放在那吃灰吗?</p><h4 id="1-CasaOS-面板"><a href="#1-CasaOS-面板" class="headerlink" title="1. CasaOS 面板"></a>1. CasaOS 面板</h4><blockquote><p>强烈建议安装, 因为它可以充当一个应用商店, 我后面推荐的所有服务都是基于此一点即成的!</p></blockquote><p>可以到这个demo站看看样式: <a href="http://demo.casaos.io/">http://demo.casaos.io/</a> , 用户名和密码都是<code>casaos</code>.</p><p>安装CasaOS只需一条指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -fsSL https://get.casaos.io | sudo bash<br></code></pre></td></tr></table></figure><p>进入不算漫长的安装过程, 完成之后只需要在同一局域网下的任意设备浏览器输入派的IP地址即可.</p><p>可使用<code>ip addr</code>指令查看, 注意不是127那个.</p><p>如果正常打开页面显示的是英文, 只需左上角第二个长得像设置的图标里修改语言为简体中文即可.</p><h4 id="2-Memos-云便签-笔记"><a href="#2-Memos-云便签-笔记" class="headerlink" title="2. Memos 云便签+笔记"></a>2. Memos 云便签+笔记</h4><p>这个我真的非常喜欢, 界面简单清爽, 网页上没有任何图片, 全是简约的线条和文字.</p><p>demo站: <a href="https://demo.usememos.com/">https://demo.usememos.com/</a></p><blockquote><p>PS: 我现在就是用Memos写博客hhhh.</p></blockquote><p>安装只需在CasaOS面板的<code>App Store</code>里找到Memos, 点击<code>安装</code>即可.</p><h4 id="3-Nextcloud-云服务"><a href="#3-Nextcloud-云服务" class="headerlink" title="3. Nextcloud 云服务"></a>3. Nextcloud 云服务</h4><p>Nextcloud(下简称nc)是一个允许插件的自部署云服务. </p><p>什么意思呢?</p><p>现在nc的插件有photo, chat, todo, note等等, 等于说安装了nc就有了自己的云相册, 云盘, 聊天视频语音(即时通讯), 云待办, 云笔记. 无需担心会员, 无需担心限速, 因为这一切都是你的.</p><p>nc安装方式与Memos一样, 只需在<code>App Store</code>中搜索安装即可.</p><p>需要注意的是, nc在安装好后的一会是没法进行访问的, 需要等待几分钟.</p><h4 id="4-Alist-云盘列表"><a href="#4-Alist-云盘列表" class="headerlink" title="4. Alist 云盘列表"></a>4. Alist 云盘列表</h4><p>可以看作是一个云盘聚合服务, 为不同的云盘提供了统一的浏览, 下载, 分享入口.</p><p>安装方式同上.</p><p>需要注意, Alist安装完成后的用户名是<code>admin</code>, 密码在<code>右键Alist图标 &gt; 设置 &gt; 右上角终端与日志 &gt; 日志</code>里.</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>其他的我也还在研究. 截至目前, 我的香橙派已经稳定运行了两天, 除了上述说的服务外, 还跑了我自己写的一个tg机器人和网站, 内存占用50%(1.5G).</p><p>总而言之, 香橙派Zero 3作为一款国产派, 口碑绝对没有那么不堪, 生态也没有说的那么差劲, 什么买回来就当摆设之类的.</p><p>相反, 我在这款国产派上看到了实打实的性价比, 相较于树莓派好了不止一星半点(极少称赞国货, 这次献给香橙派啦!)</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Talk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用pyTelegramBotAPI零基础搭建Telegram私聊机器人</title>
    <link href="/python-tg-bot/"/>
    <url>/python-tg-bot/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><blockquote><p>😘提前祝大家农历新年快乐!🎉</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>定睛一看, 我好像已经有小半年没写过博客了…</p><p>不知道现在是否还有读者呢?</p><blockquote><p>读到这篇的你请务必在评论区留个言!</p></blockquote><p>然而, 也正好是一位我的博客的读者, 激起了我”写作”的欲望:</p><p>是他告诉我, 按照我旧文章的方法”折腾了几个小时无果”.</p><p>恰逢近日, 我重拾了对Telegram机器人的热情, 亦发现了一些前所未有的新鲜东西.</p><p>于是在此分享给大家.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>Telegram和翻墙工具;</p></li><li><p>电脑或安卓手机.</p></li></ul><p>由于机器人由python编写, 所以我们还需要配好python环境:</p><ul><li>对于使用Mac或Windows的用户:</li></ul><p>下载并安装即可.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mac</span> - https://www.python.org/ftp/python/<span class="hljs-number">3</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>/python-<span class="hljs-number">3</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>-macos11.pkg<br><br><span class="hljs-attribute">Windows</span> - https://www.python.org/ftp/python/<span class="hljs-number">3</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>/python-<span class="hljs-number">3</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>-amd64.exe<br></code></pre></td></tr></table></figure><blockquote><p>建议安装一个代码编辑器, 如<a href="https://www.sublimetext.com/">Sublime Text</a></p></blockquote><ul><li>对于使用Linux或安卓的用户:</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">Linux - sudo apt/dnf install python3<br><br>安卓 - 下载并安装Termux - https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/termux/</span>termux-app<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v0.118.0/</span>termux-app_v0.<span class="hljs-number">118.0</span>+github-debug_arm64-v8a.apk<br>打开并输入 pkg update -y &amp;&amp; pkg upgrade -y &amp;&amp; pkg install python3 micro<br>过程中如有卡住不动的现象请回车<br></code></pre></td></tr></table></figure><p>安装好python环境后, 需要安装主角: pyTelegramBotAPI库</p><p>打开系统的终端(Win用户可用win R快捷键, 输入cmd打开终端), 安卓则打开Termux即可, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 install pyTelegramBotAPI<br></code></pre></td></tr></table></figure><p>接下来, 创建一个<code>bot.py</code>, 这就是我们的机器人啦:</p><p>Win&#x2F;Linux&#x2F;Mac用户只需打开<code>Sublime Text</code>或其他编辑器, 左上角新建文件(File &gt; New file), 创建一个名为<code>bot.py</code>的文件即可.</p><p>Termux用户输入<code>micro bot.py</code>, 继而使用<code>micro</code>编辑器编写机器人(保存快捷键: <code>Ctrl S</code>, 退出快捷键: <code>Ctrl Q</code>).</p><p>在打开的<code>bot.py</code>中粘贴:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> telebot<br><br><span class="hljs-comment"># &#x27;&#x27;内粘贴你的bot token</span><br>API_TOKEN = <span class="hljs-string">&#x27;你的token&#x27;</span><br><br>bot = telebot.TeleBot(API_TOKEN)<br><br><span class="hljs-comment"># 处理 &#x27;/start&#x27; 和 &#x27;/help&#x27;</span><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_welcome</span>(<span class="hljs-params">message</span>):<br>    bot.reply_to(message, <span class="hljs-string">&quot;你好, 欢迎使用此bot&quot;</span>)<br><br>bot.infinity_polling()<br></code></pre></td></tr></table></figure><p>从 <a href="https://t.me/BotFather">https://t.me/BotFather</a> 获取自己bot的token, 具体操作<a href="https://wzk0.github.io/tg-bt/">可看这里</a>, 并替换上述代码第四行<code>你的token</code>.</p><p><code>Ctrl S</code>保存, 现在尝试运行一下.</p><p>对于Win&#x2F;Mac用户, 在终端中输入<code>python3 </code>(记得有空格), 再把文件拖拽进终端(就像文件夹之间移动文件那样), 最后回车即可.</p><p>对于Termux用户, 从屏幕左边缘向右滑, 点击下方的<code>NEW SESSION</code>以打开一个新的终端窗口, 在此窗口中输入<code>python3 bot.py</code>, 回车即可(这种情况默认是把<code>bot.py</code>放在了Termux默认的启动路径下, 即完全按照上述教程创建的文件).</p><p>如果接下来什么反应都没有, 则说明机器人成功运行, 反而如果出现了一大堆文字, 则运行失败.</p><blockquote><p>可能的原因: 代理软件没开系统代理, 或没有安装<code>pyTelegramBotAPI</code>库.</p></blockquote><p>此时, 对Telegram中的bot发送<code>/help</code>或<code>/start</code>, 它们会向你发送<code>你好</code>的消息.</p><p>接着, 在bot正在运行的终端中<code>Ctrl C</code>即可停止bot, 此后每次编辑完成后我们执行<code>运行 - 停止运行</code>这套流程即可对bot进行调试.</p><p>至此, 准备工作结束啦!</p><hr><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p><code>python</code>作为代码世界里相当简单的一门语言, 向来都是很好入门的. 这篇文章并不打算详细讲解关于python的知识(就像之前那个Google Script机器人一样), 而打算让读者一知半解, 更多是直接套模板般做好自己的机器人.</p><blockquote><p>因为一开始我就是这样, 在一知半解中产生了兴趣, 最后逐渐主动去了解与创造, 渐渐摆脱了他人的模板. 如果这篇文章能让读者你对编程产生兴趣, 那我的终极目标算是达到了.</p></blockquote><p>研究上面的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理 &#x27;/start&#x27; 和 &#x27;/help&#x27;</span><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_welcome</span>(<span class="hljs-params">message</span>):<br>    bot.reply_to(message, <span class="hljs-string">&quot;你好, 欢迎使用此bot&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们可以复制这块代码 粘贴在其下方, 现在变成了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理 &#x27;/start&#x27; 和 &#x27;/help&#x27;</span><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_welcome</span>(<span class="hljs-params">message</span>):<br>    bot.reply_to(message, <span class="hljs-string">&quot;你好, 欢迎使用此bot&quot;</span>)<br><br><span class="hljs-comment"># 处理 &#x27;/start&#x27; 和 &#x27;/help&#x27;</span><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_welcome</span>(<span class="hljs-params">message</span>):<br>    bot.reply_to(message, <span class="hljs-string">&quot;你好, 欢迎使用此bot&quot;</span>)<br></code></pre></td></tr></table></figure><p>将下面那块进行如下处理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理 &#x27;/bye&#x27;</span><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;bye&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_bye</span>(<span class="hljs-params">message</span>):<br>    bot.reply_to(message, <span class="hljs-string">&quot;再见&quot;</span>)<br></code></pre></td></tr></table></figure><p>至此, 我们创建了一块能够处理<code>/bye</code>指令的代码, 仔细看, 每行都有变化, 但每行的变化都似乎只是改了个字符.</p><p>的确如此, 此时我们保存代码运行bot, 对bot发送<code>/bye</code>, 它会回复我们<code>再见</code>.</p><p>以此类比, 我们可以写出处理各种指令的不同的代码块, 这个代码块在python中称为<code>函数</code>.</p><p>不过我们的目的是做出一个私聊bot: 当别的用户给机器人发消息时, 机器人会将消息转发给<code>我</code>, 当<code>我</code>给机器人回复消息时, 它会把消息转发给那个用户.</p><p>那么, 我们该怎么写这个<code>函数</code>呢?</p><p>逻辑大概如下: 判断发送消息的人是用户还是<code>我</code>, 如果是用户, 则将用户的消息转发给<code>我</code>; 如果是<code>我</code>, 则向<code>我</code>回复的那条消息的来源用户回复我的消息内容.</p><p>所以我们需要一个函数来处理所有消息, 而不是上面那个简单的函数, 只能处理<code>指令</code>.</p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ADMIN=<span class="hljs-number">123123123</span><br><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">func=<span class="hljs-keyword">lambda</span> message: <span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">for_message</span>(<span class="hljs-params">message</span>):<br>    <span class="hljs-keyword">if</span> ADMIN==message.chat.<span class="hljs-built_in">id</span>:<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><blockquote><p><code>pass</code>代表尚未写的代码.</p></blockquote><p>在这个函数中, 加入了一个<code>if</code>判断<code>id</code>是否等于<code>ADMIN</code>, 从而实现了上面判断是不是<code>我</code>的过程, 注意粘贴时将<code>123123123</code>改为自己的ID, 如果不知道ID可以向 <a href="https://t.me/getmyid_bot">https://t.me/getmyid_bot</a> 发消息.</p><p>先处理用户的消息, 即第二个<code>pass</code>的内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">bot.send_message(ADMIN,<span class="hljs-string">&#x27;来自 @%s [%s] 的消息:\n%s&#x27;</span>%(message.chat.username,message.chat.<span class="hljs-built_in">id</span>,message.text))<br></code></pre></td></tr></table></figure><p>由于<code>pyTelegramBotAPI</code>这个库的某些问题, 无法获取转发消息的来源ID, 因此我们必须把用户的ID放在bot转发给我们的消息中, 继而我们可以获得ID, 再通过此ID向bot发消息, bot再进行转发.</p><p>因此, 我们可以使用正则表达式处理第一个<code>pass</code>中获取用户ID的问题, 但是直接提取数字可能会有混淆问题, 这也是为什么在上面的语句中, 我使用<code>[]</code>包裹用户的ID的原因: 使其更好被正则匹配</p><p>于是第一个<code>pass</code>如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>bot.send_message(re.findall(<span class="hljs-string">r&#x27;\[([^\]]+)\]&#x27;</span>,message.reply_to_message.text)[<span class="hljs-number">0</span>],message.text)<br></code></pre></td></tr></table></figure><p>这条语句对<code>我</code>回复的那条消息进行解析, 得出由中括号包裹的用户ID, bot再向ID为此的用户发送<code>我</code>回复那条消息的内容.</p><p>但假设我不小心没有<code>回复</code>内容, 而是直接发给bot一条消息.</p><blockquote><p>可以自己试一下, 会报错.</p></blockquote><p>因此, 我们可以加入一对<code>try</code>和<code>except</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>bot.send_message(re.findall(<span class="hljs-string">r&#x27;\[([^\]]+)\]&#x27;</span>,message.reply_to_message.text)[<span class="hljs-number">0</span>],message.text)<br><span class="hljs-keyword">except</span>:<br>bot.reply_to(message,<span class="hljs-string">&#x27;请回复一条其他用户转发的消息&#x27;</span>)<br></code></pre></td></tr></table></figure><p>作用是: 当<code>我</code>不小心没有回复消息而触发报错时, 向<code>我</code>发送一条提醒消息.</p><p>综上, 这个函数的全部代码是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">func=<span class="hljs-keyword">lambda</span> message: <span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">for_message</span>(<span class="hljs-params">message</span>):<br>    <span class="hljs-keyword">if</span> ADMIN==message.chat.<span class="hljs-built_in">id</span>:<br>    <span class="hljs-keyword">try</span>:<br>    bot.send_message(re.findall(<span class="hljs-string">r&#x27;\[([^\]]+)\]&#x27;</span>,message.reply_to_message.text)[<span class="hljs-number">0</span>],message.text)<br>    <span class="hljs-keyword">except</span>:<br>    bot.reply_to(message,<span class="hljs-string">&#x27;请回复一条其他用户转发的消息&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        bot.send_message(ADMIN,<span class="hljs-string">&#x27;来自 @%s [%s] 的消息:\n%s&#x27;</span>%(message.chat.username,message.chat.<span class="hljs-built_in">id</span>,message.text))<br></code></pre></td></tr></table></figure><p>而整个<code>bot.py</code>的代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> telebot<br><span class="hljs-keyword">import</span> re<br><br>API_TOKEN = <span class="hljs-string">&#x27;你的token&#x27;</span><br>ADMIN=<span class="hljs-number">123123123</span><br><br>bot=telebot.TeleBot(API_TOKEN)<br><br><span class="hljs-comment"># 处理 &#x27;/start&#x27; 和 &#x27;/help&#x27;</span><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_welcome</span>(<span class="hljs-params">message</span>):<br>    bot.reply_to(message,<span class="hljs-string">&#x27;你好&#x27;</span>)<br><br><span class="hljs-comment"># 处理 &#x27;/bye&#x27;</span><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;bye&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_bye</span>(<span class="hljs-params">message</span>):<br>    bot.reply_to(message, <span class="hljs-string">&quot;再见&quot;</span>)<br><br><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">func=<span class="hljs-keyword">lambda</span> message: <span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">for_message</span>(<span class="hljs-params">message</span>):<br>    <span class="hljs-keyword">if</span> ADMIN==message.chat.<span class="hljs-built_in">id</span>:<br>    <span class="hljs-keyword">try</span>:<br>    bot.send_message(re.findall(<span class="hljs-string">r&#x27;\[([^\]]+)\]&#x27;</span>,message.reply_to_message.text)[<span class="hljs-number">0</span>],message.text)<br>    <span class="hljs-keyword">except</span>:<br>    bot.reply_to(message,<span class="hljs-string">&#x27;请回复一条其他用户转发的消息&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        bot.send_message(ADMIN,<span class="hljs-string">&#x27;来自 @%s [%s] 的消息:\n%s&#x27;</span>%(message.chat.username,message.chat.<span class="hljs-built_in">id</span>,message.text))<br><br>bot.infinity_polling()<br></code></pre></td></tr></table></figure><blockquote><p>其实完全零基础的读者是比较难理解上面的内容的, 但还是那句话, 希望能够激起这部分读者的兴趣, 从而自主地去研究, 探索.</p></blockquote><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决由Linux发行版版本号导致的dnf 404问题</title>
    <link href="/fix-dnf-problem-caused-by-release-version-number/"/>
    <url>/fix-dnf-problem-caused-by-release-version-number/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写文章的这会, 我正处理着一个前所未见的报错:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/%E6%88%AA%E5%9B%BE%202023-08-21%2021-44-07.png" alt="404!"></p><p>没错, 你看到的就是: 熟悉而陌生的404错误!</p><blockquote><p>熟悉是因为我们在浏览网页时常见, 陌生在它出现在我的dnf的报错里.</p></blockquote><p>众所周知, 404代表<code>查无此人</code>, 也就是说, 在互联网上, 没有这个东西的一席之地.</p><p>起初我以为是代理问题, 于是export了代理, 重试后还是同样的报错. 使用浏览器打开链接后, 也提示了404.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/%E6%88%AA%E5%9B%BE%202023-08-21%2021-47-21.png" alt="如图所示"></p><p>我不见棺材不落泪, 还要跳转到镜像站的域名首页, 最终发现人家运行的好好的.</p><p>至此, 我确定了一件事: 是我本地的问题.</p><h2 id="摸索"><a href="#摸索" class="headerlink" title="摸索"></a>摸索</h2><p>到底是哪里的问题, 导致了404呢?</p><p>于是, 我开始研究起了这个网站.</p><blockquote><p>本地不知从何下手.</p></blockquote><p>一般这种包管理器的镜像网站, 都提供了树状图式的预览. 依靠这种<code>顺藤摸瓜</code>的方式, 很快, 我发现了问题所在:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-08-21_21-56-31.jpg" alt="如图所示"></p><p>什么鬼, 为什么我的发行版版本号多了小版本号???</p><p>而镜像网站并没有小版本号.</p><p>找到了问题, 接下来就要找解决方案了.</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>每当我处理Linux的报错时, 耳畔总能回响起不知道是谁说过的那句话:</p><p><em><strong>“Linux一切皆文件”</strong></em></p><p>很自然的, 我去查看了dnf的换源文件, 路径是 <code>/etc/yum.repos.d</code>, 里面塞满了<code>.repo</code>文件.</p><p>我随便打开了一个repo文件, 发现了非常关键的东西:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-08-21_22-03-11.jpg" alt="如图所示"></p><p>报错图片中出现的<code>38.1</code>实际上是一个变量, 而圈住的<code>$releasever</code>就是这个变量, 即为导致我dnf报错的罪魁祸首!</p><p>因为<code>$releasever</code>是一个变量, 于是我尝试echo了一下:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/%E6%88%AA%E5%9B%BE%202023-08-21%2022-06-33.png" alt="如图所示"></p><p>居然echo不了! 奇怪了. </p><p>我以为是权限问题, 毕竟dnf在更新时是需要sudo的. 不过, 切换到root用户后, 还是<code>查无此值</code>.</p><p>怎么办呢?</p><p>那我设置一个环境变量得了.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/%E6%88%AA%E5%9B%BE%202023-08-21%2022-08-33.png" alt="如图所示"></p><p>事与愿违, 失败了.</p><p>不过紧接着, 我又想起来另一种设置变量的方法:</p><p>也就是指令运行时, 所谓的参数, 例如运行electron软件<del>常用</del>的<code>--no-sandbox</code>.</p><p>试一试!</p><p>我在<code>dnf update</code>后面加上了<code>--releasever=38</code>, 然后:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/%E6%88%AA%E5%9B%BE%202023-08-21%2022-17-07.png" alt="如图所示"></p><p>成功!</p><p>觉得这样有点麻烦的, 可以编辑一下自己的<code>.zshrc</code>或<code>.bashrc</code>, 添加:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> up=<span class="string">&#x27;sudo dnf update --releasever=38&#x27;</span></span><br></pre></td></tr></table></figure><p>以后就能通过输入<code>up</code>这个指令完成<code>update</code>啦!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>有关包管理器(尤其是dnf)出现404报错的, 需要检查镜像网站有没有提供此发行版版本的内容;</p></li><li><p>使用<code>--</code>为当前执行的指令加上运行参数.</p></li></ol><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用DSU Sideloder实现安卓双系统</title>
    <link href="/use-dsu-sideloder/"/>
    <url>/use-dsu-sideloder/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前些日子写了篇关于<a href="https://wzk0.github.io/ksu-for-beginner/">使用KernelSU来root手机的教程</a>, 后面连着几天也是一直痴迷于找模块, 装模块.</p><p>不过很快便有些腻了, 因为刷的这些模块, 效果似乎不怎么显著?</p><p>于是萌生了一个大胆的想法: 刷一个新系统!!</p><p>然后就在网上找啊找, 目标是<code>好用, 简洁, 支持莫奈取色的类原生系统</code>, 不过那些类原生们无一例外地都有些或多或少的缺点.</p><p>我害怕了, 望而生畏.</p><p>一是怕刷成砖头(有经验了), 二是怕刷了不好用.</p><p>怎么办? 好想拥有一个类似Linux系统都会支持的U盘<code>live system</code>.</p><p>这样的话, 我可以先试试, 好用就装, 不好用就弃.</p><p>或者, 什么可以容错的双系统?…</p><p>碰巧, 在这山重水复疑无路之际, 遇到了<code>DSU Sideloder</code>.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先需要确保手机自带<code>DSU Loader</code>功能:</p><p>只需打开<code>开发者模式</code>, 往下翻动即可看到<code>DSU Loader</code>的字样(不用翻很多), 如果没有的话, 说明设备不支持.</p><p>只要看到这个选项就行, 不需要点它.</p><blockquote><p>这个功能大概率在出厂即为安卓12的手机上有.</p></blockquote><p>随后, 去谷歌商店下载一个检测软件:</p><p><a href="https://play.google.com/store/apps/details?id=tk.hack5.treblecheck">https://play.google.com/store/apps/details?id=tk.hack5.treblecheck</a></p><p>安装好后, 若显示如下字样, 则说明可以继续:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-08-04_21-04-57.jpg" alt="如图所示"></p><p>点击<code>浏览映像</code>, 选择其中的一个系统并下载其镜像.</p><p>我目前使用的是<code>Unofficial Android 13</code>中的<code>Evolution X</code>, 除了不能收短信以外, 其他都正常.</p><blockquote><p>我也很奇怪, 只能发不能收…</p></blockquote><p>当然了, 反正是双系统, 你可以多试几个.</p><p>那么, 问题来了, 怎么试呢?</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先下载<code>DSU Sideloader</code>: <a href="https://github.com/VegaBobo/DSU-Sideloader/releases/download/2.03/app-release.apk">https://github.com/VegaBobo/DSU-Sideloader/releases/download/2.03/app-release.apk</a> 并安装.</p><p>不过在开始安装之前, 容我以简单的语言表述我对这一双系统原理的浅显理解:</p><blockquote><p>这是官方的说法: <a href="https://developer.android.com/topic/dsu?hl=zh-cn">https://developer.android.com/topic/dsu?hl=zh-cn</a></p></blockquote><p>实际上, 这功能就是给安卓开了一个新分区, 使得类似于电脑上的一个主板系统可以检测到此系统, 并让其启动.</p><p>还记不记得上节说的<code>KernelSU</code>, 就是在开机的时候的<code>boot分区</code>上”做了手脚”, 从而获取了root权限.</p><p>那么, 为何不能也做做手脚, 在手机开机的时候多一个启动项呢?</p><p>我个人认为, 这过程就跟BIOS的作用一样, 大同小异.</p><p>好了, 不再扯皮! 扯点别的.</p><p>为什么我们不用在设置里看到的<code>DSU Loader</code>呢?</p><p>设置里的这个<code>Loader</code>, 默认只提供了谷歌原生的镜像, 而正是因为我们要体验类原生, 所以不用系统自带的这个入口, 继而使用<code>Sideloader</code>这个第三方软件添加双系统.</p><p>如果你想体验谷歌的原生安卓, 可以不使用<code>DSU Sideloader</code>.</p><p>OK!</p><p>下载好了镜像, 我们打开<code>DSU Sideloader</code>.</p><p><code>DSU Sideloader</code>不需要root权限即可运行, 只需要电脑adb授予权限即可, 不过我没有试过adb那种, 因为我的手机已经root啦!</p><blockquote><p>还不知道怎么root手机? &#x3D;&#x3D;&gt; <a href="https://wzk0.github.io/ksu-for-beginner/">https://wzk0.github.io/ksu-for-beginner/</a></p></blockquote><p>点击<code>选择一个要安装的GSI文件</code>并选择我们刚刚下载好的镜像, 下面的<code>DSU用户空间大小</code>即为要分给此系统的储存大小, 我的手机是1T, 所以非常豪迈地分了128给它!</p><p>设置好一切后, 点击安装, 耐心等待即可.</p><p>待安装好双系统后, <code>DSU Sideloader</code>出现以下字样:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_1_2023-08-04_21-36-38.jpg"></p><p>同时通知栏会出现一个常驻的清理不掉的通知:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2_2023-08-04_21-36-38.jpg"></p><p>切记莫点舍弃! 否则花那么久安装的双系统直接扼杀在摇篮里了.</p><p>怎么启动到双系统呢?</p><p>只需打开<code>DSU Sideloader</code>, 或从那个常驻通知中点击重启即可.</p><h2 id="永久双系统"><a href="#永久双系统" class="headerlink" title="永久双系统"></a>永久双系统</h2><p>如果上面的步骤都跟着来的话, 现在的你应该已经在使用另一个系统了(简称b系统).</p><p>此时, 若要回到原系统, 只需在双系统中重启即可.</p><p>那有没有什么办法, 让我在b系统中重启, 还不回到原系统呢?</p><p>答案是肯定的.</p><p>有两种方法, 如果你有电脑, 只需在adb连上b系统后, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell gsi_tool <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>即可.</p><blockquote><p>如果是Linux系统, 且手机被root, 会提示permission不够, 加sudo就行.</p></blockquote><p>如果没有电脑, 需要在b系统中安装<code>Termux</code>与<code>KernelSU</code>, 同时让<code>KernelSU</code>给<code>Termux</code>授予root权限.</p><p>打开<code>Termux</code>, 输入<code>su</code>回车, 再输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsi_tool <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>出现如下字样则说明成功:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-08-04_21-46-21.jpg"></p><p>此时b系统进入<code>重启后还是b系统</code>模式, 若要退出此模式, 只需将上述指令中的<code>enable</code>换成<code>disable</code>, 再次执行即可.</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Root</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>萌新向的root方案:KernelSU使用教程</title>
    <link href="/ksu-for-beginner/"/>
    <url>/ksu-for-beginner/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你是否一直很期待拥有一台被root过的手机呢?</p><p>你是否总是一腔热血, 打开各种root教程, 最后头大着离去呢?</p><p>你是否在无数个夜里, 憧憬着root后的手机, 幻想着自己正在把玩呢?</p><p>你是否问遍了天涯海角的科技社区, 只听见大佬甩你一句, 自己网上搜呢?</p><p>没关系, 今天这篇零基础的root教程只为尚属于搞机萌新的你我而写!</p><p class="note note-danger">请一定一定看完文章再操作!</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>以下几个东西是必要的:</p><ul><li>品牌为小米&#x2F;红米&#x2F;一加&#x2F;pixel&#x2F;…的<strong>新机型</strong>手机.</li></ul><blockquote><p>华为, OPPO, VIVO用户以及老机型用户现在可以离开了, 对不起!</p></blockquote><ul><li><p>电脑一台, 系统无所谓.</p></li><li><p>一根数据线, 原厂的充电线即可.</p></li></ul><p>由于我前些阵子刚买了<code>红米 Note 12 Turbo</code>, 所以在本文中, 我也会以一个小米&#x2F;红米用户的角度去说明.</p><blockquote><p>一加手机的操作比小米&#x2F;红米是要简单点的!</p></blockquote><h2 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h2><p>不管你是不是第一次搞机, 如果你曾在搜索引擎上搜索过<code>如何root手机</code>, 一定会看到<code>bl锁</code>这个名词.</p><p><code>bl</code>是<code>bootloader</code>的缩写, <code>boot</code>是启动, <code>load</code>是加载.</p><blockquote><p>关于bl锁的介绍: <a href="https://zhuanlan.zhihu.com/p/556181275">https://zhuanlan.zhihu.com/p/556181275</a></p></blockquote><p>我们大可不必知道其原理, 只需把这个锁看成进别人家的门锁, 把<code>获取到root权限</code>作为进到别人家后的最终目的即可.</p><blockquote><p>实际上, root是个名词, 指的是root权限, 也可以理解为安卓手机中的最高权限, 大家平常说<code>root这台手机</code>是把root当作动词来看了.</p></blockquote><p>那么如何解锁呢?</p><p>首先, 不论是任何手机, 都应该打开其<code>开发者模式</code>.</p><p>这个模式的打开方式(小米&#x2F;红米)为:</p><p>打开手机的<code>设置</code>, 找到<code>我的设备</code>, 点击<code>全部参数和信息</code>, 然后狂点<code>MIUI版本</code>, 直到下面弹出已进入开发者模式的字样.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/1000001639_origin_Screenshot_2023-06-27-22-17-56-266_com.android.settings-edit.jpg" alt="如图所示"></p><p>然后在设置中搜索<code>开发者选项</code>, 往下面翻到<code>设备解锁状态</code>, 点进去.</p><p>最下面有一个什么绑定, 点一下, 接下来七天就不要再点了!</p><blockquote><p>注意: 小米&#x2F;红米手机需要等待七天, 在这个期间再次点击这个按钮会导致日期重置! 一加不需要等待.</p></blockquote><p>网上有一些说跳过七天等待的, 建议不要, 慢慢等待就好.</p><p>顺带着, 我们把下面的<code>USB调试</code>也打开.</p><p>七天之期到了后, 需要使用到我们的电脑了.</p><p>点击下方链接下载<code>小米解锁工具</code>:</p><p><a href="https://cdn.cnbj1.fds.api.mi-img.com/flash-tool/miflash_unlock_6.6.510.37.zip">https://cdn.cnbj1.fds.api.mi-img.com/flash-tool/miflash_unlock_6.6.510.37.zip</a></p><p>解压, 运行里面的<code>miflash_unlock.exe</code>.</p><p>会提示你要登陆小米账号, 注意, <strong>只能使用手机号+密码的方式登陆</strong>, 并且此账号需要是你小米手机里和设备绑定的账号, 其他方式登陆能进去, 但是无法解锁.</p><p>之后, 将手机备份, 随后关机.</p><p>接着长按<strong>音量下键</strong>和<strong>电源键</strong>, 直到出现<code>FASTBOOT</code>的字样, 将手机和电脑通过数据线连接起来.</p><p>此时小米解锁工具会显示<code>设备已连接</code>, 点击下方<code>解锁</code>即可.</p><p>经过一个不算漫长的等待时间, 手机会自动开机. 然后和刚购买新机时一样, 开始设置系统语言什么的.</p><p>至此, bl锁就解开啦!</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/1000001658_origin_Screenshot_2023-06-28-09-47-14-523_com.android.settings.jpg" alt="如图所示"></p><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>现在只是把门打开了, 接下来才是重头戏.</p><p>我们需要安装<code>KernelSU</code>.</p><p>如果你搜索过root手机相关的东西, 一定会看到<code>magisk</code>(又称<code>面具</code>), 这里的<code>KernelSU</code>是和面具一样的存在.</p><p>不过, 我认为<code>KernelSU</code>的root过程比面具方便快捷得多.</p><p>面具整个root下来, 可能需要一会时间, 而且萌新即使看了教程可能也不会.</p><blockquote><p>喂, 说你呢, 便当!</p></blockquote><p>同时, 如果你使用面具这套方案, 手机里的软件是能够检测到手机被root的, 银行这类的软件就无法使用了.</p><p>因此, 我推荐也即将介绍如何使用<code>KernelSU</code>.</p><p>首先, 点击下方链接下载安装包:</p><p><a href="https://github.com/tiann/KernelSU/releases/download/v0.6.1/KernelSU_v0.6.1_11041-release.apk">https://github.com/tiann/KernelSU/releases/download/v0.6.1/KernelSU_v0.6.1_11041-release.apk</a></p><p>如果没有翻墙, 可以点这个:</p><p><a href="https://ghproxy.com/https://github.com/tiann/KernelSU/releases/download/v0.6.1/KernelSU_v0.6.1_11041-release.apk">https://ghproxy.com/https://github.com/tiann/KernelSU/releases/download/v0.6.1/KernelSU_v0.6.1_11041-release.apk</a></p><p>安装之后, 打开会显示<code>未安装</code>, 这也说明了, 你的手机是可以root的!</p><blockquote><p>如果显示<code>不支持</code>, 那就是不支持, 下文也没有帮助了, 对不起!</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/1000001667_origin_Screenshot_2023-06-28-10-17-29-122_me.weishu.kernelsu-edit.jpg" alt="如图所示"></p><blockquote><p>我的手机是已经刷过了的, 所以和你的界面可能不一样, 无需在意.</p></blockquote><p>注意这个内核版本号, 接着根据官方所说的进行选择:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/1000001669_origin_Screenshot_2023-06-28-10-22-41-905_org.mozilla.firefox-edit.jpg" alt="如图所示"></p><p>在这里选择: <a href="https://github.com/tiann/KernelSU/releases/tag/v0.6.1">https://github.com/tiann/KernelSU/releases/tag/v0.6.1</a></p><p>如果你恰好买的也是<code>红米 Note 12 Turbo</code>, 那可以<a href="https://ghproxy.com/https://github.com/tiann/KernelSU/releases/download/v0.6.1/android12-5.10.149_2023-01-boot-gz.img.gz">点击此链接</a>下载.</p><p>下载下来的是一个压缩包, 需要解压, 建议使用7z.</p><p>解压得到一个xxx.img, 可以把它命名为<code>boot.img</code>.</p><p>接着, 需要在电脑上安装adb, 如果你的电脑系统是Linux, 或者有WSL会更方便!</p><p>如果电脑系统是Windows, 可以<a href="https://blog.csdn.net/x2584179909/article/details/108319973">查看此文章</a>安装adb.</p><p>安装好后, 快捷键<code>win</code>+<code>R</code>, 输入<code>cmd</code>打开一个终端.</p><p>将手机与电脑通过数据线连接起来.</p><p>输入<code>adb devices</code>, 此时手机上应该会出现<code>是否允许此设备调试</code>字样, 点击允许.</p><blockquote><p>如果没有出现, 请重新拔插数据线, 并在数据线连接电脑的时候选择<code>传输文件</code>或<code>传输照片</code>.</p></blockquote><p>之后再<code>adb devices</code>, 没问题的话就会显示你的设备啦!</p><p>接着输入<code>adb reboot bootloader</code>, 手机显示<code>FASTBOOT</code>.</p><p>输入<code>fastboot boot boot.img</code>, 注意, 这里的<code>boot.img</code>是刚刚下载及解压的img文件的完整路径, 你可以直接把那个文件拖拽到终端, 这样能获取到完整路径.</p><p>此时, 如果手机重新开机, 且打开<code>KernelSU</code>之后显示<code>工作中</code>的字样, 说明此<code>boot.img</code>是可以用的!</p><p>既然可用, 那我们把它刷入即可永久使用.</p><p>还是输入<code>adb reboot bootloader</code>, 然后输入<code>fastboot flash boot boot.img</code>.</p><blockquote><p>这里的<code>boot.img</code>同理, 是文件的完整路径.</p></blockquote><p>重新开机后, 我们就永久地拥有了root权限啦!</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>你可能想问, 就这么简单吗? 为什么我看到的root教程那么复杂, 还要下载几个G的root包什么的.</p><p>没错, 得益于<code>KernelSU</code>的强大, root变得简单多了.</p><p>那么如何使用呢?</p><blockquote><p>接下来以<code>ksu</code>代替<code>KernelSU</code>.</p></blockquote><p><code>ksu</code>下面有三个栏目, 第一个显示相关信息, 第二个显示root授权状态, 第三个则是显示模块.</p><p><code>ksu</code>的root授权是白名单式的, 跟<code>magisk</code>不一样. 前文说过, 如果你使用了<code>magisk</code>, 软件是能检测到手机是被root过了的.</p><p>但是<code>ksu</code>不一样, 它的白名单功能让root变为了<code>授权</code>而非软件<code>要求</code>.</p><p>这么说吧, 一个软件需要root权限, 如果你是通过<code>magisk</code>的方式, 那么此软件会在你一进入的时候就让<code>magisk</code>弹窗申请root权限.</p><p>而<code>ksu</code>需要你在第二个栏目中, 手动为想要授予root权限的软件授权.</p><p>例如, 我们要给<code>mt管理器</code>授权, 只需要在第二个栏目中点击<code>mt管理器</code>, 打开<code>超级用户</code>即可.</p><p>这个思路有点像代理软件中的分应用代理, 非常有趣.</p><p>除了授权root之外, <code>ksu</code>也支持如<code>magisk</code>里的模块功能.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/1000001671_origin_Screenshot_2023-06-28-11-04-38-436_me.weishu.kernelsu.jpg" alt="我安装的一些模块"></p><p>模块可以通过谷歌<code>爱玩机工具箱</code>或者从<code>酷安</code>里找.</p><p>总之, 使用<code>ksu</code>, 我也在慢慢摸索!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说, 步骤如下:</p><ol><li><p>先在手机上安装<code>KernelSU</code>以查看自己的设备是否支持这种方式root;</p></li><li><p>如果支持, 在<code>KernelSU</code>的仓库里找对应的<code>boot.img</code>;</p></li><li><p>如果找到, 把文件下载下来, 同时解bl锁(小米&#x2F;红米用户七天申请, 一加用户秒解);</p></li><li><p>如果bl锁解开, 先试试<code>boot boot.img</code>看看成不成功;</p></li><li><p>如果成功, <code>flash boot boot.img</code>.</p></li></ol><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Root</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么我不推荐Linux用户买华为笔记本</title>
    <link href="/why-not-hw/"/>
    <url>/why-not-hw/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章小部分建立在个人对华为主观的排斥这个基础之上.</p><p>但是在文章的大部分内容中, 我只想从个人体验以及搜索到的内容, 以<code>喜欢Linux的人</code>的身份进行评价.</p><p>所以, 不要骂我噢?</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>高考结束了.</p><p>没错! 看起来好像跟这篇文章没什么关系. </p><p>但是高考结束直接或间接地促成了<code>家人给我买了笔记本</code>这个事件的发生.</p><p>老爸是华为的铁粉, 是被称之为<code>花粉</code>的存在.</p><p>自然地, 他在没有和全家商量的情况下, 花了将近8000元, 买了<code>华为Matebook E</code>, 当季新品.</p><blockquote><p>原价8k多, 我爸这是找熟人了, 所以想退也退货不了…</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20230613114507.png" alt="如华为官网所示"></p><p>这款笔记本并非没有亮点, 触摸屏, 锁屏键, 音量键等, 都挺不错的. </p><p>总之就是外观看上去的话, 爱不释手.</p><p>所以我在得到它的第一个晚上, 就准备安装梦寐以求许久的<code>risiOS</code>(<a href="https://risi.io/">https://risi.io/</a>)</p><blockquote><p>risiOS是基于Fedora的Linux发行版, 预装了一些很不错的软件包, 比方说Mint的<code>Web App Manager</code>.</p></blockquote><p>进到主板系统之后, 发现功能真的少得可怜. </p><p>关闭了安全模式, 进到了U盘系统, 结果——</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-06-13_12-32-18.jpg" alt="屏幕好像裂了一样"></p><p>我肯定不死心啊! 毕竟已经幻想过很多次在笔记本上使用那些在Linux上超好用的软件了.</p><p>于是又试了<code>Fedora</code>, <code>Ubuntu</code>, <code>Debian</code>, <code>PopOS</code>…</p><p>基本上是所有的基于<code>Debian</code>系和<code>Fedora</code>系的发行版, 都试了一遍, 无一例外地失败了.</p><p>Debian系出现的情况是<code>可以live, 可以安装, 安装后开机后蓝屏或黑屏</code>, 如下图:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-06-13_12-21-07.jpg" alt="Debian系的UOS"></p><p>Fedora系出现的情况是<code>可以live, 可以安装, 安装后屏幕裂成两半</code>. 此外, 国产Linux系统<code>deepin</code>也出现了这样的情况, 只不过deepin在live阶段已经裂屏:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-06-13_12-20-58.jpg" alt="deepin"></p><p>…</p><h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>我跟售后打了电话, 售后小哥大概不知道什么是Linux, 说找一下技术人员问问.</p><p>技术人员给我的答案是:”不能安装Linux系统, 你可以自己多试试”.</p><p>…</p><h2 id="于是"><a href="#于是" class="headerlink" title="于是"></a>于是</h2><p>放弃了. 最终从预装的<code>Windows 11</code>回到了<code>Windows 10</code>.</p><p>在网上也找到了修改grub的教程, 试了无用.</p><p>怀疑是驱动的问题, 开源的闭源的都试了, 没解决.</p><p>有可能是内核版本太高? 手动换了低版本的内核, 最后还是和原来一样.</p><p>而且不止是我一个人的问题:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-06-13_12-20-52.jpg" alt="b站评论截图"></p><p>好吧, 如果是这样, 那我只好任命了…</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20230613124401.png" alt="我的本"></p><p>退而求其次, 我用了<code>WSL</code>这个方案.</p><blockquote><p>不想使用虚拟机, 因为<code>卡</code>, 而且感觉没和电脑融为一体.</p></blockquote><p>本来都快被Windows搞得要戒网瘾了, 现在WSL也不错, 还能运行Linux的GUI程序.</p><p>例如<code>Linux QQ</code>:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/photo_2023-06-13_12-48-49.jpg" alt="如图所示, 但是打不了中文"></p><p>况且, 家长对这方面也不算了解, <strong>大概只是被那些导购员天花乱坠的讲解欺骗了而已</strong>.</p><blockquote><p>喂, 华为是主打商务吧, 怎么拓展市场到学生用本上了呢? 听说最近还在忙着造车.</p></blockquote><p>我也只能一个人默默承受, 默默摸索Windows的用法…</p><blockquote><p>以后自己赚钱了买个新的!!!</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>综上所述, 不知道能不能以上面我的折腾史论证这个标题, 并改变每个<code>喜欢Linux, 又要买华为笔记本的人</code>的想法.</p><blockquote><p>By the way, 华为手机也改了很多, 毕竟用的是<code>鸿蒙系统</code>, 跟安卓可不兼容. 不信的话可以试试<a href="https://github.com/LSPosed/LSPatch">LSPatch</a>, 在鸿蒙上用不了诶!</p></blockquote><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Talk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些在新时期要说的新话</title>
    <link href="/new-book/"/>
    <url>/new-book/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这么久没更新的我, 不知道有没有被大家所忘记呢?</p><p>看了一下网站最后的更新记录, 是去年12月. 自那之后, 我进入了高三的最后一个所谓”冲刺”的阶段.</p><p>并不是没时间玩电脑, 而是当时不知道有什么可写, 脑子里空空的.</p><p>而如今, 那个阶段已经过去了.</p><p>前些日子, 家人给我买了新笔记本(是华为的, 我打算以后专门写篇文章吐槽一下!), 我在转移电脑原本的数据的时候, 突然想写点什么东西了.</p><p>于是, 我把博客移了过来.</p><p>打算在接下来这个新时期, 写点要说的新话. 这篇可以说是<code>序</code>.</p><hr><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>首先, 我打算将每篇文章的链接命名为有些含义的, 而非之前的模模糊糊的<code>简写</code>.</p><blockquote><p>如之前, <code>bdn</code>等等这种, 自己也不知道内容是什么. 本篇链接命名为<code>new-book</code>, 就大概能知道个文章内容了.</p></blockquote><p>这件事比较重要, 所以要挑出来说! </p><p>因为可能会有一些网站引用我的博客里的一些文章或者图片, 如果修改了之前的链接地址, 可能会失效. 麻烦这些站长再及时更新!</p><blockquote><p>或许是我自作多情, 可能根本没人会引用吧!</p></blockquote><p>其次, 博客的内容会引入一些系列类文章.</p><blockquote><p>毕竟这几天我买了电吉他, 又打算学Android开发相关的东西, 还在考驾照, 以及为教准备上小学三年级的家中晚辈做备课…</p></blockquote><p>应该会写一些关于这些学习经历的心得吧!</p><p>噢, 对了, 在学校的时候, 憋了一篇小说, 可能也要在博客里发一下.</p><p>这些系列文章, 我打算为他们添加独有的标签. 但与编程无关的所有内容, 统一会归为<code>NOTE</code>分类.</p><blockquote><p>注意: 在我的博客中, <code>分类</code>和<code>标签</code>是两个概念. 分类只有<code>EDITOR</code>(编程类)和<code>NOTE</code>(记录类), 若以后音乐学有所成, 可能会加一个<code>MUSIC</code>分类.</p></blockquote><p>重新编辑过去的每一篇文章的标签是个大工程, 所以既往不咎, 接下来会使用一些新标签.</p><p>标签和分类的命名准备和原来一样, 继续全部使用英文.</p><p>最后, 发现<code>CoverView</code>生成的文章封面图不适配, 而且变难看了.</p><blockquote><p>这个是博客文章封面图生成的一个网站.</p></blockquote><p>所以以后封面图这东西随缘出现! 有好看的我会保存备用.</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>总之, 就这么多!</p><p>说明了自己的规划, 同时这也是一篇测试博客转移后能否正常使用的文章.</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Talk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迟来的2022年终总结</title>
    <link href="/e22/"/>
    <url>/e22/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2023都已经开始两天了才动笔的原因是: 前段时间阳了.</p><blockquote><p>是啊, 坎坎坷坷一年, 甚至说坎坎坷坷了三年, 最终还是落得这个结果.</p></blockquote><p>躺床上休息了大约一周, 现在又可以爬起来上课, 敲键盘了.</p><p>那么乘胜追击, 谨以此文</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RETBleed: WARNING: Spectre v2...的解决办法及一次被内核折腾的经历</title>
    <link href="/rbd/"/>
    <url>/rbd/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20221221cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>尽管文章标题是这个, 但<code>RETBleed: WARNING: Spectre v2...</code>这个报错是在我被内核折腾完后发生的.</p><p>所以我要先述说折腾的故事.</p><h2 id="为什么被内核折腾"><a href="#为什么被内核折腾" class="headerlink" title="为什么被内核折腾"></a>为什么被内核折腾</h2><p>我使用的电脑系统是<code>Ubuntu 22.04.1 LTS</code>(以下简用<code>ub</code>代之).</p><p><code>ub</code>有一个很大的特点就是: 稳. <code>稳</code>向来都是一个中性词, 随着知识面的不断扩展, <code>稳</code>在我这儿逐渐变成了贬义词.</p><p>为什么这么说呢? 又要从我的审美说起了(别着急马上到重点, 我这前面都是铺垫🌚).</p><p>我很喜欢gtk风格的软件, 圆滑, 有质感. 但是apt中的gtk软件并不多, 同时那些开发者并没有发布编译好的软件包, 因此只能自己从源码编译.</p><blockquote><p>实际上, 他们发布了<code>flatpak</code>的包, 但是我非常不喜欢<code>flatpak</code>, 感觉它和系统没法完全融为一体.</p></blockquote><p>结果就在这编译的过程中遇到了问题: 太老了.</p><p><code>ub</code>上有一个依赖始终无法安装: <code>libadwaita-1.2.0-1</code>(如果你可以安装请务必告诉我安装方法!).</p><p>首先是通过apt, apt安装的版本是1.1; 接着我尝试从源码编译, 又遇到了新的依赖问题gtk4 4.9.1…</p><p>就这样恶性循环, 版本号始终低那么一点点. 后来无意中了解到, <code>ub 22.04</code>取消了<code>libadwaita-1.2.0-1</code>!</p><p>那这和折腾内核有什么关系呢???</p><p>因为版本号过低, 于是我打算使用预发布的apt源. 就在我换了源, update, 然后upgrade完再重启后:</p><p><strong>无法开机, 报错了! Kernel offset!</strong></p><p>因此, 我踏上了<strong>被迫</strong>折腾内核的旅程.</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我赶紧拿出手机开始搜解决办法, 同时在tg群中求助.</p><p>与此同时, 我也通过<code>recovery mode</code>重新进入到了桌面.</p><p>怎么进入这个<code>mode</code>呢? 首先你需要在加载主版画面的时候狂按<code>ESC</code>, 直到加载出类似U盘启动盘的菜单画面.</p><blockquote><p>注意, <code>ESC</code>多按一下就会进到grub的指令界面, 所以按的时候要看屏幕, 不要按多了!</p></blockquote><p>显示菜单后, 移动到下面的<code>recovery mode</code>(当时比较慌乱, 没有记太清名字. 总之不是第一个选项)回车.</p><p>然后会再显示一个界面, 似乎有一个什么什么boot, 大概是第一个选项, 回车.</p><p>接着会看到一堆内核列表, 有些内核后面还有<code>(recovery)</code>. 我选择了-56版本.</p><blockquote><p>因为在换了预发布源update的时候, 看到了要更新的内核版本为-57, 所以选择一个比它低的.</p></blockquote><p>与此同时, 群友建议我先update. 于是我删除了<code>/etc/apt/sources.list</code>刚加的两行预发布源, 同时update了一下.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212211646225.png"></p><p>没有过去! 通过分析报错, 大概知道了是因为显卡驱动的问题, 现有的驱动和最新的系统冲突了. 而且我用的是闭源的Nvidia驱动.</p><p>于是, 在建议之下, 我purge了nvidia*, 同时autoremove了一些东西.</p><p>然后purge了-57的内核, update过去了. 再次尝试重启:</p><p><strong>成功!</strong></p><p>重新进入到系统后, update时发现了新的错误:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212211653950.png"></p><p>anbox, 似乎是我之前安装过的一个在linux模拟运行安卓软件的容器.</p><p>反正也卸载了, 于是直接把报错提示的那个路径删除了.</p><h2 id="RETBleed"><a href="#RETBleed" class="headerlink" title="RETBleed"></a>RETBleed</h2><p>尽管开机正常了, 却出现了一个新的提示:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212211700752.png"></p><p>这个描述看起来就很恐怖了, 什么数据可能泄露. 一搜索, 好家伙, 居然是一个可执行漏洞!</p><p>怎么解决呢? 很多篇文章都没有说怎么解决, 都是在提问.</p><p>有些咨询文章提到这个漏洞已经在5.19版本的内核中解决了.</p><p>而我现在的内核版本是<code>5.15.0-56</code>, 怎么之前开机的时候没有这个提示.</p><p>想到先前被内核折腾的经历, 我打算升级内核了. 但是apt update和upgrade都是最新的. 更不会考虑使用预发布源了.</p><p>于是搜索了怎么升级内核. 看到有一个方法: <code>sudo apt upgrade linux-image-generic</code>.</p><p>奇怪, 我upgrade都提示最新了, upgrade单独一个包怎么可能提示呢?…</p><p>但是执行之后, 还真有反应:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/%E6%88%AA%E5%9B%BE%202022-12-21%2015-57-00.png"></p><p>microcode, 也有搜到RETBleed是一个对微处理器的攻击, 那这个upgrade大概有用吧.</p><p><strong>再次重启, 提示消失!</strong></p><blockquote><p>关于有没有必要更新内核, 可以看这篇文章: <a href="https://blog.csdn.net/weixin_33525298/article/details/112200310">https://blog.csdn.net/weixin_33525298/article/details/112200310</a></p></blockquote><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比Clash更好的全设备/系统(除IOS)替代方案</title>
    <link href="/nkr/"/>
    <url>/nkr/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Clash一直以其<code>强大</code>, <code>易用</code>, <code>美观</code>, <code>全平台都可用</code>等特点而被大家所喜爱.</p><p>不过相较于类V2的软件, Clash在直接导入<code>vmess</code>, <code>vless</code>等节点上比较麻烦, 需要先进行<code>订阅转换</code>再导入.</p><p>那么本文将会为大家介绍另一套方案, 在可以使用Clash订阅的基础上, 还可以直接导入其他协议的单节点, 操作上也和Clash的难度一样!</p><blockquote><p>本篇提到的Clash均<code>不是</code>Clash内核, 而是具体的<code>Clash for Android</code>或<code>Clash for Windows</code>, 以<code>Clash</code>代称之.</p></blockquote><h2 id="安卓端"><a href="#安卓端" class="headerlink" title="安卓端"></a>安卓端</h2><p>安卓端的替代软件是<code>Matsuri</code>, 也就是<code>茉莉</code>.</p><p>当前版本<code>0.5.8</code>:</p><ul><li><p>项目地址: <a href="https://github.com/MatsuriDayo/Matsuri">https://github.com/MatsuriDayo/Matsuri</a></p></li><li><p>下载链接(无需翻墙): <a href="https://ghproxy.com/https://github.com/MatsuriDayo/Matsuri/releases/download/0.5.8/Matsuri-0.5.8-arm64-v8a.apk">https://ghproxy.com/https://github.com/MatsuriDayo/Matsuri/releases/download/0.5.8/Matsuri-0.5.8-arm64-v8a.apk</a></p></li></ul><blockquote><p>点击上方的下载链接即可!</p></blockquote><p>安装完成后打开, 会发现软件界面是粉红色, 这个可以在<code>左上角三条杠 &gt; 设置 &gt; 主题颜色</code>中修改.</p><p>那么<code>茉莉</code>怎么添加Clash节点呢?</p><p>首先, 我们需要复制一个Clash节点.</p><p>点击<code>左上角三条杠 &gt; 分组 &gt; 右上角添加</code>:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212191924993.png"></p><p>点击图片中红色圈圈的地方(<code>订阅类型</code>), 选择<code>分组类型</code>为<code>订阅</code>, 此时下面将会出现一些关于订阅设置的东西.</p><p>点击图片中蓝色圈圈的地方(<code>订阅链接</code>), 粘贴刚刚复制的Clash订阅.</p><p>最后点击右上角黄色圈圈的地方的<code>对勾</code>.</p><p>点击<code>对勾</code>之后, 会发现<code>分组</code>这个界面下面多了一个刚刚添加的<code>分组</code>, 不过显示<code>从未更新</code>.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212191929254.png"></p><p>只需点击图片中红色圈圈的地方(<code>更新</code>)即可, 稍等片刻后会弹窗<code>变化</code>(如果导入成功的话).</p><blockquote><p>常见的失败情况: 1. 订阅链接有多余符号, 比方说结尾有个换行或者空格; 2. 订阅地址可能放在如Github这样的平台上, 更新订阅需要翻墙.</p></blockquote><p>随后我们再次点击<code>左上角三条杠 &gt; 配置</code>就能看见刚刚添加的节点啦!</p><p>可以点击<code>右上角三个点 &gt; 连接测试 &gt; URL Test</code>测试节点的真实延迟. 测试后, 可以点击<code>右上角三个点 &gt; 排序 &gt; 以延时</code>将节点按照延时进行从小到大排序.</p><p>最后, 我们点击那个延时最小的(也就是最上面的), 点击后, 选择的节点前会突出显示一条竖线, 接着点击最低部的<code>小飞机</code>图案即可.</p><blockquote><p>第一次启动会弹窗<code>连接请求</code>, 点击<code>确定</code>即可.</p></blockquote><p>若要导入单个<code>vless</code>, <code>vmess</code>节点, 只需要复制节点, 点击<code>右上角三个点左边的文件图标 &gt; 从剪切板导入</code>即可.</p><p>当然, <code>茉莉</code>的强大功能有很多, 这里只做最简单的使用说明. 可以自己摸索一下<code>设置</code>中的功能.</p><h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><p>PC端我们同样使用来自<code>茉莉</code>作者的<code>NekoRay</code>.</p><p><code>NekoRay</code>支持所有系统(Windows&#x2F;Linux&#x2F;MacOS), 而且支持<code>茉莉</code>支持的所有协议.</p><p>当前版本<code>2.9</code>:</p><ul><li><p>项目地址: <a href="https://github.com/MatsuriDayo/nekoray">https://github.com/MatsuriDayo/nekoray</a></p></li><li><p>Windows下载链接(无需翻墙): <a href="https://ghproxy.com/https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-windows64.zip">https://ghproxy.com/https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-windows64.zip</a></p></li><li><p>Linux下载链接(无需翻墙): <a href="https://ghproxy.com/https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-linux64.zip">https://ghproxy.com/https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-linux64.zip</a></p></li><li><p>MacOS下载链接(无需翻墙): <a href="https://ghproxy.com/https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-macos-amd64.dmg">https://ghproxy.com/https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-macos-amd64.dmg</a></p></li></ul><blockquote><p>点击上方的下载链接即可!</p></blockquote><p>前两个系统解压后双击运行<code>nekoray.exe(Windows)</code>&#x2F;<code>nekoray(Linux)</code>即可, 我没有苹果设备, 不知道怎么安装.</p><blockquote><p>Linux建议从终端使用<code>./nekoray -appdata</code>启动, 这样的话会将数据储存在<code>~/.config/nekoray</code>目录.</p></blockquote><p>运行后, 三个操作系统使用方法相同. 只是Mac似乎需要手动修改语言.</p><p>同样的, 首先, 我们需要复制一个Clash节点.</p><p>点击<code>左上首选项 &gt; 分组 &gt; 新建分组</code>, 并将类型改为<code>订阅</code></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212191952011.png"></p><p>在图片中红色圈圈的地方(<code>名称</code>)为这个分组起一个名, 在图片中蓝色圈圈的地方(<code>URL</code>)粘贴Clash订阅链接, 最后点击右下角<code>确定</code>或回车.</p><p>就像在安卓端一样, 保存分组后需要<code>更新订阅</code>, 只需点击刚刚添加的分组中<code>更新订阅</code>的按钮即可.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212191957566.png"></p><p>之后点击图片中红色圈圈的地方选择我们刚刚添加的分组, 并在下方随便右键一个节点, 然后选择<code>当前分组 &gt; Url Test</code>进行延迟测试.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212191959096.png"></p><p>测试后, 我们可以点击图片中蓝色圈圈的地方(<code>测试结果</code>), 这样就会将节点按照延迟进行排序了. 再点击一下则会反向排序.</p><p>接着, 我们点击<code>左上首选项 &gt; 基本设置</code>, 在<code>通用</code>中修改<code>Socks监听端口</code>为之前Clash使用的(或自己能记得住的), 修改后点击<code>确定</code>.</p><p>在系统设置中, 将代理地址设置为<code>127.0.0.1</code>, 端口设置为上面修改的那个. 如果不想系统代理, 可在各软件中进行设置(如果有的话).</p><p>比方说<code>Telegram</code>支持代理:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212192011501.png"></p><blockquote><p>测试延迟后设置代理这一步新手可能不明白. 没关系, 新手此时只需点击<code>最上方 &gt; 系统代理</code>即可.</p></blockquote><p>若要导入单个<code>vless</code>, <code>vmess</code>节点, 只需要复制节点, 点击<code>左上角程序 &gt; 从剪切板添加</code>即可.</p><blockquote><p>注意, 建议将单个节点保存在<code>默认</code>分组, 其他分组用来保存订阅. 一来美观清晰, 二来好清理与更新.</p></blockquote><p>最后, 我们点击那个延时最小的(也就是最上面的), 回车或<code>右键 &gt; 启动</code>进行启动!</p><p>同<code>茉莉</code>一样, 这里也只做最简单的使用说明. 可以自己摸索一下<code>首选项</code>中的功能.</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次Linux钉钉对syslog的异常写入行为</title>
    <link href="/erd/"/>
    <url>/erd/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h2><p>挺久之前, 我便发现了自己Ubuntu上的一个问题: <code>根目录</code>突然爆满!</p><p>扒拉一下后, 发现罪魁祸首文件是: <code>/var/log/syslog</code>. <code>syslog</code>, 应该是系统日志的意思.</p><blockquote><p>实在是太恐怖了, 我查看时, 根目录只剩下不到10个G了…</p></blockquote><p>于是急忙搜索了怎么处理这种情况. 发现不止是我, 也有别人遇到了<code>syslog</code>突然暴增的情况.</p><p>而处理方法是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##第一步, 切换到root用户</span></span><br><span class="line">su root</span><br><span class="line"><span class="comment">##第二步, 清空syslog</span></span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/syslog</span><br></pre></td></tr></table></figure><p>为什么不是<code>sudo echo &gt; /var/log/syslog</code>呢? 因为提示<code>权限不够</code>, 所以只能切换到root用户进行操作了.</p><blockquote><p>一开始我是直接想<code>rm -rf</code>的. 但是搜索到<code>rm -rf</code>并不能删除实际储存空间.</p></blockquote><p>当时因为第一次遇到这种情况, 就没想着找原因. 最后发现罪魁祸首应用是<code>钉钉</code>.</p><blockquote><p>这篇文章也不会研究为什么钉钉会有这个异常行为, 因为实力没达到🌚.</p></blockquote><h2 id="初发现"><a href="#初发现" class="headerlink" title="初发现"></a>初发现</h2><p>就在刚刚, 我的储存又一次激增.</p><p>这次我选择了打开<code>系统监视器</code>, 于是就看到了:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212151956761.png"></p><p>此时我正在使用<code>钉钉的视频会议</code>.</p><p>这次发现的比较及时, 所以又<code>echo</code>了一次. 但是就在写这篇文章的过程中, <code>syslog</code>又变得很大了:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212151957543.png"></p><p>以5Mb&#x2F;s的速度, 从未停止地写入文件. 期间CPU的使用率也很高…这一切, 都来自<code>钉钉的视频会议</code>.</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>于是我尝试查看钉钉在本地的<code>相关文件</code>.</p><p>很快找到了大概是应用程序的路径:</p><p><code>/opt/apps/com.alibabainc.dingtalk/files/1.4.0-Release.20909</code>.</p><blockquote><p>我的钉钉版本是1.4.0.</p></blockquote><p>在此文件夹下有一个<code>plugins</code>文件夹, 打开后发现<code>tblive(淘宝直播)</code>文件夹.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212152007779.png"></p><p>再打开是一个<code>data</code>文件夹, 进一步深入就是<code>conf_res</code>, <code>obs-studio</code>两个文件夹.</p><blockquote><p>等等, obs? 不过obs是一个开源项目, 使用obs也没有什么大惊小怪的了.</p></blockquote><p><code>obs-studio</code>目录有一些许可证和图标, css什么的. 也不知道视频会议是用了obs的前端还是后端. 总之是没有可执行文件的.</p><p><code>conf_res</code>目录也是一些图标, 以及钉钉视频会议的<code>虚拟背景</code></p><p>好的! 以我的能力最终没有发现什么东西!🌚</p><h2 id="再发现"><a href="#再发现" class="headerlink" title="再发现"></a>再发现</h2><p>次日, 使用视频会议时, 我专门查看了<code>系统监视器</code>, 没有看到异常现象.</p><p>不过那次视频会议有一个特点: 连续上了两节课.</p><p>或许时长过短这种情况就不会发生?🤔</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次Python 3.11.0的编译安装过程</title>
    <link href="/pys/"/>
    <url>/pys/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/2022-12-1-cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直觉得自己Ubuntu上的<code>Python3.x</code>版本较老, 于是今天心血来潮到<a href="https://python.org/">Python官网</a>看了一下最新的版本号.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011543042.png" alt="如图所示"></p><p>最新稳定版是<code>3.11.0</code>, 而我的是<code>3.10.6</code>, 也没有差几个版本.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011544829.png" alt="如图所示"></p><p>不过在我关闭网页之前, 打开了<code>3.11.0</code>版本的页面, 然后就看到了:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011547194.png" alt="如图所示"></p><p>快了10%~60%! 虽然我一直没真正体会到Python的运行效果到底有多慢, 不过这个数字还是很让人兴奋的!</p><p>所以尝试从源代码编译安装<code>Python 3.11.0</code>. 并且尽量不使用搜索引擎.</p><p>使用系统: <code>Ubuntu 22.04.1</code>.</p><blockquote><p>请务必先读全文再操作!</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.python.org/downloads/release/python-3110/">点击这里</a>到<code>3.11.0</code>版本的详情页面. <a href="https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz">点击这里</a>下载<code>3.11.0</code>版本的<code>*.tar.gz</code>压缩包.</p><p>下载到本地后右键解压即可.</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>进入到<code>Python-3.11.0</code>文件夹, 进行编译一个标准项目的第一步: <code>configure</code>(配置).</p><blockquote><p>这里谷歌了<code>configure</code>的中文意思, 记录一下.</p></blockquote><p>打开终端, 执行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011555171.png" alt="如图所示"></p><blockquote><p>md…居然一次性配置成功了…</p></blockquote><p>为什么会这么说呢? 理论上这一步是会出错的(如果电脑中安装的依赖足够多则可能不会, 一次性成功是运气好).</p><p>在编译过程中, 如果出现了如<code>xxx not found</code>的报错, 就可以使用<code>sudo apt install xxx</code>来尝试解决. 若提示<code>无法定位软件包</code>, 这时就要上谷歌搜索一下了.</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在上一步无误的情况下, 输入指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><blockquote><p>配置那步大概会花费半分钟时间, <code>make</code>需要更久.</p></blockquote><p>遇到了一个错误:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;encodings&#x27;</span></span><br><span class="line">Fatal Python error: error evaluating path</span><br><span class="line">Python runtime state: core initialized</span><br><span class="line"></span><br><span class="line">Current thread 0x00007fdb33ac2740 (most recent call first):</span><br><span class="line">  &lt;no Python frame&gt;</span><br><span class="line">make: *** [Makefile:1207：Python/frozen_modules/abc.h] 错误 1</span><br></pre></td></tr></table></figure><p><code>ModuleNotFoundError</code>是很常见的Python模块报错, 意为<code>没有安装此模块</code>, 所以使用:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install encodings</span><br></pre></td></tr></table></figure><p>再次报错:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement encodings (from versions: none)</span><br><span class="line">ERROR: No matching distribution found <span class="keyword">for</span> encodings</span><br></pre></td></tr></table></figure><p>看来是没有这个模块了.</p><p><strong>那么会不会是用户权限的问题呢?</strong> Python是Linux的基础软件包, 或许需要root权限?</p><p>以<code>sudo</code>再次运行<code>配置</code>和<code>make</code>, 依旧失败.</p><blockquote><p>于是谷歌了第二次. 嘿嘿.</p></blockquote><p>通过谷歌发现了cpython的 <a href="https://github.com/python/cpython/issues/94526">#94526</a>, 里面说是路径编码的问题.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011612887.png" alt="md, 确实是有中文路径了..."></p><p>换到一个新文件夹, 这次路径中没有中文了.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011613593.png" alt="如图所示"></p><p>那么这次, 以root身份再次执行上面的指令.</p><p>104秒, 编译成功!</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011617190.png" alt="如图所示"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>输入指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装成功!</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011618438.png" alt="如图所示"></p><p>查看Python版本:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>需要刷新一下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span> -r</span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011618390.png" alt="如图所示"></p><p>成功啦!</p><h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><p>当我尝试运行之前写过的Python程序时, 出现了缺少其他曾经安装过的依赖的报错.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011625557.png" alt="如图所示"></p><p>很容易联想到是因为root用户的原因. 于是使用普通用户编译. 不过尝试用普通用户安装时报错权限不够(这也是必然的).</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011629277.png" alt="如图所示"></p><p>但以root身份安装后, 依旧报错. <code>普通用户编译</code>+<code>root用户安装</code>的方法还是失败了:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011631736.png" alt="如图所示"></p><blockquote><p>实际上有一个方法, 就是以<code>sudo pip install xxx</code>的方式再次安装一遍依赖. 但是当曾经的依赖安装得很多的时候, 这个方法不是很合适.</p></blockquote><p>于是查看了模块的路径:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212011646564.png" alt="如图所示"></p><blockquote><p>模块可以通过<code>sys.path</code>查看.</p></blockquote><p>发现问题了! 原来是<strong>两者的模块所在的路径不同</strong>!</p><p>手动安装的<code>Python-3.11.0</code>的模块, 路径在<code>/usr/local/lib/python3.11/site-packages</code>.</p><p>而<code>通过apt安装</code>的模块, 路径却在<code>/usr/lib/python3/dist-packages</code></p><p>那么就可以执行指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/lib/python3/dist-packages/* /usr/local/lib/python3.11/site-packages</span><br></pre></td></tr></table></figure><p>将所有原本的模块创建软链接到新的模块目录即可. 但需要注意, 此后所有的模块都需要root权限安装, 否则会将模块安装到原来的目录.</p><p>例如, 你本来是通过<code>pip install requests</code>安装的第三方包, 现在需要通过<code>sudo pip install requests</code>安装.</p><p>尝试运行之前的程序, 成功!</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>重启电脑, 看看有没有什么问题.</p><blockquote><p>等我!</p></blockquote><p>重启完毕, 程序也运行正常!</p><p>那么总结一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0. 所有路径中不要有中文;</span><br><span class="line"></span><br><span class="line">1. 配置, 编译时, 无论是普通用户或是root用户都可;</span><br><span class="line"></span><br><span class="line">2. 第三方包通过`sudo ln -s /usr/lib/python3/dist-packages/* /usr/local/lib/python3.11/site-packages`迁移;</span><br><span class="line"></span><br><span class="line">3. 以后的第三方包通过`sudo pip install xxx`安装.</span><br></pre></td></tr></table></figure><p>即使<code>/usr/local/lib/</code>目录中有<code>python3.10/dist-packages</code>, 但不能在普通用户下被<code>import</code>使用.</p><blockquote><p>可以尝试, 在未手动编译安装此版本之前, 进行<code>sudo pip install xxx</code>, 会发现<code>xxx</code>被安装在<code>python3.10/dist-packages</code>, 而普通用户通过<code>pip install xxx</code>安装的<code>xxx</code>则在<code>/usr/lib/python3/dist-packages/</code>下.</p></blockquote><p>这一点, 有点像<code>npm</code>与<code>npm -g</code>(也有点区别…).</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精挑细选的20个Gnome插件合集</title>
    <link href="/gne/"/>
    <url>/gne/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20221115cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><p class="note note-primary">注意看标题, 是Gnome插件而不是Chrome插件!</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天又一次被强大的Gnome插件们所<code>震撼</code>了…</p><p>抱着<code>看起来好玩的都试试看</code>的想法, 我翻看了<a href="https://extensions.gnome.org/">Gnome插件官网</a>目前所有的插件(总共60页, 一页10个).</p><blockquote><p>当然, 我只详细看了实用和有意思的, 不过这也挺多的.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/FotoJet%20(1).jpg" alt="浏览器历史为证"></p><p>那么这篇文章将会分类向你介绍20个非常强大, 无危险, 美观的<code>Gnome插件</code>, 往下看吧!</p><blockquote><p>说危险是因为有一个插件安装完之后, (卸载后)给我整个桌面搞得面目全非, 也算是帮大家避坑了.</p></blockquote><h2 id="信息类"><a href="#信息类" class="headerlink" title="信息类"></a>信息类</h2><p>信息类的插件主要显示在<code>顶栏</code>的位置(即最上面<code>时间</code>所在的那一小条).</p><h3 id="天气预报"><a href="#天气预报" class="headerlink" title="天气预报"></a>天气预报</h3><p>插件名: <code>OpenWeather</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/750/openweather/">https://extensions.gnome.org/extension/750/openweather/</a></p><p>支持中文: 是</p><p>特点&#x2F;使用:</p><ol><li><p>位置可调, 可以显示在顶栏的左侧或者右侧;</p></li><li><p>美观;</p></li><li><p>信息量多.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151233546.png" alt="效果"></p><h3 id="设备情况"><a href="#设备情况" class="headerlink" title="设备情况"></a>设备情况</h3><p>插件名: <code>Vitals</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/1460/vitals/">https://extensions.gnome.org/extension/1460/vitals/</a></p><p>支持中文: 是</p><p>特点&#x2F;使用:</p><ol><li><p>实时显示网速, 内存, CPU, 温度, 风扇等信息;</p></li><li><p>信息量大;</p></li><li><p>相对美观.</p></li></ol><blockquote><p>设备信息类的插件我试了很多, 最终选择了这个, 因为这个插件提供的信息是最多的, 也是此类插件中最美观的一个.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151240630.png" alt="效果"></p><h3 id="应用菜单"><a href="#应用菜单" class="headerlink" title="应用菜单"></a>应用菜单</h3><p>插件名: <code>Applications Menu</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/6/applications-menu/">https://extensions.gnome.org/extension/6/applications-menu/</a></p><p>支持中文: 是</p><p>特点&#x2F;使用:</p><ol><li><p>按类别将安装的应用汇总到一起, 这个功能很多桌面系统都有, 似乎只有Ubuntu没有默认安装;</p></li><li><p>切换类别时无需点击, 分类会随鼠标焦点移动.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151244031.png" alt="效果"></p><h3 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h3><p>插件名: <code>Big Avatar</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/3488/big-avatar/">https://extensions.gnome.org/extension/3488/big-avatar/</a></p><p>支持中文: 否</p><p>特点&#x2F;使用: </p><ol><li><p>美观;</p></li><li><p>在右上角按钮组位置显示简单的个人信息(头像和用户名);</p></li><li><p>可设置点击效果.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151249473.png" alt="效果"></p><p>或</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151249858.png" alt="效果"></p><h3 id="应用描述"><a href="#应用描述" class="headerlink" title="应用描述"></a>应用描述</h3><p>插件名: <code>Applications Overview Tooltip</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/1071/applications-overview-tooltip/">https://extensions.gnome.org/extension/1071/applications-overview-tooltip/</a></p><p>支持中文: 按实际使用</p><p>特点&#x2F;使用: 在<code>选择应用</code>界面, 鼠标触碰应用图标时显示描述.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151253636.png" alt="效果"></p><h3 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏"></a>信息隐藏</h3><h4 id="活动隐藏"><a href="#活动隐藏" class="headerlink" title="活动隐藏"></a><code>活动</code>隐藏</h4><blockquote><p>就是顶栏左上角那个<code>活动</code>, 看着很碍眼.</p></blockquote><p>插件名: <code>Inactivity</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4818/inactivity/">https://extensions.gnome.org/extension/4818/inactivity/</a></p><p>支持中文: 无需</p><p>特点&#x2F;使用: 把顶栏左上角没啥用的<code>活动</code>隐藏.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151256743.png" alt="效果"></p><h4 id="顶栏隐藏"><a href="#顶栏隐藏" class="headerlink" title="顶栏隐藏"></a>顶栏隐藏</h4><p>插件名: <code>Hide Panel Lite</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4496/hide-panel-light-version-without-hot-corner/">https://extensions.gnome.org/extension/4496/hide-panel-light-version-without-hot-corner/</a></p><p>支持中文: 无需</p><p>特点&#x2F;使用: 顾名思义, 把整个顶栏隐藏.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151258938.png" alt="效果"></p><h4 id="顶栏应用隐藏"><a href="#顶栏应用隐藏" class="headerlink" title="顶栏应用隐藏"></a>顶栏应用隐藏</h4><p>插件名: <code>Remove App Menu</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/3906/remove-app-menu/">https://extensions.gnome.org/extension/3906/remove-app-menu/</a></p><p>支持中文: 无需</p><p>特点&#x2F;使用: 有时打开应用时, 顶栏左上角会显示, 比较影响前面几个信息类插件的效果.</p><p><img src="https://extensions.gnome.org/extension-data/screenshots/screenshot_3906.png" alt="效果"></p><h2 id="效果类"><a href="#效果类" class="headerlink" title="效果类"></a>效果类</h2><h3 id="窗口特效"><a href="#窗口特效" class="headerlink" title="窗口特效"></a>窗口特效</h3><p>插件名: <code>Burn My Windows</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4679/burn-my-windows/">https://extensions.gnome.org/extension/4679/burn-my-windows/</a></p><p>支持中文: 否</p><p>特点&#x2F;使用:</p><ol><li><p>可为开关窗口设置不同的特效;</p></li><li><p>特效可自定义.</p></li></ol><p><img src="https://extensions.gnome.org/extension-data/screenshots/screenshot_4679_trxaQGC.gif" alt="效果"></p><h3 id="美观输入法"><a href="#美观输入法" class="headerlink" title="美观输入法"></a>美观输入法</h3><p>插件名: <code>Input Method Panel</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/261/kimpanel/">https://extensions.gnome.org/extension/261/kimpanel/</a></p><p>支持中文: 是</p><p>特点&#x2F;使用: </p><ol><li><p>fcitx5可用;</p></li><li><p>跟随系统的黑暗模式.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151407516.png" alt="效果"></p><blockquote><p>ibus似乎无法使用.</p></blockquote><h3 id="顶栏之眼"><a href="#顶栏之眼" class="headerlink" title="顶栏之眼"></a>顶栏之眼</h3><blockquote><p>有点中二…</p></blockquote><p>插件名: <code>Glasa</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4780/glasa/">https://extensions.gnome.org/extension/4780/glasa/</a></p><p>支持中文: 否</p><p>特点&#x2F;使用: </p><ol><li><p>眼睛会跟随鼠标移动;</p></li><li><p>可设置在顶栏的位置.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151410408.png" alt="效果"></p><h3 id="圆滑按钮"><a href="#圆滑按钮" class="headerlink" title="圆滑按钮"></a>圆滑按钮</h3><p>插件名: <code>Rounded System Menu Buttons</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4693/rounded-system-menu-buttons/">https://extensions.gnome.org/extension/4693/rounded-system-menu-buttons/</a></p><p>支持中文: 否</p><p>特点&#x2F;使用:</p><ol><li><p>将右上角按钮组中的关机等按钮换为圆形;</p></li><li><p>可移除或改变按钮颜色.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151415056.png" alt="效果, 右上角弹窗最下面四个圆按钮"></p><h3 id="圆滑窗口"><a href="#圆滑窗口" class="headerlink" title="圆滑窗口"></a>圆滑窗口</h3><p>插件名: <code>Rounded Window Corners</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/5237/rounded-window-corners/">https://extensions.gnome.org/extension/5237/rounded-window-corners/</a></p><p>支持中文: 是</p><p>特点&#x2F;使用: </p><ol><li><p>将有些应用原本方方正正的角变得更圆滑(像win11那样);</p></li><li><p>自定义度高.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151420946.png" alt="效果"></p><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="鼠标工具箱"><a href="#鼠标工具箱" class="headerlink" title="鼠标工具箱"></a>鼠标工具箱</h3><p>插件名: <code>Fly-Pie</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/3433/fly-pie/">https://extensions.gnome.org/extension/3433/fly-pie/</a></p><p>支持中文: 否</p><p>特点&#x2F;使用:</p><ol><li><p>有成就机制(虽然没什么用);</p></li><li><p>自定义度超高.</p></li></ol><p><img src="https://extensions.gnome.org/extension-data/screenshots/screenshot_3433.gif" alt="效果"></p><p>或</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151303877.png" alt="设置界面"></p><h3 id="屏幕画图"><a href="#屏幕画图" class="headerlink" title="屏幕画图"></a>屏幕画图</h3><p>插件名: <code>Draw On Your Screen 2</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4937/draw-on-you-screen-2/">https://extensions.gnome.org/extension/4937/draw-on-you-screen-2/</a></p><p>支持中文: 部分</p><p>特点&#x2F;使用:</p><ol><li><p>支持颜色, 很多图形, 甚至插图;</p></li><li><p>支持保存, 导出;</p></li><li><p>画图是实时的.</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151313161.png" alt="效果"></p><h3 id="焦点转移"><a href="#焦点转移" class="headerlink" title="焦点转移"></a>焦点转移</h3><p>插件名: <code>Focus changer</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4627/focus-changer/">https://extensions.gnome.org/extension/4627/focus-changer/</a></p><p>支持中文: 否</p><p>特点&#x2F;使用: 使用键盘快捷键切换屏幕焦点.</p><blockquote><p>举个例子, 屏幕左边是钉钉, 右边是Telegram, 只需要快捷键就能在两个窗口之间切换焦点聊天, 而无需鼠标点击窗口, 键盘爱好者务必一试.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151317964.png" alt="设置界面"></p><h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><p>插件名: <code>Simple Timer</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/5115/simple-timer/">https://extensions.gnome.org/extension/5115/simple-timer/</a></p><p>支持中文: 否</p><p>特点&#x2F;使用: 在顶栏右边显示闹钟按钮以设置倒计时, 时间到了会发出<code>嘚嘚嘚</code>的声音.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151341454.png" alt="效果"></p><h3 id="音量控制"><a href="#音量控制" class="headerlink" title="音量控制"></a>音量控制</h3><p>插件名: <code>Application Volume Mixer</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/3499/application-volume-mixer/">https://extensions.gnome.org/extension/3499/application-volume-mixer/</a></p><p>支持中文: 无需</p><p>特点&#x2F;使用: 在右上角按钮组中加入不同应用的音量控制.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151404725.png" alt="效果"></p><h3 id="音量调节"><a href="#音量调节" class="headerlink" title="音量调节"></a>音量调节</h3><p>插件名: <code>Volume Scroller</code></p><p>链接地址: <a href="https://extensions.gnome.org/extension/4109/volume-scroller/">https://extensions.gnome.org/extension/4109/volume-scroller/</a></p><p>支持中文: 无需</p><p>特点&#x2F;使用: 当鼠标在顶栏时, 可使用滚轮控制全局音量大小.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211151428110.png" alt="效果"></p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>翻插件的时候, 看到了一个<code>Material Shell</code>.</p><blockquote><p>Material是一种风格, 我挺喜欢.</p></blockquote><iframe width="754" height="447" src="https://www.youtube.com/embed/Wc5mbuKrGDE" title="Material Shell - A new desktop interface for Linux" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>这个效果从视频看来也不错.</p><p>只不过实际安装之后发现效果不好, 于是我便把它卸载了.</p><p>但是这个插件和其他插件不一样的地方是:</p><p><strong>它修改了我系统的一些东西!</strong></p><p>比如说:</p><ol><li>修改了我的窗口样式, 把最小化和窗口化给关了;</li><li>让我的桌面不显示任何东西.</li></ol><p>后来一看评论区才发现大家都在喷这个问题…</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给Chrome设置代理的方法</title>
    <link href="/cpl/"/>
    <url>/cpl/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20221109.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>应一位好群友的求助, 这篇文章将会向大家介绍<code>如何设置Chrome的代理</code>.</p><blockquote><p>我的电脑系统是Ubuntu, 本文会介绍<code>系统代理</code>和<code>扩展</code>两种方法, 其中<code>系统代理</code>方法只适用于<code>Gnome桌面</code>的<code>Linux系统</code>.</p></blockquote><h2 id="系统代理"><a href="#系统代理" class="headerlink" title="系统代理"></a>系统代理</h2><p>想让<code>Chrome</code>走代理, 最简单的方法就是设置<code>系统代理</code>了.</p><p>因为<code>Chrome</code>也是系统安装的千千万万软件中的一个, 所以设置系统代理后Chrome自然也会走代理啦!</p><p>我们只需打开<code>设置</code>&gt;&gt;<code>网络</code>&gt;&gt;<code>网络代理</code>即可:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211091950395.png" alt="如图所示"></p><p>我使用的代理软件是<code>Clash For Windows</code>, 只需将上图中的端口号换为下图中红圈圈的地方即可.</p><blockquote><p>端口号是那个<code>7890</code>!</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211091951547.png" alt="如图所示"></p><p>再次打开Chrome, 就可以正常访问网站啦!</p><blockquote><p><a href="https://youtube.com/">测试一下!</a></p></blockquote><h2 id="扩展代理"><a href="#扩展代理" class="headerlink" title="扩展代理"></a>扩展代理</h2><p>尽管<code>系统代理</code>设置起来很方便, 但有时候也会带来一些困扰:</p><p>例如国内一些网站或软件是反向墙的, 我记得之前有一次使用Gitee时, 就遇到了<code>所在位置不允许访问</code>的情况(当时我使用的是全局+系统代理, 也就是clash里的<code>global</code>和设置里的<code>网络代理</code>, 打开后会让一切流量都走代理).</p><p>以及<code>Bilibili的视频可能无法播放</code>的情况(在上述条件下).</p><blockquote><p>所以一些身处国外的华人才会找国内的节点, 从而访问一些国内网站. <a href="https://www.91ai.net/thread-401250-1-1.html">一个关于反向墙的实例</a>.</p></blockquote><p>那么此时我们便可以使用一个浏览器扩展: <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega</a>.</p><blockquote><p>4.9星好评的扩展!</p></blockquote><p>首先, <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">点击此处安装</a>.</p><p>安装过后, 进入这个扩展的选项:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211092004706.png" alt="如图所示"></p><p>点击<code>左边侧边栏</code>的<code>情景模式</code>中的<code>新建情景模式</code>, 起一个好听的名字, 选择<code>代理服务器</code>, 之后弹窗的右下角<code>创建</code>即可.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211092005815.png" alt="如图所示"></p><p><code>开箱即用</code>的配置:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211092007850.png" alt="如图所示"></p><p>其中, <code>代理端口</code>还是你的代理软件的端口, 代理服务器填写<code>127.0.0.1</code>, 代理协议选择<code>socks5</code>.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211092009228.png" alt="为什么选择socks5"></p><p>比较<code>高级一点</code>的配置:</p><p>点击<code>左边侧边栏</code>的<code>情景模式</code>中的<code>auto switch</code>,这个模式是非常强大的, 能够彻底解决一些国内网站<code>代理冲突</code>的问题.</p><p>比方说, 新建一个条件, 屏蔽<code>Bilibili</code>的代理:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211092015345.png" alt="如图所示"></p><p>此时<code>www.bilibili.com</code>下的所有网页都会走<code>直接连接</code>啦!</p><blockquote><p>注意, 这个<code>直接连接</code>是你的<code>系统网络</code>, 如果开了<code>系统代理</code>, 那这个<code>直接连接</code>实际上还是走了代理的.</p></blockquote><blockquote><p><a href="https://youtube.com/">测试一下!</a></p></blockquote><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>有时候, 我们想让终端下载东西时也走代理, 但是这个时候又<code>没有打开</code>系统代理.</p><p>那么可以点击<code>Clash For Windows</code>里的这个<code>终端</code>标志:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211092020591.png" alt="如图所示"></p><p>复制弹出的小窗里的指令, 粘贴到终端并回车.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211092022019.png" alt="如图所示"></p><p>如果觉得每次都要输这个指令很麻烦, 可以编辑一下你的<code>.xshrc</code>文件, 在最后一行添加这一句.</p><blockquote><p>如果使用的是<code>bash</code>, 那这个文件就是<code>.bashrc</code>, 使用<code>zsh</code>则编辑<code>.zshrc</code>, 文件位置在<code>/home/用户名</code>, 也就是<code>文件管理器</code>里的<code>主目录</code>.</p></blockquote><blockquote><p>不过有时候发现这个好像没用?…</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol start="0"><li><p><code>系统代理</code>&gt;<code>扩展代理</code>(指<code>作用范围</code>);</p></li><li><p>所有的<code>端口</code>填写的都是<code>代理软件</code>里的<code>端口</code>;</p></li><li><p>把这一切比作<code>函数</code>的话, 代理软件提供的就是<code>自变量</code>, 各种<code>代理设置</code>(系统&#x2F;扩展)就是定义域, 最后的<code>结果</code>就是值域啦!</p></li></ol><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下电子书与电视的解决方案</title>
    <link href="/ral/"/>
    <url>/ral/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/2022115.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>几个月前将电脑系统换为<code>Ubuntu</code>后, 我从没想到过<code>Linux</code>能带给我<code>比Windows更多</code>的乐趣.</p><blockquote><p>尽管<code>没有</code>经济基础, 上层建筑还是<code>要有</code>的.</p><p>—-听话的便当</p></blockquote><p>秉持着这个<code>理念</code>, 我发现了不少<code>实用</code>, <code>美观</code>, <code>工具类</code>, <code>娱乐类</code>的软件!</p><p>历经<code>摸爬滚打</code>与各种<code>踩坑</code>, 本文就来给大家推荐<code>Debian系</code>上<code>电子书</code>和<a href="https://zh.wikipedia.org/zh-cn/IPTV"><code>电视(IPTV)</code></a>方面, <code>美观</code>又<code>好用</code>还有<code>中文</code>的软件各一个!</p><blockquote><p>其他发行版可通过源码编译安装, 这两个软件都是开源的.</p></blockquote><h2 id="电子书-Foliate"><a href="#电子书-Foliate" class="headerlink" title="电子书@Foliate"></a>电子书@Foliate</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol start="0"><li><p><code>GTK风格</code>的界面;</p></li><li><p>支持<code>EPUB</code>, <code>Kindle</code>等格式;</p></li><li><p>自定义度<code>高</code>;</p></li><li><p>支持<code>书签</code>, <code>笔记</code>, <code>翻译</code>(调用<code>谷歌翻译</code>)和<code>Wiki</code>(维基百科);</p></li><li><p>支持<code>网络书源</code>;</p></li><li><p>可<code>人声朗读</code>;</p></li><li><p>…</p></li></ol><h3 id="应用内截图"><a href="#应用内截图" class="headerlink" title="应用内截图"></a>应用内截图</h3><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051158300.png" alt="首页"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051200098.png" alt="阅读页"></p><blockquote><p>可设置<code>自动隐藏</code>顶栏和底栏, 可设置背景色或自定义, 可以用<code>滚轮或键盘</code>翻页, 或者<code>拖拉底栏</code>快速定位:</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051203101.png" alt="如图所示"></p><blockquote><p>当然了, 章节功能也是必不可少的:</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051204762.png" alt="如图所示, 章节也可以固定在左侧"></p><blockquote><p><code>图片显示</code>与<code>选中文本</code>时:</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051212261.png" alt="如图所示"></p><blockquote><p>网络书源:</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051215510.png" alt="如图所示"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>官方网站</code> &gt;&gt; <a href="https://johnfactotum.github.io/foliate/">https://johnfactotum.github.io/foliate/</a></p><p>deb安装包<code>直链</code> &gt;&gt; <a href="https://github.com/johnfactotum/foliate/releases/download/2.6.4/com.github.johnfactotum.foliate_2.6.4_all.deb">https://github.com/johnfactotum/foliate/releases/download/2.6.4/com.github.johnfactotum.foliate_2.6.4_all.deb</a></p><p>下载后, 在所在文件夹打开终端, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i com.github.johnfactotum.foliate_2.6.4_all.deb</span><br></pre></td></tr></table></figure><p>即可安装!</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这里说明一下<code>朗读功能</code>怎么用.</p><p>先看看效果再决定要不要用:</p><video controls="" preload="meta" width="838" height="400">      <source src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/2022-11-05_12-49-25.mp4" type="video/mp4"></video><br><blockquote><p>真的非常难听啊…</p></blockquote><p>那么要使用这个功能, 需要先安装<code>espeak</code>这个<code>tts引擎</code>.</p><blockquote><p>其他的我也没发现…有几个python的项目口碑不错, 但都是<code>需要训练</code>的模型.</p></blockquote><p>打开终端, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install espeak -y</span><br></pre></td></tr></table></figure><p>安装后, 打开<code>Foliate(我们的电子书软件)</code>, 在右上角<code>三道杠</code>处选择<code>偏好设置</code>, 往下翻动找到<code>文字转语音命令</code>, 在此处填写:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">espeak -vzh </span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051301057.png" alt="如图所示"></p><p>之后就可以在阅读过程中使用<code>朗读功能</code>啦!</p><blockquote><p>当然, 如果你有更好的<code>本地中文tts软件</code>, 也可以将此处的指令改为更好的那个.</p></blockquote><h2 id="电视-Hypnotix"><a href="#电视-Hypnotix" class="headerlink" title="电视@Hypnotix"></a>电视@Hypnotix</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ol start="0"><li><p><code>本地</code>和<code>网络</code>m3u源添加;</p></li><li><p><code>直播</code>流;</p></li><li><p><code>内置</code>了一份电视源;</p></li><li><p><code>GTK风格</code>的界面;</p></li><li><p>…</p></li></ol><h3 id="应用内截图-1"><a href="#应用内截图-1" class="headerlink" title="应用内截图"></a>应用内截图</h3><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051610107.png" alt="首页"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051609728.png" alt="播放界面"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051640824.png" alt="播放界面"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051610006.png" alt="设置页"></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><code>官方Github</code> &gt;&gt; <a href="https://github.com/linuxmint/hypnotix">https://github.com/linuxmint/hypnotix</a></p><p>deb压缩包<code>直链</code> &gt;&gt; <a href="https://github.com/linuxmint/hypnotix/releases/download/master.mint21/packages.tar.gz">https://github.com/linuxmint/hypnotix/releases/download/master.mint21/packages.tar.gz</a></p><blockquote><p>是一个压缩包, 解压之后有一个文件夹, 文件夹内有一个deb包…</p></blockquote><p>安装过程中可能会出现<code>gir1.2-xapp-1.0xxxxxx</code>这个依赖的缺失, 其他的依赖可以通过<code>sudo apt -f install</code>指令解决.</p><blockquote><p>不行的话还请各位读者自己谷歌了…</p></blockquote><p>这个依赖的<code>直链</code> &gt;&gt; <a href="http://archive.ubuntu.com/ubuntu/pool/universe/x/xapp/gir1.2-xapp-1.0_2.2.8-1_amd64.deb">http://archive.ubuntu.com/ubuntu/pool/universe/x/xapp/gir1.2-xapp-1.0_2.2.8-1_amd64.deb</a></p><blockquote><p>我这一看, 它也在apt source里啊…</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>如果要使用<code>Hypnotix</code>, <code>不能</code>直接双击软件图标使用(<code>Ubuntu用户</code>刚下载没设置后).</p><p>因为官方告诉我们:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051612253.png" alt="如图所示"></p><blockquote><p>Ubuntu自<code>21.04</code>起, 默认使用的<code>桌面显示服务器</code>正是<code>Wayland</code>.</p><p>不过我也不知道开发者是怎么回事, 标题写的是<code>Wayland</code>, 而设置内容却是<code>x11</code>…</p></blockquote><p>直接打开是<code>无法正常播放</code>的.</p><p>不过我们可以从终端启动:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GDK_BACKEND=x11 hypnotix</span><br></pre></td></tr></table></figure><p>如果觉得麻烦, 可以在自己的<code>.zshrc</code>(或<code>.bashrc</code>)里加上一行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> tv=<span class="string">&quot;GDK_BACKEND=x11 hypnotix&quot;</span></span><br></pre></td></tr></table></figure><p>以后就可以用<code>tv</code>这个指令启动啦!</p><p>启动后, 需要点击<code>右上角齿轮</code>&#x2F;<code>回放</code>, 在此处填写<code>vo=x11</code>.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202211051610006.png" alt="如图所示"></p><p><code>Hypnotix</code>本身带了一份电视源, 可以用这个测试一下是否可以正常使用.</p><p>添加直播源只需点击<code>右上角</code>齿轮旁边的<code>小方框</code>.</p><h3 id="直播源"><a href="#直播源" class="headerlink" title="直播源"></a>直播源</h3><p>这里我也提供几个<code>可用的</code>直播源:</p><p>音乐类(全是各国的音乐频道)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://iptv-org.github.io/iptv/categories/music.m3u</span><br></pre></td></tr></table></figure><p>电影类(全是各国的电影频道)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://iptv-org.github.io/iptv/categories/movies.m3u</span><br></pre></td></tr></table></figure><p>国内类(各央视卫视台, 很nb)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/cai23511/yex/master/TVlist/20210808384.m3u</span><br></pre></td></tr></table></figure><p>杂类(一些央视台视等, 有点拉)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://iptv-org.github.io/iptv/languages/zho.m3u</span><br></pre></td></tr></table></figure><hr><p>欢迎大家在评论区分享<code>本地中文tts软件</code>或<code>自己测试过可用的直播源</code>!</p><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oh My Zsh玩法</title>
    <link href="/omz/"/>
    <url>/omz/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/10-8-2cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>几天前从<code>bash</code>换到了<code>zsh</code>.</p><blockquote><p>不知道这两个东西是什么的读者朋友,这里有一篇文章说得很好,可以看看 &gt;&gt; <a href="https://zhuanlan.zhihu.com/p/34197680">https://zhuanlan.zhihu.com/p/34197680</a></p></blockquote><blockquote><p>简言之,<code>zsh</code>是一个shell解释器,相当于翻译.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210181919155.png" alt="如图,是我现在的终端"></p><p>如果你也是一个Linux终端爱好者,并且想要其更美观&#x2F;功能性更强,不妨继续读下去吧!</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>看过前言,你可能会疑惑:</p><p>我的标题不是<code>Oh My Zsh</code>吗,跟这个<code>zsh</code>有什么关系?</p><p>实际上是因为<code>zsh</code>的配置较为复杂,而同时<code>Oh My Zsh</code>这个东西就像是一个插件市场一样,让<code>zsh</code>可以更方便地扩展与美化.</p><p>因此,<code>zsh</code>是爸爸,我们要先安装<code>zsh</code>.</p><p><code>zsh</code>可以通过包管理器进行安装,这点在Termux里也是可以实现的.</p><p>只需打开终端,输入(这里以Ubuntu为例):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh -y</span><br></pre></td></tr></table></figure><p>随后安装<code>Oh My Zsh</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>执行此指令时,需要有<code>wget</code>,如果没有,直接输入<code>sudo apt install wget -y</code>即可.</p></blockquote><p>安装完成后,会出现一个大大的超炫酷的终端界面:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210181929144.png" alt="如图所示"></p><p>随后再输入此指令,将默认使用的sh切换为<code>zsh</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh</span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210181932741.png" alt="如图所示"></p><p>输入路径为<code>/usr/bin/zsh</code>.</p><p>那么怎么查看自己安装了多少shell呢,可以输入这个指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210181934418.png" alt="如图所示"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>zsh</code>和<code>bash</code>有点像的地方是<code>都会在打开终端时加载.xxxrc的内容</code>.</p><blockquote><p>这个xxx是bash或zsh.</p></blockquote><p>所以我们输入这个指令来编辑zsh的配置文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano .zshrc</span><br></pre></td></tr></table></figure><blockquote><p>此时你应该在刚打开终端时的根目录,如<code>/home/user</code>.</p></blockquote><blockquote><p>实际上安装<code>Oh My Zsh</code>时,它就自动地把<code>zsh</code>的配置文件用<code>Oh My Zsh</code>替代了.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210181946702.png" alt="如图所示"></p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>在第十一行的地方出现了一个<code>ZSH_THEME</code>,后面双引号内的名称就是主题文件的名字.</p><blockquote><p><code>Oh My Zsh</code>安装的时候自带了很多主题,它们在<code>/home/thdbd/.oh-my-zsh/themes</code>这个目录,同时也可以在GitHub上查看预览 &gt;&gt; <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a>.</p></blockquote><p>前言时展示的那个照片,是我根据kiwi主题进行二改的,欢迎大家使用!</p><p>我的主题使用方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .oh-my-zsh/themes &amp;&amp; wget https://gist.githubusercontent.com/wzk0/f5f4b56a01a424734649cd25bcc5bbe5/raw/948621d86f519c31554f818bb513ddccfa96301f/thdbd.zsh-theme</span><br></pre></td></tr></table></figure><p>然后将<code>.zshrc</code>中<code>ZSH_THEME</code>的参数改为<code>thdbd</code>.</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><code>Oh My Zsh</code>的超强之处就是插件,比如说:</p><p><a href="https://user-images.githubusercontent.com/89891126/196423185-e8b46491-8b35-4c2c-883e-f5b71d1aa18a.webm">st插件,可以直接用sublime text打开指定文件</a></p><p>或者灰色预览补全(这个有点像Kali的终端):</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210182000768.png" alt="如图所示"></p><p>或者自动检查指令是否有错:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210182000546.png" alt="出错了,变红了"></p><p>或者终端就能进行搜索的插件:</p><p><a href="https://user-images.githubusercontent.com/89891126/196424046-84e9fb57-5b38-4020-9e5d-189b2fd2fb91.webm">这里只有一个g,是因为我配置了</a></p><p>上面这几个插件都是<code>Oh My Zsh</code>的预装,我们只需要启用就好啦!</p><p>启用的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano .zshrc ##还是需要先编辑启动配置.</span><br></pre></td></tr></table></figure><p>在第73行,有一个<code>plugins</code>,只需在后面的括号内输入:</p><p><code>zsh-autosuggestions zsh-syntax-highlighting sublime web-search</code>就好啦!</p><blockquote><p>第一个为建议,第二个为纠错高亮,第三个是sublime text,第四个是搜索.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210182005520.png" alt="如图所示"></p><p>当然,插件很多,我就不一一赘述了.</p><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>在编写python代码的时候,我想调用<code>os.system()</code>函数执行<code>st</code>这个通过<code>Oh My Zsh</code>插件实现的指令,但是发现失败了.</p><p>随后发现,<code>st</code>是<code>subl</code>的一个重命名,所以真正的命令应该是<code>subl</code>而非<code>st</code>.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210182022805.png" alt="如图所示"></p><p>那么通过这一点,我们可以编辑<code>.zshrc</code>,在文末加上:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias g=&quot;google&quot;</span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210182013319.png" alt="如图所示"></p><p>这样就能实现通过<code>g xxx</code>直接用谷歌进行搜索啦!</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用钉钉机器人监控GitHub仓库的动态</title>
    <link href="/ddg/"/>
    <url>/ddg/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/10-13cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近因为疫情,又得在家里用钉钉上网课了.</p><p>无意间,我发现了钉钉群组可以添加机器人的功能:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210131917967.png" alt="如图所示"></p><blockquote><p>有一说一,这个官方提供机器人还算是挺丰富的.</p></blockquote><p>自然,我的注意力放在了<code>GitHub机器人</code>上.它的功能如下图所示:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210131918719.png" alt="如图所示"></p><p>虽然说我的这些项目都是自己一个人在做的小项目,但是能推送到钉钉群里,同学们看到就会觉得很有逼格(大概).</p><p>这种莫名其妙的虚荣心让我创建了一个三人小群,开始了对这个机器人的摸索.</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>首先应当添加这个机器人,并且复制添加后显示的webhook地址.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210131923214.png" alt="如图所示"></p><p>随后选择一个想要监控的GitHub仓库,按照下图所示的箭头方向,打开<code>Settings</code>的<code>Webhooks</code>一栏:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210131925210.png" alt="如图所示"></p><p>在<code>Add webhook</code>中,需要注意修改<code>Content type</code>为<code>application/json</code>.</p><blockquote><p>官方教程没说这一点,当时GitHub还不具有这个功能.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210131927517.png" alt="如图所示"></p><p>下面会向你提问<code>Which events would you like to trigger this webhook?</code></p><p>我选择的是第二项(监控<code>所有事件</code>),第一项是只监控<code>push</code>,第三项是<code>自定义</code>.</p><p><code>SSL verification</code>是<code>是否开启SSL验证</code>,我觉得没有必要,而且可能会有更多的问题产生,所以选择了<code>Disable</code>.</p><p>在这一切完成之后,只需要点击最下面的绿色按钮<code>Add webhook</code>就OK啦!</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210131935125.png" alt="如图所示"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202210131939388.png" alt="仓库"></p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费高速下载百度网盘文件的方法 | 第二弹</title>
    <link href="/bdn/"/>
    <url>/bdn/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/9-25cover0.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上上周的时候,舍友在睡前无意间对我说:</p><p>“诶,我有一个<strong>不需要SVIP</strong>就能快速下载百度网盘文件的方法.”</p><p>尽管是漆黑一片的宿舍,但听到这句话的我,双眼仍是射出了违和的耀眼光芒.</p><p>“怎么操作?!”</p><p>“@#$%^&amp;*…”</p><p>且听我为他转述——</p><blockquote><p>之前写的那篇关于百度网盘高速下载的方法已经不太行了…</p></blockquote><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>似乎是利用了百度网盘的一个小bug:</p><p><strong>预览</strong>.</p><p>没错!客户端会有在线预览功能,但是实际上会<code>先把这个文件下载到本地</code>以保证能稳定地预览.</p><p>因此,我们只需要让想下载的文件<code>变成可预览的</code>,随后预览的时候把文件移动出来就OK啦!</p><p>具体操作方法如下:</p><ol><li><p>把要下载的文件保存到自己的云盘;</p></li><li><p>长按这个文件(手机端),然后重命名,在文件最后加上<code>.apk</code>;</p></li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2022-09-25-13-49-42-65.jpg" alt="如图所示"></p><ol start="3"><li>确认重命名,然后点击文件就可开始预览(下载).</li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2022-09-25-13-50-48-50.jpg" alt="如图所示"></p><p>速度飞快!!!(取决于你的网速)</p><blockquote><p>关于可预览的文件格式,除了<code>apk</code>(Android软件安装包)以外,<code>docx</code>(document文件)也是可以的.这有点Windows的味道:以文件后缀名判断文件类型🌚🌚.</p></blockquote><p>预览完成后会弹出来窗口,问<code>使用什么软件打开</code>,直接关闭窗口就行.</p><p>然后打开<code>MT管理器</code>(或者手机系统自带的<code>文件管理</code>),</p><p>点击顶栏的路径进行跳转:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202209251356667.png" alt="如图所示"></p><p>跳转到:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/storage/emulated/0/Android/data/com.baidu.netdisk/cache/preview/BaiduNetdisk/</span><br></pre></td></tr></table></figure><p>这个路径即可.</p><p>刚刚下载的apk文件都在里面,重命名把<code>.apk</code>删去就行啦!</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202209251357732.png"></p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Free</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>libcrypto.so.1.1:cannot open shared object file的解决方案</title>
    <link href="/lib/"/>
    <url>/lib/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/9.25-cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天发现了一个不错的游戏,安装过程中出现了<code>error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file</code>的报错.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202209251321212.png" alt="如图所示"></p><p>尝试了第二个方法,无效;第一个方法还没尝试…</p><p>搜了一下,又试了几个无效的方法之后,摸索出了一个有效的.</p><blockquote><p>虽然是基于游戏报错处理,但可能是通用解?</p></blockquote><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>实际上这个报错就是字面意思所说的:找不到链接库<code>libcrypto.so.1.1</code>.</p><p>那么关键点就在于<code>怎么获取libcrypto.so.1.1</code>和<code>把libcrypto.so.1.1放在哪里</code>.</p><hr><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>首先我们需要在openssl的官网下载源码:</p><p>官网源码压缩包直链: <a href="https://www.openssl.org/source/openssl-1.1.1q.tar.gz">https://www.openssl.org/source/openssl-1.1.1q.tar.gz</a></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202209251314046.png" alt="解压"></p><p>解压之后在解压文件夹中打开终端,输入以下指令配置安装路径并编译安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./config shared --openssldir=/usr/local/openssl --prefix=/usr/local/openssl</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><blockquote><p>我没有测试,但是目录为<code>/usr/lib</code>应该也是可以的,因为我下载的这个游戏使用的是<code>/usr/lib</code>的链接库,所以编译安装完之后还需要手动将链接库文件复制到<code>/usr/lib</code>.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202209251315849.png" alt="完成"></p><p>可以看到,编译出了链接库文件<code>libcrypto.so.1.1</code>.</p><blockquote><p>同时,也得到了<code>libssl.so.1.1</code>,这两个东西像筷子一样不可或缺彼此.</p></blockquote><hr><h3 id="放置"><a href="#放置" class="headerlink" title="放置"></a>放置</h3><p>不知道是这个游戏独有或是什么,默认链接库路径是<code>/usr/lib</code>.</p><p>所以直接将<code>libcrypto.so.1.1</code>和<code>libssl.so.1.1</code>复制到此.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202209251320962.png" alt="如图所示"></p><p>接着再次运行游戏就不会有报错啦!</p><hr><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p>游戏: deltarune 三角符文 - <a href="https://www.linuxgame.cn/deltarune-%E4%B8%89%E8%A7%92%E7%AC%A6%E6%96%87">https://www.linuxgame.cn/deltarune-%E4%B8%89%E8%A7%92%E7%AC%A6%E6%96%87</a></p><blockquote><p>类型大概是像素风的RPG.</p></blockquote><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux下的视频创作解决方案</title>
    <link href="/lve/"/>
    <url>/lve/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/821-cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><blockquote><p>本篇文章提到的软件均为<code>开源&amp;免费</code>, 请放心使用.</p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近B站通过了我的创作激励申请(几天前),</p><p>然而我已经很久没发片了…</p><p>加上最近发现了一些<code>好东西</code>,</p><p>所以在开学前写这最后一篇跟<code>发片</code>有关的文章吧!</p><hr><h2 id="录制"><a href="#录制" class="headerlink" title="录制"></a>录制</h2><p>两个选择:</p><ol><li><p>著名的<code>OBS Studio</code>;</p></li><li><p>系统自带(我的是Gnome桌面).</p></li></ol><ul><li>系统自带的就不说了,问题(不算是个问题)是保存文件是<code>webm</code>格式,以及无法录制上声音.</li></ul><blockquote><p>如果你要选择系统自带的方式录屏,可以看看这篇文章 &gt;&gt; <a href="https://wzk0.github.io/ubw/">为Ubuntu编写一个录屏格式自动转换脚本及学习心路</a>.</p></blockquote><hr><p>如果要使用<code>OBS Studio</code>:</p><ul><li>对于Ubuntu用户,</li></ul><p>打开终端,输入以下指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:obsproject/obs-studio</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install obs-studio</span><br></pre></td></tr></table></figure><ul><li>对于其他发行版用户,可下载<code>flatpak</code>,</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo 包管理器 install flatpak</span><br><span class="line">flatpak install flathub com.obsproject.Studio</span><br></pre></td></tr></table></figure><p>关于<code>OBS</code>的使用(会用的话可以跳过):</p><p>首先,进入时会让你进行一些配置,选择就行;</p><p>接着,录屏的第一步是添加场景:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211641738.png" alt="点击左下角+号添加"></p><p>这里我们给这个场景起名<code>录屏</code>;</p><p>随后选中这个场景(单击),在右边的<code>来源</code>点击+号:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211644310.png" alt="点击此处即可开始录制整个屏幕"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211647320.png" alt="点击此处即可选中音频输入来源"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211647696.png" alt="选择添加现有,然后选中已经有的设备"></p><p>在配置好这一切之后,只需点击右下角的<code>开始录制</code>即可.</p><blockquote><p><code>场景</code>的作用就是如此,确认好一个完整的配置,方便特殊情况有特殊方式.</p></blockquote><blockquote><p>其他的软件我也试了不少,但都有录制不上声音的问题,不知道是不是我的配置问题.</p></blockquote><hr><h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>一个推荐:</p><p>Mixxx - 专业的混音软件.</p><blockquote><p>由于太专业,我现在也没太搞懂怎么玩🌚🌚…</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211654750.png" alt="界面"></p><p>有几个目前自己摸索出来的<del>使用方法</del>玩法:</p><p>首先,建议在顶栏的<code>选项/首选项</code>里设置主题为:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211655210.png" alt="如图所示"></p><blockquote><p>因为我发现这个主题的按键放置位置比较方便.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211659803.png" alt="如图所示"></p><p>红色圈起来的是四个音效(可能是叫音效)的对应地方(左上角开启之后,每个音效方可生效);</p><p>蓝色圈起来的是可选择音效的地方;</p><p>上方是控制台(像DJ一样,可以搓碟);</p><p>有<code>碟机</code>和<code>采样</code>两种容器,可以加载音频;</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211704049.png" alt="如图所示"></p><p>右上角的<code>REC</code>可以帮助我们录制片段(或全首);</p><blockquote><p>目前好像没有导出的方法,或者是我没找到.</p></blockquote><p>剩下的自己摸索吧!</p><p>安装方法(打开终端):</p><ul><li>Ubuntu用户:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:mixxx/mixxx</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install mixxx</span><br></pre></td></tr></table></figure><ul><li>Fedora用户:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm</span><br><span class="line">sudo dnf install mixxx</span><br></pre></td></tr></table></figure><ul><li>Arch用户:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mixxx</span><br></pre></td></tr></table></figure><hr><h2 id="剪辑"><a href="#剪辑" class="headerlink" title="剪辑"></a>剪辑</h2><p>推荐两个:</p><p>Kdenlive - 自由开源的免费视频编辑软件。简单易学，永久免费，用途不限。</p><blockquote><p>官方说法👆👆.</p></blockquote><p>不过我试了一下,除了有时候会崩溃(APPimage时)之外,还是很完美的.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211812031.png" alt="界面"></p><p>使用起来也比较方便,相当适合我这种不怎么剪辑的人用.</p><blockquote><p>提一嘴,导出视频的方法不是<code>文件/导出</code>,而是<code>项目/渲染</code>.</p></blockquote><p>安装方法(打开终端):</p><ul><li>发行版通用:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.kde.org/stable/kdenlive/22.04/linux/kdenlive-22.04.3-x86_x64.AppImage</span><br><span class="line"><span class="built_in">chmod</span> +x kdenlive-22.04.3-x86_x64.AppImage</span><br><span class="line">./kdenlive-22.04.3-x86_x64.AppImage</span><br></pre></td></tr></table></figure><ul><li>Ubuntu用户:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:kdenlive/kdenlive-stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install kdenlive</span><br></pre></td></tr></table></figure><blockquote><p>我发现安装Kdenlive之后,会自动捆绑安装<code>KDE Connect</code>,可以通过<code>sudo apt purge kdeconnect</code>删除.</p></blockquote><hr><p>如果你不想下载软件的话,可以尝试——</p><p><code>哔哩哔哩云剪辑</code></p><p><a href="https://member.bilibili.com/studio/bs-editor/">https://member.bilibili.com/studio/bs-editor/</a></p><p>(好像仅支持Chromium内核的浏览器)</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211845663.png" alt="界面"></p><p>操作起来也非常方便,而且有大量自带的效果&#x2F;转场等.</p><p>关键是不需要导出视频,编辑好后直接云上传到哔哩哔哩,或下载编辑好的视频文件上传到其他平台.</p><blockquote><p>下载的话,需要在这个页面 <a href="https://member.bilibili.com/studio/bs-editor/products">https://member.bilibili.com/studio/bs-editor/products</a> 点击视频旁边的<code>三个点</code>,选择<code>下载</code>.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208211848201.png" alt="如图所示"></p><hr><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><ul><li><p>OBS Studio官网 - <a href="https://obsproject.com/">https://obsproject.com</a></p></li><li><p>Mixxx官网 - <a href="https://mixxx.org/">https://mixxx.org</a></p></li><li><p>Kdenlive官网 - <a href="https://kdenlive.org/zh/">https://kdenlive.org/zh/</a></p></li></ul><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为Ubuntu编写一个录屏格式自动转换脚本及学习心路</title>
    <link href="/ubw/"/>
    <url>/ubw/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/ubw.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实本篇文章的大量内容都来自于<a href="https://github.com/wzk0/aw24">我最近的一个仓库</a>中的README.</p><p>不过由于README的字数远远大于代码量!!!</p><p>于是我决定引用一下,写到博客里.</p><p>同时也记录一些学习过程.</p><hr><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>如果你也使用Ubuntu系统(<code>Ubuntu 22.04.1 LTS</code>)的话,会发现:</p><p>尽管系统自带的录屏工具很好用,但是最后录制的格式却是普通人不太常用的<code>webm</code>.</p><p>碰巧最近又了解到了<code>ffmpeg</code>这个可以说是最强大的视频编辑工具(这个编辑并不是像PR那样的编辑,而是纯粹的,就像<code>GoldWave</code>编辑音频那样的编辑).</p><p>于是我就着手研究怎么用<code>ffmpeg</code><strong>实时地</strong>转换录屏文件格式.</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先检测到新增的webm文件,</p><blockquote><p>主要是检测的方法.</p></blockquote><p>接着调用ffmpeg转换webm文件,为mp4.</p><blockquote><p>重点在线程数的确定,以及可能存在的资源占用问题.</p></blockquote><p>最后删除webm文件.</p><hr><h2 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h2><p>刚开始我以为,在录屏过程中,录屏文件<code>最后所在的文件夹</code>(系统语言为中文时,即为”录屏”文件夹)会产生一些<code>中间文件</code>(这是必然的,只不过路径无法确定到底是不是在这个文件夹).</p><p>所以我便想了步骤一:</p><p class="note note-primary">实时监测文件夹是否新增含有某些特殊部分的文件(例如下载过程中经常出现的.part文件)是不是就行了?</p><p>然后我就录了个屏,同时检查着”录屏”文件夹的状态.</p><p>一开始啥也没看到,于是我在想,是不是文件以<code>.</code>开头了,自动隐藏了.</p><p>按了一下<code>Ctrl H</code>快捷键来显示隐藏文件,结果发现:</p><p>的确产生了中间文件,只不过这个<code>中间文件</code>的名字是录屏结束后完完整整的<code>文件名</code>!</p><p>一时间我感到很诧异:为什么不是<code>.</code>开头的文件也能隐藏起来?</p><blockquote><p>这个问题的答案我还是没有找到.</p></blockquote><p>那么通过步骤一是没法判断了:</p><p>原因是不知道这个webm文件<strong>是否已经完成录制</strong>?</p><p>接着我想到:</p><p class="note note-primary">可以利用文件大小是否变化来判断这个webm文件是否完成录制.</p><p>理论上说,这个方法是可行的,于是我开始找这个<code>大小变化</code>间的<code>最短时间差值</code>:</p><p>第一次发现3秒是一个合适的数字,但是就在刚刚再测试的时候,我又发现<code>当录制时间在20秒以上的时候,会可能起码有3秒时间段文件大小不发生变化</code>,后来我把3改成了5,再测试的时候就没有问题了.</p><p>这部分的代码实现可以是这样的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##l为webm文件的名称.</span></span><br><span class="line">info=os.stat(l)</span><br><span class="line"><span class="comment">##os.stat方法可以获得文件属性.</span></span><br><span class="line">s=info.st_size</span><br><span class="line"><span class="comment">##st_size类是文件大小.</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">##休眠5秒.</span></span><br><span class="line">inf=os.stat(l)</span><br><span class="line">ss=inf.st_size</span><br><span class="line"><span class="comment">##重复上面操作.</span></span><br><span class="line"><span class="keyword">if</span> ss==s:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment">##如果文件大小没有发生变化,说明录制已经结束.</span></span><br></pre></td></tr></table></figure><p>于是问题一解决.</p><p>但多次测试之后,我又发现了另一个问题:</p><p>转换的效率太低下,以及死循环导致的CPU占用过高.</p><p>第一个问题我通过<code>电脑的逻辑CPU核数为线程数</code>处理了,第二个问题可以通过<code>time</code>的<code>sleep</code>函数进行处理.</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208041549339.png" alt="原因是这个"></p><p>那么剩下的就是逻辑了,代码贴一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def get_good_name(name):</span><br><span class="line">name=name.replace(&#x27;(&#x27;,&#x27;\(&#x27;)</span><br><span class="line">name=name.replace(&#x27;)&#x27;,&#x27;\)&#x27;)</span><br><span class="line">name=name.replace(&#x27; &#x27;,&#x27;\ &#x27;)</span><br><span class="line">return name</span><br><span class="line"></span><br><span class="line">def get_core():</span><br><span class="line">os.system(&quot;cat /proc/cpuinfo |grep &#x27;processor&#x27;|wc -l &gt; .core&quot;)</span><br><span class="line">with open(&#x27;.core&#x27;,&#x27;r&#x27;)as f:</span><br><span class="line">core=f.read()</span><br><span class="line">os.system(&#x27;rm -rf .core&#x27;)</span><br><span class="line">return str(core[0])</span><br><span class="line"></span><br><span class="line">def chck(road,time_s):</span><br><span class="line">ls=os.listdir(road)</span><br><span class="line">if &#x27;.webm&#x27; in str(ls):</span><br><span class="line">for l in ls:</span><br><span class="line">if &#x27;.webm&#x27; in l:</span><br><span class="line">info=os.stat(l)</span><br><span class="line">s=info.st_size</span><br><span class="line">time.sleep(5)</span><br><span class="line">inf=os.stat(l)</span><br><span class="line">ss=inf.st_size</span><br><span class="line">if ss==s:</span><br><span class="line">t=&#x27;ffmpeg -threads &#x27;+get_core()+&#x27; -i &#x27;+get_good_name(l)+&#x27; &#x27;+get_good_name(l[:-4])+&#x27;mp4&#x27;</span><br><span class="line">r=&#x27;rm -rf &#x27;+get_good_name(l)</span><br><span class="line">n=&#x27;nohup.out&#x27;</span><br><span class="line">os.system(t)</span><br><span class="line">os.system(r)</span><br><span class="line">if os.path.exists(n):</span><br><span class="line">os.system(&#x27;rm -rf &#x27;+n)</span><br><span class="line">else:</span><br><span class="line">pass</span><br><span class="line">else:</span><br><span class="line">time.sleep(5)</span><br><span class="line">else:</span><br><span class="line">pass</span><br><span class="line">else:</span><br><span class="line">time.sleep(time_s)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">chck(&#x27;.&#x27;,300)</span><br></pre></td></tr></table></figure><p>其中,函数<code>get_good_name()</code>用来格式化名称(识别空格啥的);</p><p><code>get_core()</code>获取逻辑CPU核数;</p><blockquote><p>在这个期间创建了一个临时文件保存核数(cat输出到文件,再读取文件,然后删除).</p></blockquote><p><code>chck(road,time_s)</code>就是主函数了,<code>road</code>参数为<code>录屏文件夹路径</code>,<code>time_s</code>为休眠间隔.</p><p>在chck函数里,先判断整个文件夹是否有<code>webm文件</code>,没有的话直接进入周期为300秒的休眠(<code>if &#39;.webm&#39; in str(ls)</code>);</p><p>如果有webm文件,就从文件列表中遍历一下,筛选出来这些文件(<code>if &#39;.webm&#39; in l:</code>);</p><p>接着判断文件大小是否发生改变(<code>if ss==s:</code>):</p><p>如果改变了,就进行<code>ffmpeg转换</code>;</p><p>没有改变,则再进入周期为5秒的等待.</p><p>加入休眠机制后,CPU占用非常小(跟没有一样):</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208052107011.png" alt="如图所示"></p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p class="note note-primary">使用方法就是搬的README啦!</p><p>首先应该安装<code>ffmpeg</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ffmpeg -y</span><br></pre></td></tr></table></figure><p>接着下载脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/wzk0/aw24/main/webm2mp4.py</span><br></pre></td></tr></table></figure><p>随后将脚本移动到<code>/home/用户名/Videos/录屏</code>文件夹(其他语言的话名字会变)</p><p>接下来共有三个方法可以使用:</p><hr><h3 id="前台挂起"><a href="#前台挂起" class="headerlink" title="前台挂起"></a>前台挂起</h3><p>在<code>录屏文件所在文件夹</code>直接打开终端输入<code>python3 webm2mp4.py</code>即可,但是期间会输出大量文字,且终端基本上是<code>只读模式</code>,也无法关闭此终端.</p><p>不过好处是可以随时关闭.</p><hr><h3 id="后台挂起"><a href="#后台挂起" class="headerlink" title="后台挂起"></a>后台挂起</h3><p>在<code>录屏文件所在文件夹</code>打开终端输入<code>nohup python3 webm2mp4.py &amp;</code>,随后即可回车然后关闭此终端,或在此终端进行其他操作.</p><p>若要杀死此进程:</p><ul><li>假如此终端未关闭,输入<code>jobs -l</code>即可获取<code>PID</code>:</li></ul><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208032119834.png" alt="如图所示"></p><p>随后输入<code>kill -9 PID</code>即可:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208032120655.png" alt="如图所示"></p><ul><li>假如此终端已关闭,输入<code>ps ux | grep python3\ webm2mp4.py</code>可查看<code>PID</code>.</li></ul><p>同理,获取后输入<code>kill -9 PID</code>即可:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208032123589.png" alt="如图所示"></p><hr><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>打开<code>/etc/init.d</code>目录,在此编写一个脚本(<code>nano webm2mp4</code>):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">python3 /home/用户名/Videos/录屏/webm2mp4.py</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">nohup python3 /home/用户名/Videos/录屏/webm2mp4.py &amp;</span><br></pre></td></tr></table></figure><blockquote><p>记得替换<code>用户名</code>和自己的录屏文件夹的<code>名称</code>.</p></blockquote><p>不过我试了开机自启,好像不行,不知道是不是因为权限不够.</p><hr><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>“这是一个只有40行代码的小脚本,但是为什么偏偏是这个非常小代码量的项目要拿出来写文章呢?”</p><p>有些读者可能会这么想.</p><p>“你不会在冲KPI吧!”</p><blockquote><p>这不可能的!</p></blockquote><p>实际上,光是<code>线程数的判断</code>这个点我就搜了很久(最后是群里的一位大佬告诉的我,我想了一下也挺合理的).</p><p>其次就是整个的逻辑:</p><p>一开始我以为单纯的死循环就好,然后发现了CPU占用的问题,加入了休眠机制;但是休眠问题解决了,导致了我的另一个逻辑错误,就是检测时间,因为我把休眠这一项加到for循环里了,导致如果列表的第一位不是webm文件,就会进入休眠,这样一来,遍历列表的时间就会长得恐怖.</p><p>总之,为了这40行,我搜了很多,同时也有了一个观念,即:</p><p class="note note-warning">需要从用户层考虑问题!</p><p>想想之前自己的很多程序,对资源占用是从来没考虑的,唉…</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过Motrix和脚本高速下载百度网盘文件的方法</title>
    <link href="/bdc/"/>
    <url>/bdc/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/dbc-cover.png?raw=true">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="(https://wzk0.github.io/bk/">请看此文</a></p></blockquote><blockquote><p>这篇文章说明的方法似乎失效了…不过还有一个<a href="https://wzk.github.io/bdn">速度更快的,可用的方法</a>!</p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>百度网盘非会员用户的的垃圾下载机制大家也是有目共睹.</p><p>曾经在葫芦侠社区上发现过破解限速的安卓客户端,但是由于国内平台越来越严格的风控,这些帖子最后也都石沉大海了.</p><p>也搜索过大名鼎鼎的<code>KinhDown</code>,但是没想到也搞邀请码这一套了(不过你也可以选择捐赠,这样一来还不如买网盘会员呢).</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/Screenshot%20from%202022-08-03%2016-43-07.png" alt="如图所示"></p><p>那么还有什么比较好的办法呢?</p><p>接着往下读吧!</p><p class="note note-success">本篇只适合PC端的用户使用!</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要安装的东西有:</p><ol><li><a href="https://chrome.google.com/webstore/detail/tampermonkey-beta/gcalenpjmijncebpfijmoaglllgpjagf">Tampermonkey BETA</a></li></ol><blockquote><p>记得是beta版本的!不是beta版本不行!此链接为beta版的Chrome扩展商店链接.</p></blockquote><ol start="2"><li><a href="https://motrix.app/">Motrix</a></li></ol><ul><li><p>Windows下载直链: <a href="https://dl.motrix.app/release/Motrix-Setup-1.6.11.exe">https://dl.motrix.app/release/Motrix-Setup-1.6.11.exe</a></p></li><li><p>Linux下载直链: <a href="https://dl.motrix.app/release/Motrix-1.6.11.AppImage">https://dl.motrix.app/release/Motrix-1.6.11.AppImage</a></p></li><li><p>Mac下载直链: <a href="https://dl.motrix.app/release/Motrix-1.6.11.dmg">https://dl.motrix.app/release/Motrix-1.6.11.dmg</a></p></li></ul><blockquote><p><code>Motrix</code>是一款全能的下载工具,支持下载 HTTP、FTP、BT、磁力链接等资源.</p></blockquote><ol start="3"><li><a href="https://www.baiduyun.wiki/panlinker.user.js">脚本</a></li></ol><p>点击<a href="https://www.baiduyun.wiki/panlinker.user.js">脚本</a>即可直接安装.</p><blockquote><p>如果点击之后没有跳转到下图所示的页面,请先安装<code>Tampermonkey BETA</code>;若已安装,请试试重启浏览器或重新下载.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208031703081.png" alt="如图所示,安装即可"></p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先打开百度网盘网址登录自己的账号: <a href="https://pan.baidu.com/">https://pan.baidu.com/</a></p><p>随后打开一个自己想下载的文件页面(输入提取码后的):</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208031712863.png" alt="如图所示"></p><p>可以看到,在<code>保存到网盘</code>旁有一个下载助手,点击一下.</p><blockquote><p>第一次使用的时候会要求关注微信公众号.</p></blockquote><p>选择第三个<code>RPC下载</code>.</p><blockquote><p>记得打开Motrix!</p></blockquote><p>选择<code>推送到RPC下载器</code></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208031715108.png" alt="如图所示"></p><p>随后就可以享受免费的高速啦!</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202208031720340.png" alt="如图所示"></p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Free</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有关YouTube的全面解决方案</title>
    <link href="/ytb/"/>
    <url>/ytb/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/cover-ytb.png?raw=true">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>你是否因为YouTube的<code>无会员就无法后台或锁屏播放</code>但自己<del>是白嫖怪</del>不愿意付费而烦恼?</p></li><li><p>你是否因为YouTube的视频<code>无法下载</code>而烦恼?</p></li><li><p>你是否知道了一些YouTube视频的下载网站,但是<code>有限制</code>或<code>无法转换格式</code>或<code>无法下载整个频道或列表的视频</code>而烦恼?</p></li><li><p>….</p></li></ul><p><strong>所有问题</strong>都可以在本篇文章得以解决!</p><hr><h2 id="安卓端"><a href="#安卓端" class="headerlink" title="安卓端"></a>安卓端</h2><p>以下是<code>安卓端</code>的相关介绍.</p><hr><h3 id="Snaptube"><a href="#Snaptube" class="headerlink" title="Snaptube"></a>Snaptube</h3><blockquote><p>俗称黄油管.</p></blockquote><hr><h4 id="软件内截图"><a href="#软件内截图" class="headerlink" title="软件内截图"></a>软件内截图</h4><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/8-1-1.jpg?raw=true" alt="1"></p><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/8-1-2.jpg?raw=true" alt="2"></p><hr><h4 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h4><ol><li><p>登录账号;</p></li><li><p>后台播放,锁屏播放,悬浮窗播放;</p></li><li><p>下载(可选择格式);</p></li><li><p>暗夜模式;</p></li><li><p>跳过片头广告;</p></li><li><p>…</p></li></ol><hr><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li><p>有广告(不是视频前的,而是软件启动画面和内的);</p></li><li><p>不能看YouTube Shorts.</p></li></ol><hr><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>像其他安卓应用一样下载安装包并且点击安装即可.</p><hr><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><p>官网地址: <a href="https://www.snaptubeapp.com/zh/">https://www.snaptubeapp.com/zh/</a></p><p>软件直链: <a href="https://dl-master.snaptube.app/installer/snaptube/latest/Click_me_to_install_SnapTube_tube_homepage.apk">https://dl-master.snaptube.app/installer/snaptube/latest/Click_me_to_install_SnapTube_tube_homepage.apk</a></p><p>蓝奏云链接: <a href="https://wangzhuoke.lanzoul.com/ik2po08tpqhg">https://wangzhuoke.lanzoul.com/ik2po08tpqhg</a> (密码：666)</p><hr><h3 id="YouTube-Vanced"><a href="#YouTube-Vanced" class="headerlink" title="YouTube Vanced"></a>YouTube Vanced</h3><blockquote><p>俗称黑油管.</p></blockquote><hr><h4 id="应用内截图"><a href="#应用内截图" class="headerlink" title="应用内截图"></a>应用内截图</h4><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/yv8-1-2.jpg?raw=true" alt="1"></p><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/yv8-1-1.jpg?raw=true" alt="2"></p><blockquote><p>这个截图是<code>Vanced Manager</code>的,通过它安装的YouTube或YouTube Music跟原版的一样.</p></blockquote><hr><h4 id="支持功能-1"><a href="#支持功能-1" class="headerlink" title="支持功能"></a>支持功能</h4><ol><li><p>登录账号;</p></li><li><p>后台播放,锁屏播放;</p></li><li><p>暗夜模式;</p></li><li><p>跳过片头广告;</p></li><li><p>长得跟原版YouTube一样;</p></li><li><p>可以看YouTube Shorts;</p></li><li><p>…</p></li></ol><hr><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li><p>不能下载;</p></li><li><p>需要后台挂着,比较费电.</p></li></ol><hr><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><p>先下载安装官方提供的<code>Vanced Manager</code>(如上面的图片所示),随后从<code>Vanced Manager</code>内安装软件.</p><p>(如图二)先安装第三个<code>Vanced microG</code>(这个软件的功能可以让你挂上你的Google账号);</p><p>随后在系统设置内把<code>Vanced microG</code>的省电策略关闭(也就是让它能一直挂在后台),否则打开<code>YouTube Vanced</code>或者<code>YouTube Music Vanced</code>就可能会出现如下图所示的情况:</p><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/yv8-1-3.jpg?raw=true" alt="明明开着代理,却提示连接错误."></p><blockquote><p>(如果你不想把<code>Vanced microG</code>一直挂在后台,这种情况也好解决,那就是每次出现这样的情形时,都点击一下<code>Vanced microG</code>的软件图标将其短暂地挂起.)</p></blockquote><p>在安装完<code>Vanced microG</code>后,可以按自己的需求安装<code>YouTube Vanced</code>或<code>YouTube Music Vanced</code>.</p><hr><h4 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h4><p>官网地址: <a href="https://youtubevanced.com/">https://youtubevanced.com/</a></p><p>软件直链: <a href="https://youtubevanced.com/downloads/manager.apk">https://youtubevanced.com/downloads/manager.apk</a></p><p>蓝奏云链接: <a href="https://wangzhuoke.lanzoul.com/iT9mw08tupyh">https://wangzhuoke.lanzoul.com/iT9mw08tupyh</a> (密码：666)</p><hr><h2 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h2><p>以下是<code>浏览器端</code>的相关介绍.</p><hr><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul><li><a href="https://zh.loader.to/1/">https://zh.loader.to/1/</a></li></ul><blockquote><p>目前我觉得最强的一个,没有之一,可以选择指定格式下载.</p></blockquote><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/2022-08-01%2018.07.32%20zh.loader.to%201f9d535dd3ca.jpg?raw=true" alt="网站截图."></p><hr><ul><li><a href="https://www.clipconverter.cc/3/">https://www.clipconverter.cc/3/</a></li></ul><blockquote><p>相比较前者拉了很多,但是还勉强能用.</p></blockquote><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/2022-08-01%2018.13.08%20www.clipconverter.cc%201dacdc8c29d0.jpg?raw=true" alt="网站截图."></p><hr><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>只推荐一个,超级强大的<code>Enhancer for YouTube™</code>!</p><blockquote><p>支持跳广告,暗黑模式,调大音量,复读,循环…</p></blockquote><p>Chrome扩展商店地址: <a href="https://chrome.google.com/webstore/detail/enhancer-for-youtube/ponfpcnoihfmfllpaingbgckeeldkhle">https://chrome.google.com/webstore/detail/enhancer-for-youtube/ponfpcnoihfmfllpaingbgckeeldkhle</a></p><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/2022-08-01%2018.17.34%20ponfpcnoihfmfllpaingbgckeeldkhle%200874dc7841b9.jpg?raw=true" alt="扩展设置截图."></p><p><img src="https://ghproxy.com/https://github.com/wzk0/photo/blob/main/2022-08-01%2018.19.03%20www.youtube.com%20a29cd595d258.jpg?raw=true" alt="效果截图."></p><p>官方说法:</p><blockquote><p>海量自定义功能提升您的 YouTube 用户体验。<br>这款扩展软件为了让您最大限度地利用YouTube而设计，它拥有各种各样的功能，让您可以随心所欲地管理广告（跳过广告一直爽！），当你熟练操控鼠标时，可以神奇地控制播放速度和音量水平（好吧，几乎是这样，你还需要旋转鼠标滚轮，直到你成为真正的心灵感应者！），自动执行重复性任务，如一次又一次地选择适当的播放质量，配置几十个键盘快捷键，像专业人员一样控制YouTube（但最重要的是，你可以在机械式键盘上疯狂地敲键）。 )，自动完成重复性任务，比如一次又一次地选择合适的播放质量，配置几十个键盘快捷键，像专业人员一样控制YouTube(但最重要的是，在机械键盘上疯狂打字，享受那种让室友疯狂的咔嚓声)，等等……。快来试试吧! 但要知道，没有它，你将永远不会想使用YouTube ;)<br>由Mozilla荣誉推荐，这个扩展不收集数据，尊重用户的隐私。<br>YouTube是Google LLC的商标。使用该商标须经Google许可。</p></blockquote><p>笑死我了🌚🌚🌚.</p><hr><h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><p>Youtube就是一个网站, 怎么会有PC端的应用呢?</p><p>一开始我也是抱着这个认知, 直到遇到了<code>FreeTube</code>, 这个让我无法拒绝的<code>C/S应用</code>:</p><ol start="0"><li><p>支持下载;</p></li><li><p>无广告;</p></li><li><p>可以在不登陆的情况下进行订阅等操作;</p></li><li><p>开源, 全平台支持(PC端);</p></li><li><p>…</p></li></ol><blockquote><p>可以说, 这个是结合了上面所有的优点.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212091554931.png" alt="支持多种格式下载"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202212091555573.png" alt="和ytb非常相似的播放界面"></p><p>下载链接:</p><ul><li><p><a href="https://github.com/FreeTubeApp/FreeTube/releases/download/v0.18.0-beta/freetube-0.18.0-setup-x64.exe">Windows 64位</a></p></li><li><p><a href="https://github.com/FreeTubeApp/FreeTube/releases/download/v0.18.0-beta/freetube-0.18.0-mac-x64.dmg">Mac 64位</a></p></li><li><p><a href="https://github.com/FreeTubeApp/FreeTube/releases/download/v0.18.0-beta/FreeTube_0.18.0_amd64.AppImage">Linux AppImage</a></p></li></ul><p>相关链接:</p><ul><li><p><a href="https://freetubeapp.io/">官网链接</a></p></li><li><p><a href="https://github.com/FreeTubeApp/FreeTube">官方仓库</a></p></li></ul><blockquote><p>需要说明的是, 此客户端无法登陆, 但是可以通过导入的方式获取你在YouTube的信息.</p></blockquote><hr><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><p>以下是<code>终端</code>的相关介绍.</p><hr><h3 id="yt-dlp"><a href="#yt-dlp" class="headerlink" title="yt-dlp"></a>yt-dlp</h3><blockquote><p>开源的超级强大的YouTube下载器.</p></blockquote><p>仓库地址: <a href="https://github.com/yt-dlp/yt-dlp">https://github.com/yt-dlp/yt-dlp</a></p><p>实际上是<a href="https://github.com/ytdl-org/youtube-dl">youtube-dl</a>的一个分支,但是比它强大很多(下载速度上).</p><p>打开终端(Debian系),通过输入以下指令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install yt-dlp</span><br></pre></td></tr></table></figure><p>同时,如果你有<code>转换视频格式</code>的需求,还需要下载强大的<code>ffmpeg</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure><p>使用方法有下(参考<a href="https://blog.csdn.net/z_y_z_l/article/details/121015231">https://blog.csdn.net/z_y_z_l/article/details/121015231</a>):</p><ul><li>如果你只是想简单地下载一个<code>webm</code>格式的YouTube视频,可以直接使用指令:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp xxxx</span><br></pre></td></tr></table></figure><blockquote><p>这个xxxx指的是视频链接.</p></blockquote><ul><li>如果你想下载一个<code>mp4</code>格式的YouTube视频,可以使用指令:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -f mp4 xxxx</span><br></pre></td></tr></table></figure><p>然后就会下载下来一个名称为<code>[视频名称] [ID] [后缀名]</code>的文件.</p><p>如果你想下载音频,则需要携带参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -x --audio-format mp3 xxxx</span><br></pre></td></tr></table></figure><p>假如要下载最高画质和音质的视频,可以输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -f <span class="string">&quot;bv/b+ba/b&quot;</span> -f mp4 xxxx</span><br></pre></td></tr></table></figure><p>如果我们要指定命名格式,可以携带<code>-o</code>参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -f <span class="string">&quot;ba/b&quot;</span> -x --audio-format flac xxxx -o <span class="string">&quot;%(title)s.%(ext)s&quot;</span></span><br></pre></td></tr></table></figure><p>这样下载的结果就是<code>[标题] [后缀名]</code>.</p><p>我们可以从中总结出来几个点:</p><ul><li><p><code>-f</code>有转换视频格式的功能;</p></li><li><p><code>-x</code>有转换音频的功能,但是还需要携带参数<code>--audio-format</code>;</p></li><li><p><code>-f</code>后同时也可以加上视频或音频的质量;</p></li><li><p><code>/b</code>代表选择最高质量;</p></li><li><p><code>-o</code>代表重命名,参数格式可以改变.</p></li></ul><hr><h3 id="自制的"><a href="#自制的" class="headerlink" title="自制的"></a>自制的</h3><p>于是我也<code>基于ytb-dl</code>自制了一个!</p><blockquote><p>一个下载频道或列表所有<code>音频</code>的脚本.</p></blockquote><p>仓库地址: <a href="https://github.com/wzk0/ytb-dl">https://github.com/wzk0/ytb-dl</a></p><p>用法如下:</p><ol><li>安装yt-dlp:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install yt-dlp -y</span><br></pre></td></tr></table></figure><ol start="2"><li>安装beautifulsoup4,lxml:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><p>如视频所示:</p><p><a href="https://user-images.githubusercontent.com/89891126/180609679-82e1224d-29ba-485f-a87d-9cb3591a15d8.webm">先定位区块.</a></p><p>先通过F12定位到视频所在区块,接着直接复制HTML代码即可.</p><p><a href="https://user-images.githubusercontent.com/89891126/180609671-bd3a2c5a-2159-488e-8175-0a6e8a81c6c0.webm">接着粘贴下载.</a></p><p>随后粘贴进终端(通过nano写入的缓存文件),就可以开始下载频道的所有音频了!</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Free</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dream | 梦</title>
    <link href="/drm/"/>
    <url>/drm/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/724cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><p>​几年前曾经做过一个梦.内容是——</p><p>​一个大雨倾盆的日子，分不清是上午或是下午，总之天是灰蒙蒙的。我一个人走在街上，路中央的车来车往，且积了一层挺有深度的水。没有伞，也忘记了行走的缘由，但目的是明确的——回到距离这儿不算远的家。正当我走在路上时，身边驶过一辆三轮车，停在我前面十余步的路上。三轮车上跳下来一个打黑伞的中年男子，右手不知道拿着什么，是黑漆漆的一块。向我走来，并且问着“要不要送你回家？”梦里的我拒绝了他。不过他重复问我，一定要送我回家。我多次不同意后，他用右手里的刀向我刺了过来。这时，梦醒了。</p><p>​那段时间做梦的频率算是挺高的，但唯独这一个梦最清晰，记忆犹新。随着时间的推移，我差不多也快把“这个梦”忘记了（内容没忘，单纯指这个事）。可前段时间，又一个梦把我曾做的这个梦的记忆唤醒了。</p><p>​同样是一个大雨的日子，同样是回家，但街道变了——第一次时我是在大马路旁边的人行道上走着，这次是在小车道（只能塞来回两辆车）旁的树下走着。这时又是那辆三轮车，下来了身形声音都一样的人。同样地打着黑伞，握着黑色的刀，问我“要不要送你回家？”。但只问了一句，他的下一句令我十分惊悸——“我们俩是不是在哪见过？”接着再一次向我刺来。梦里的我感到十分害怕，本能地喊了一句“救命”，没想到已经在现实生活中喊了出来。</p><p>​不知道你曾经是否经历过这种梦，这种“做过几遍几乎的一样的，且梦中人主动向你说是不是在哪见过的梦”。我无法确认究竟是不是我的潜意识的所作所为——它“告诉”梦中的那个人“我们曾见过”，于是说了出来——实际上是因为我见过，间接地，梦中人也“知道”了这件事的存在。这似乎听起来有点违心——梦中的、基于潜意识创建的角色，在掌握了一定的信息量后，会做出出乎意料的事。事实是梦中的我们经常会碰见出乎意料的事，但通常主动的是我们，梦中人的行为可以算是我们疯狂的举动后正常的反应。于是这个梦让我更加地难以揣测与疑惑——我的行为算是再正常不过了，但梦中人做出了本应是我做的事。同时，我对梦也有了自己的一点看法。</p><p>​我们假定上面说到的那个违心结论是正确的。那么问题接踵而至：所有潜意识角色都会做出这种行为吗？这个信息量应是多少？以及这些信息是从何而来的？我没有做过任何实验，所以下面的内容基本上是胡诌了。</p><p>​想象一下，</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于博客的这一年</title>
    <link href="/say/"/>
    <url>/say/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/111.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于<strong>放暑假</strong>了!</p><p>距离博客的第一篇文章已经有<strong>一年多</strong>(零几天)的时间了.实际上如果算上更早期的文章,那么差不多有个一年半了.</p><p>真是转眼间啊!逝者如斯夫,不舍昼夜.</p><p>若不是今天有人在文章下评论,这个小博客似乎都快要被我忘却了.</p><p>近来发生了很多事,升入高三迎面而来的学习压力,以及自己很多时候的心有余而力不足(大多数是编程或是文章方面,大家也可以看到,我烂尾了很多文章,似乎再学不进去什么新东西了).</p><p>为此,我感到抱歉.</p><p>尤其是上周一位读者在Telegram上向我说道,”很喜欢你的博客”.每每想到这句话,再联想我写的许多含金量不高或是烂尾的文章,就使我有种强烈的负罪感.</p><p>对于我的博客来说,这算是”新的一年”.那么,<strong>就以新的面貌与展望开始吧!</strong></p><hr><h2 id="总结上一年"><a href="#总结上一年" class="headerlink" title="总结上一年"></a>总结上一年</h2><p>过去(便当元年)的文章列举一下,有这些(含本文):</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202207231811583.png" alt="一共是30篇"></p><p>12个月30篇文章,这意味着每个月差不多2.5篇文章.</p><p>但实际上,在这些文章之中,有:</p><ul><li><p>空白的文章: <a href="https://wzk0.github.io/dm/">我有两个梦</a></p></li><li><p>没有写完的文章: <a href="https://wzk0.github.io/py/">第一个Python小程序全记录</a>,<a href="https://wzk0.github.io/rp/">初学者的入门Python学习</a>,<a href="https://wzk0.github.io/rpy/">使用Ren’Py制作你的第一个GalGame</a></p></li></ul><p>以及相当多的,算不上是教程的教程文章,或是一两篇的”无病呻吟”.</p><p>我应该会把他们补完!前提是有足够的时间.</p><hr><h2 id="开启下一年"><a href="#开启下一年" class="headerlink" title="开启下一年"></a>开启下一年</h2><p>在新的一年(便当二年)里,最显著的变化可能是文章数量.</p><p>学业压力的增大,新鲜知识的补充,以及周末时间的缩水,都是比较主要的原因.</p><p>但另一方面,如果我再进行作文,一定会冲着高质量的目标进发.</p><hr><h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>最后抒发一下感慨吧!</p><p>不知道是多久前了,但是或许是一年半以前.</p><p>有个人告诉了我”博客”这个东西.</p><p>当时纯粹是好奇,抱着写着玩玩的心情试了试水.</p><p>结果却一发不可收拾.</p><p>在过去的一年,我的博客不断进行着”孟母三迁”的行为.</p><p>前前后后,总共换了四次域名,期间也丢失了部分文章,不过,</p><p><strong>终于到了今天啊!</strong></p><p>通过博客,我记录了一些自己碰见的问题,或是分享了一些在许多人看来再简单不过的东<br>西.</p><p>或许他们不喜欢这么简单的内容.</p><p>或许他们不喜欢我的行文风格.</p><p>或许他们不喜欢”听话的便当”这个昵称.</p><p>或许我自己都在否定自己的文章.</p><p>但:</p><p>当我想起自己在那些深夜独自敲打键盘,做着父母同学都不理解的写作行为,心中便充满了包含反叛情绪的成就感;</p><p>当我看到读者对我说的”很喜欢你的博客”,看到评论区的每一条言语,就重新充满了动力.</p><p>而我一直认为文字是最能传递感情的媒介,所以我会写下去,会向着<strong>更好的方向</strong>写下去.</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Ren&#39;Py制作你的第一个GalGame</title>
    <link href="/rpy/"/>
    <url>/rpy/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/6.26cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="什么是GalGame"><a href="#什么是GalGame" class="headerlink" title="什么是GalGame?"></a>什么是GalGame?</h2><p>可以看看Wikipedia的说明 &#x3D;&#x3D;&gt; <a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%B0%91%E5%A5%B3%E9%81%8A%E6%88%B2">https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%B0%91%E5%A5%B3%E9%81%8A%E6%88%B2</a></p><p>萌娘百科的说明 &#x3D;&#x3D;&gt; <a href="https://zh.moegirl.org.cn/Galgame">https://zh.moegirl.org.cn/Galgame</a></p><blockquote><p>不过我认为称为视觉小说游戏更好诶??毕竟有些阿宅<strong>不是冲着美少女</strong>去的.</p></blockquote><hr><h2 id="制作GalGame的流程"><a href="#制作GalGame的流程" class="headerlink" title="制作GalGame的流程"></a>制作GalGame的流程</h2><p>既然了解完了什么是GalGame,不妨自己亲手做一个吧!</p><p><strong>制作GalGame的准备:</strong></p><ul><li>故事(梗概,发展,人物都要想好)</li><li>素材(人物图,背景,音乐,小音效)</li><li>…</li></ul><p>诶?没有思路?没关系,我们可以对一些已有的故事进行改编,例如”三只小猪”.</p><p>原本的故事是…(我忘了hhh)</p><p>那么就改成:</p><blockquote><p>三只小猪在森林里玩耍时无意中捡到了<strong>猪神药水</strong>,喝下之后就可以变成猪神,但小猪们都想拥有这瓶药水,让自己变得<strong>更加强大</strong>从而让猪村最可爱的猪小妹爱上自己.于是他们便约定把药水藏起来以便三只猪没有一个人会拥有它,然而猪的欲望是无限的.一个夜晚后,三只小猪中的一只被残忍杀害,剩下的两只小猪都认为是对方杀死了它,但可怕的事接踵而至…</p></blockquote><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Games on Linux</title>
    <link href="/lg/"/>
    <url>/lg/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/cover.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>4月30日,我把Windows彻彻底底地从我的硬盘中删除了,</p><p>继而,我选择了<code>Ubuntu 22.04 LTS</code>.</p><p>虽然一开始的几天经常崩溃(当时刚出几天我就安装了),</p><p>但是现在已经没有系统报错了.</p><p>“不过就下载这么几个软件,未免有点浪费…”</p><p>我看着应用栏里的<code>QQ</code>(第三方版),<code>微信</code>(官方与优麒麟合作版),<code>Telegram</code>(snap版),<code>Chrome</code>(官方版),<code>钉钉</code>(官方版),<code>WPS</code>(官方版),<code>Sublime Text4</code>(官方版),<code>VLC</code>(apt版)…以及一大堆其他的<code>APPimage</code>文件自言自语道.</p><p>“怎么样才能发挥电脑的更多性能呢…”</p><p>于是,我想到了<strong>游戏</strong>.</p><blockquote><p>对于我这种小白而言.</p></blockquote><p>“不过,Linux上游戏不多吧…但是我又不想安装wine,那不妨先找几个游戏,看看有没有Linux版本的吧!”——</p><p class="note note-danger">本篇文章介绍的所有游戏均不会使用任何模拟器或容器(wine/other),保证Linux的纯净度!</p><hr><h2 id="Minecraft-我的世界"><a href="#Minecraft-我的世界" class="headerlink" title="Minecraft(我的世界)"></a>Minecraft(我的世界)</h2><p>看一下<a href="https://zh.wikipedia.org/wiki/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C">wiki</a>的介绍吧(这游戏大概所有人都玩过吧…)</p><blockquote><p>《我的世界》（英语：Minecraft，中国大陆译作“我的世界”，香港常用英文，台湾译作“当个创世神”）是微软旗下Mojang Studios开发的沙盒游戏。游戏中，玩家可以在一个3D世界内与方块进行交互。游戏中的特色功能包括探索世界、采集资源、合成物品及生存冒险等。《我的世界》有多种模式：生存模式中玩家必须维持生命并采集资源以打造自己的世界；创造模式中玩家拥有无限的资源并可自由地创作建筑；而冒险模式中玩家可在其他玩家定制的地图中游玩；极限模式是生存模式的一个变种，但难度锁定为困难，且无法重生。<br>《我的世界》最初由瑞典游戏设计师马库斯·佩尔松（又称Notch[13]）开发，之后由其成立的Mojang Studios开发，主机版则与4J Studios合作开发。游戏最初使用Java编写，其Alpha版本在2010年6月30日公开发布，经逐步更新之后正式版本1.0.0在于2011年11月18日发布。Android版和iOS版分别于2011年10月7日及11月17日发售。2012年5月9日，Mojang透过Xbox Live Arcade向Xbox 360用户发售《我的世界》。2013年12月17日及2014年9月4日，游戏亦先后登录PlayStation 3、PlayStation 4平台。Xbox One版本于同年9月5日发布。Playstation Vita版本亦于2014年10月14日起开售。Windows Phone版本于同年10月10日开始销售[14]。2015年12月17日，Wii U版本发售。2017年5月11日，任天堂Switch版本发售。<br>《我的世界》获得业界的一致好评，赢得众多奖项和荣誉。游戏的Java版以其强大的第三方拓展模组而知名，它们可以为游戏添加各种新的物件、角色和功能。2014年9月，微软公司宣布以25亿美金收购Mojang及游戏的知识产权，收购于两个月后完成。2016年5月，网易宣布代理《我的世界》中国版[15]，2017年8月开启公测[16]。<br>截至2021年5月，《我的世界》拥有2.38亿销量，1.5亿月活跃用户[17][18]，为有史以来最畅销的电子游戏。</p></blockquote><p>那么如何进行游戏呢?</p><p>这里有两条路线:</p><ol><li>你是有正版账号的玩家</li><li>没有正版账号</li></ol><p>首先,无论有没有账号,都应该先下载游戏文件:</p><p>在自己Linux系统的浏览器上打开网址: <a href="https://www.minecraft.net/en-us/download">https://www.minecraft.net/en-us/download</a></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221114277.png" alt="如图"></p><p>如果是<code>Debian系</code>的系统,选择最左边即可.或者点击这里直接下载: <a href="https://launcher.mojang.com/download/Minecraft.deb">https://launcher.mojang.com/download/Minecraft.deb</a></p><p>之后,将会下载一个deb安装包.</p><p>下载完成后,在该文件所在文件夹右键打开终端,输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i Minecraft.deb</span><br></pre></td></tr></table></figure><p>如果没有问题的话,应该是会报错的(这好像是个病句…),内容是<code>缺少依赖</code>之类的.</p><p>如果报错,输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -f install</span><br></pre></td></tr></table></figure><blockquote><p>此指令安装缺少的依赖.</p></blockquote><h3 id="我买了正版账号"><a href="#我买了正版账号" class="headerlink" title="我买了正版账号"></a>我买了正版账号</h3><p>经过不快不慢的安装过程之后,会发现应用栏多了一个Minecraft的图标,此时:</p><p><strong>有正版账号的可以关闭网页直接点击软件登录开玩了.</strong></p><h3 id="我买不起账号"><a href="#我买不起账号" class="headerlink" title="我买不起账号"></a>我买不起账号</h3><p>这里,我们需要一个Minecraft启动器: <code>HMCL</code></p><p>下载页面: <a href="https://hmcl.huangyuhui.net/download/">https://hmcl.huangyuhui.net/download/</a></p><p>不过居然用城通(垃圾)网盘,下载速度比百度网盘还<strong>慢</strong>.</p><p>所以你也可以下载我上传到Github的版本(已加速): <a href="https://ghproxy.com/https://github.com/wzk0/photo/releases/download/hmcl/HMCL-3.5.3.jar">https://ghproxy.com/https://github.com/wzk0/photo/releases/download/hmcl/HMCL-3.5.3.jar</a></p><p>或者从作者的官网下载beta版: <a href="https://gitee.com/huanghongxun/HMCL/">https://gitee.com/huanghongxun/HMCL/</a></p><p>下载完成后,会出现一个<code>HMCL-3.5.3.jar</code>文件,在此文件所在文件夹右键打开终端,输入:</p><p><code>sudo apt install openjdk-18-jdk -y</code></p><blockquote><p>此指令安装Java 18运行环境.</p></blockquote><p>在<code>openjdk-18-jdk</code>安装完成后,输入:</p><p><code>java -jar HMCL-3.5.3.jar</code></p><p>一段时间后,会弹出界面:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221138699.png" alt="界面"></p><p>此时,如果左边没有版本显示可以点击版本列表,添加游戏目录(它自己会自动搜索到Minecraft的路径)</p><blockquote><p>Minecraft路径: <code>/.Minecraft</code></p></blockquote><p>随后可以设置我们的Java版本:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221143503.png" alt="可以直接选择第一项,或者18ea"></p><p>设置好一切后,就可以点击启动啦!</p><blockquote><p>第一次启动会花费一段时间下载相应的依赖,之后的每一次启动都会很快.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221145989.png" alt="Play Now!"></p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221148827.png" alt="游戏内截图"></p><hr><h2 id="Doki-Doki-Literature-Club-心跳文学社"><a href="#Doki-Doki-Literature-Club-心跳文学社" class="headerlink" title="Doki Doki Literature Club!(心跳文学社)"></a>Doki Doki Literature Club!(心跳文学社)</h2><p>还是先来看看wiki的介绍:</p><blockquote><p>《心跳文学部》（英语：Doki Doki Literature Club!，又译作“心跳文艺部”、“心跳文艺社”），简称《DDLC》，是Team Salvato在2017年9月22日发表在Microsoft Windows、Linux和macOS上的独立游戏[1]，后来于2017年10月6日登陆游戏平台Steam。故事描述一位男高中生加入学校的文学部与四位女性成员交流的故事。《心跳文学部》的特点为其线性故事，系统会根据玩家的选择给出不同的场景和结局。游戏的风格看似轻松愉快，但实际上是一款穿插著各种打破第四面墙情节的心理学恐惧游戏[2]。<br>《心跳文学部》花费两年完成，开发团队Team Salvato此前曾制作《任天堂明星大乱斗DX》的模组。据萨尔瓦托所言，游戏的灵感来自于他对日本动画的混合感觉以及对超现实和令人不安的体验的痴迷[3]。《心跳文学部》发行后因其后设小说和恐怖元素而备受好评，《PC Gamer》更形容它是“这一年最令人惊讶的游戏”[4]。<br>2021年6月30日《Doki Doki Literature Club Plus!》发布，游戏登陆PS4、PS5、Switch、Xbox One、Xbox Series X&#x2F;S和Windows[5]。</p></blockquote><p>值得一提的是:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221153912.png" alt=".."></p><p>话不多说,怎么安装呢?</p><p>这里也有两条路:</p><ol><li>我日语英语很6</li><li>我只会中文</li></ol><p>那么还是同样的,先下载游戏本体:</p><p>官网提供了Linux的版本,和Windows版本的在同一个文件夹.</p><p>官网: <a href="https://ddlc.moe/">https://ddlc.moe/</a></p><p>往下翻动页面,点击<code>download now</code>即可:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221205047.png" alt="如图"></p><p>随后跳到一个捐赠页面(反正我是没钱…):</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221206347.png" alt="如图"></p><p>点击<code>No thanks, just take me to the downloads</code>这行灰色小字.</p><p>之后跳转到下载界面,点击第一个选项<code>DDLC (Windows) 220 MB</code>:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221208356.png" alt="如图"></p><p>会下载一个压缩包,解压后:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221215927.png" alt="如图"></p><hr><h3 id="我日语英语很6"><a href="#我日语英语很6" class="headerlink" title="我日语英语很6"></a>我日语英语很6</h3><p>如果你是<code>日语英语很6</code>的用户,在此文件夹右键打开终端,输入指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./DDLC.sh</span><br></pre></td></tr></table></figure><p>随后就可以开玩啦!</p><hr><h3 id="我只会中文"><a href="#我只会中文" class="headerlink" title="我只会中文"></a>我只会中文</h3><p>如果你是只会中文的用户:</p><p>我在steam社区找到了简体中文补丁: <a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1220392392">https://steamcommunity.com/sharedfiles/filedetails/?id=1220392392</a></p><p>根据官方提供的链接下载后,也是一个压缩包,解压后拖到指定目录即可:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221218172.png" alt="官方提供了方法"></p><p>如果你不想进行这些操作(觉得麻烦)的话,可以直接下载我进行打包过的版本: <a href="https://drive.google.com/uc?id=11hMZM437ZHCkBl4gMbajrcPKch-mPv01&export=download">https://drive.google.com/uc?id=11hMZM437ZHCkBl4gMbajrcPKch-mPv01&amp;export=download</a></p><p>解压后,在文件夹内右键打开终端,输入指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./DDLC.sh</span><br></pre></td></tr></table></figure><p>感受<code>温馨和治愈</code>吧!</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205221358217.png" alt="游戏界面"></p><hr><h2 id="To-The-Moon-去月球"><a href="#To-The-Moon-去月球" class="headerlink" title="To The Moon(去月球)"></a>To The Moon(去月球)</h2><p>wiki的介绍:</p><blockquote><p>《去月球》（英语：To the Moon）是一款由高瞰（Kan “Reives” Gao）[2][3]和他的独立游戏工作室自由鸟工作室制作的冒险角色扮演视觉小说。这是自由鸟工作室制作的第四款游戏，也是首款商业化发行的游戏。<br>2011年9月，Windows版本发布在作者的网站及其他下载平台网站上，2011年11月1日登陆Steam。2014年1月7日移植至OS X以及Linux。[1]2017年5月12日，由心动网络（X.D. Network Inc.）进行高清重制的iOS和Android平台移动版全球同步登陆App Store、Google play和TapTap。[4][5]<br>《去月球》使用RPG制作大师 XP进行制作。2010年，高瞰的爷爷经历了生命垂危的时刻，引发高瞰对死亡的思考并开始开发这一款游戏。游戏发行后四次更新追加下载内容，包含游戏音乐原声带、漫画《一起去月球》（To the Moon, too!）以及两集免费的迷你剧集。2014年，自由鸟工作室发布《鸟的故事》（A Bird Story），作为连接《去月球》与续作《寻找天堂》（Finding Paradise）之间的外传。2018年5月，高瞰宣布，《去月球》将被改编为动画电影，他将参与剧本创作并监督电影制作。[6][7]<br>《去月球》的剧情和音乐得到积极的评价。[8][9][10]游戏被提名多项奖项，并获得Gamespot2011年“最佳故事奖”。[11]</p></blockquote><p>话不多说,好游戏直接点击下载:</p><p><a href="https://drive.google.com/u/0/uc?id=1feXDeXi817FvnnTWj2_dT7er5q_a9A3p&export=download">https://drive.google.com/u/0/uc?id=1feXDeXi817FvnnTWj2_dT7er5q_a9A3p&amp;export=download</a></p><p>下载到本地后,右键文件:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205282123367.png" alt="如图所示"></p><p>修改权限为可执行,随后双击运行即可.</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/202205282124838.png" alt="."></p><p>开始玩吧!</p><hr><h2 id="Dead-Cells-死亡细胞"><a href="#Dead-Cells-死亡细胞" class="headerlink" title="Dead Cells(死亡细胞)"></a>Dead Cells(死亡细胞)</h2><p>wiki的介绍:</p><blockquote><p>《死亡细胞》（英语：Dead Cells，中国大陆又译作“重生细胞”）是一款融合Roguelike与类银河战士恶魔城要素的游戏，由Motion Twin团队开发。游戏从2017年5月开始抢先体验阶段，2018年8月7日于Windows、MacOS、Linux、PlayStation 4、Xbox One、任天堂Switch等平台正式发售，2020年6月2日在Android平台发售。<br>游戏中玩家将扮演一个被不明细胞寄生的尸体，在地牢中探索并寻找出路。地牢中充满各种武器装备、道具等收集要素，但也要注意陷阱和死灵生物的威胁。玩家也需要收集“细胞”来换取角色能力与武器的升级。每次死亡便会失去身上全部的细胞与装备，并从最初的关卡重新开始，此外地图都是随机生成。开发团队Motion Twin表示本作受到《以撒的结合》不少的启发。[2]</p></blockquote><p>话不多说,好游戏直接点击下载:</p><p><a href="https://drive.google.com/u/0/uc?id=1_eYu84RNlbAinzd38NJP_Ua-zffp8maW&export=download">https://drive.google.com/u/0/uc?id=1_eYu84RNlbAinzd38NJP_Ua-zffp8maW&amp;export=download</a></p><p>下载完后,像上面<code>To The Moon</code>的游玩方法一样即可.</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/202206031112152.png" alt="."></p><hr><h2 id="Plague-Inc-瘟疫公司"><a href="#Plague-Inc-瘟疫公司" class="headerlink" title="Plague Inc.(瘟疫公司)"></a>Plague Inc.(瘟疫公司)</h2><p>wiki的介绍:</p><blockquote><p>《瘟疫公司》（英语：Plague Inc.）是由Ndemic Creations独自开发，适用于iOS、Android和Windows Phone平台的战略游戏。玩家在游戏中需要将一种病原体传遍整个世界，然后将所有人消灭。游戏使用了能让瘟疫变得更真实的传染病模型。支援英文、葡萄牙文、意大利文、法文、西班牙文、德文、韩文、日文、中文等多种文字。<br>该游戏下载量截至2013年已逾1000万次[1]，并获得了IGN 2012年年度游戏奖的“整体最佳战略游戏奖”第二名。[2]在2012年，此游戏是美国下载次数第15多的iPhone游戏。[3]每次现实世界出现新疫情（如西非伊波拉病毒疫情、2019冠状病毒病疫情），该游戏就会成为一些国家及地区在iOS、Android上下载次数最多的付费游戏。[4][5]<br>2014年2月，Ndemic Creations在Steam平台发布了适用于PC、Mac的《瘟疫公司：进化》（英语：Plague Inc: Evolved）[6]。</p></blockquote><p>话不多说,好游戏直接点击下载:</p><p><a href="https://drive.google.com/u/0/uc?id=1hqcU0lgYuNzoHAjrLelzjktXHvxLWVpS&export=download">https://drive.google.com/u/0/uc?id=1hqcU0lgYuNzoHAjrLelzjktXHvxLWVpS&amp;export=download</a></p><p>下载完后,像上面<code>To The Moon</code>的游玩方法一样即可.</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/202206041748814.png" alt="."></p><hr><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>Linux上的好游戏远不止这几个(因为steam也有Linux版本,而可以通过steam平台运行的游戏也有很多)!</p><p>希望热爱Linux,热爱Games的你可以在评论区分享出自己喜欢的游戏或安装方法!</p><p>发现精品(或著名)的Linux游戏后,我也会积极更新这篇文章.</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学者的入门Python学习</title>
    <link href="/rp/"/>
    <url>/rp/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/python-programming-minimalism-grey-technology-hd-wallpaper-preview.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议,协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一篇<code>适合初学者快速了解Python相关基础知识</code>的文章,<del>稍稍带有RPG游戏风格</del>,阅读前请注意以下几点:</p><p class="note note-primary">本文不会或很少会介绍Python的模块.</p><blockquote><p>如果你不知道什么是模块,请往下阅读.</p></blockquote><p class="note note-danger">由于作者才疏学浅,本文可能会有不完善或错误的地方,若发现请在评论区指正.</p><blockquote><p>如果你不知道什么是评论区,请滑动到文章底部.</p></blockquote><p class="note note-info">如果有不明白的地方,可直接在评论区询问,社恐可从关于页面获取到我的信息.</p><blockquote><p>如果你不知道关于页面在哪,请<a href="https://wzk0.github.io/about">点击这里</a>.</p></blockquote><p class="note note-light">本文汲取自大量其它大佬的文章,加以自己的理解,侵删.</p><blockquote><p>如果你想知道大佬列表,请滑动到文章底部.</p></blockquote><p class="note note-warning">对于下面这种样式的区块,可点击右上角进行快捷复制:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点右上角复制我！</span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2022-04-10-13-39-17-40.jpg" alt="用法"></p><p class="note note-success">每个小专题的前面都有冒险小故事!</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景!"></a>背景!</h2><hr><blockquote><p>我叫便当,是出生在圣条大陆的男孩子.<br>我出生于这个大陆最水深火热的时刻——大陆内是明枪易躲,暗箭难防的环境,而大陆外则是邪恶的龙的居住之所.<br>但我并不甘心居于现状.于是,我决定在17岁那年外出闯荡.</p></blockquote><hr><hr><h2 id="开始吧！"><a href="#开始吧！" class="headerlink" title="开始吧！"></a>开始吧！</h2><p class="note note-light">Python is easiest.<br!>——xxx</p><hr><blockquote><p>翻译:我是要一统世界的便当!</p></blockquote><hr><hr><h3 id="0-准备物资-——-安装"><a href="#0-准备物资-——-安装" class="headerlink" title="0. 准备物资! —— 安装"></a>0. 准备物资! —— 安装</h3><hr><blockquote><p>“这是什么蛮荒之地?!”<br>离家一周,我便遇到了问题.<br>“诶,什么都没买呢…早知道从家里带点东西了”<br>看着眼前可以用”贫瘠”来称之的罗德村,我不禁感慨道.<br>“大概上古的英雄们都是这么过来的吧”<br>我用阿Q的精神胜利法安慰自己.<br>罗德村是圣条大陆历史上最大的一场战役的起源地.<br>抱着这样迷信的观念,我决定暂时定居在罗德村.<br>“可是这也太!…”<br>“喂,小子”<br>正在我打算继续发牢骚时,一个突然老太婆出现在我的背后.<br>“听说你想统治世界?”<br>“!”<br>莫非这老太会读心术?<br>“罗德村其实是像<a href="https://zh.m.wikipedia.org/wiki/%E7%93%A6%E5%B9%B2%E9%81%94">Wakanda</a>一样的地方,我们这里物资丰富着呢.小子,想统治世界可得有件称手的武器啊”<br>说完,我感到一阵眩晕.<br>再睁眼时,面前已是另一番天地.</p></blockquote><hr><blockquote><p>Windows用户</p></blockquote><p>Python官网: <a href="https://www.python.org/">https://www.python.org/</a></p><p>请自行下载对应版本.</p><blockquote><p>Linux用户</p></blockquote><p>Debian系的发行版都内置了Python,其它系的应该也都有内置(Python太重要啦！)</p><blockquote><p>Android用户</p></blockquote><p>下载Termux: <a href="https://f-droid.org/repo/com.termux_118.apk">https://f-droid.org/repo/com.termux_118.apk</a></p><p>打开后输入以下指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update -y &amp;&amp; apt upgrade -y &amp;&amp; apt install python -y</span><br></pre></td></tr></table></figure><blockquote><p>iOS用户</p></blockquote><p>可从APP Store下载<code>ish</code>(类似Termux的模拟终端软件).</p><p>至此,<code>安装</code>环节结束.</p><hr><h3 id="1-踏上征途-——-Hello-World"><a href="#1-踏上征途-——-Hello-World" class="headerlink" title="1. 踏上征途! —— Hello World"></a>1. 踏上征途! —— Hello World</h3><hr><blockquote><p>上次眩晕后,老太带我去了罗德村的武器库.<br>“原来是怕我记录才迷昏我…太过分了”<br>我按着发痛的太阳穴,喃喃道.<br>“不过这单手剑倒真是不错”<br>在塞满上古武器的仓库里,面对着琳琅满目的武器,老太说我可以随便选.<br>没有太多深思熟虑的我,选择这把看起来与我有缘分的单手剑.<br>随后,老太又给了我许多物资,好像提前知道我要来一样.<br>道过谢后,我离开了罗德村——怪不得是英雄起源之地.</p></blockquote><hr><p>学习任何一门编程语言,第一个项目应当都是<code>在屏幕上输出Hello World</code>,有关<code>Hello World</code>的历史可从Wiki了解: <a href="https://en.m.wikipedia.org/wiki/%22Hello,_World!%22_program">https://en.m.wikipedia.org/wiki/%22Hello,_World!%22_program</a></p><p>在Python中,<code>输出</code>的单词为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print()</span><br></pre></td></tr></table></figure><p>从英语语法的角度分析,<code>输出Hello World</code>是一个整句,<code>输出</code>是谓语,<code>Hello World</code>则作宾语.那么,输出Hello World的程序应该是这样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello World&quot;)</span><br></pre></td></tr></table></figure><p>你可能要问了: 我在哪里输入这行代码呢?</p><p>Python提供了两种方式运行代码语句:</p><ol><li>在终端输入<code>python3</code>,进入交互模式:</li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2022-04-10-13-17-53-02.jpg" alt="交互模式"></p><p>最上面弹出的一段话包含了你的Python版本等信息,以<code>&gt;&gt;&gt;</code>开头的一行为<code>待输入状态</code>,可以将代码语句输入,回车代表执行,在<code>&gt;&gt;&gt;</code>下一行会显示执行结果.</p><ol start="2"><li>编辑一个以<code>.py</code>结尾的文件,并输入<code>python3 name.py</code>:</li></ol><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220410_132525.jpg" alt="编辑模式"></p><p class="note note-info">Termux用户可使用终端文本编辑器nano,用法: https://wzk0.github.io/nn/</p><p>两种方法都成功地运行了我们的Python程序！</p><p>我们也可以看出Python的一些特点:</p><ol><li><p>动作语句(被执行语句)</p></li><li><p>语句末尾无分号</p></li><li><p>字符串加冒号</p></li></ol><p>至此,<code>Hello World</code>环节结束.</p><hr><h3 id="2-捡到法宝-——-运算符"><a href="#2-捡到法宝-——-运算符" class="headerlink" title="2. 捡到法宝! —— 运算符"></a>2. 捡到法宝! —— 运算符</h3><p>Python中运算符的种类有很多,如同RPG游戏可以拿弓拿剑一样.</p><hr><ol><li>算数运算符:</li></ol><p>如果我们要在屏幕上输出数字10,可以用加法(5+5),减法(15-5),乘法(2* 5),除法(20&#x2F;2),取余数(131%11),幂(10** 1).</p><p>其中,<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>**</code>都是Python中的<code>算数运算符</code>.</p><p>我们不妨来试试！编辑一个<code>demo.py</code>,输入以下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;5+5的结果是:&quot;)</span><br><span class="line">print(5+5)</span><br><span class="line">print(&quot;15-5的结果是:&quot;)</span><br><span class="line">print(15-5)</span><br><span class="line">print(&quot;2*5的结果是:&quot;)</span><br><span class="line">print(2*5)</span><br><span class="line">print(&quot;20/2的结果是:&quot;)</span><br><span class="line">print(20/2)</span><br><span class="line">print(&quot;131%11的结果是:&quot;)</span><br><span class="line">print(131%11)</span><br><span class="line">print(&quot;10**1的结果是:&quot;)</span><br><span class="line">print(10**1)</span><br></pre></td></tr></table></figure><p>执行:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220410_141059.jpg" alt="执行"></p><p>诶,很神奇地发现,20&#x2F;2的结果多了一位小数,这是怎么回事呢?(下节再说)</p><hr><ol start="2"><li>比较运算符:</li></ol><p>Python中的大小比较符号有: <code>==</code>(等于),<code>!=</code>(不等于),<code>&gt;</code>(大于),<code>&lt;</code>(小于),<code>&gt;=</code>(大于等于),<code>&lt;=</code>(小于等于)</p><p>我们也来写一下！:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(10==5+5)</span><br><span class="line">print(10!=5+5)</span><br><span class="line">print(11&gt;5+5)</span><br><span class="line">print(11&lt;5+5)</span><br><span class="line">print(10&gt;=5+5)</span><br><span class="line">print(10&lt;=5+6)</span><br></pre></td></tr></table></figure><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220410_142303.jpg" alt="结果"></p><p>这次返回的是什么东西?！True?False??可是我没在代码里输入这两个单词啊！</p><p>不要慌张,不要害怕,并不是有人偷偷摸摸地改了你的代码: 这里的True和False称为<code>布尔值</code>,即<code>真/假</code>,是一种变量(下节讲).</p><p>我们看一下第一行的代码: 10&#x3D;&#x3D;5+5,那不就是10&#x3D;10嘛！10&#x3D;10,当然是正确的喽！</p><p>第二行,10!&#x3D;10,翻译过来就是<code>10不等于10</code>,这明显是<code>False</code>的,所以在屏幕上输出了False.</p><hr><ol start="3"><li>赋值运算符:</li></ol><p class="note note-primary">这个符号超级重要的噢！</p><p>顾名思义,这是将<code>后面的一长串</code>赋值给前面很短的一个<code>变量</code>的符号,就像解物理题时用一个字母代替长长的一串公式一样,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=5+5</span><br></pre></td></tr></table></figure><p>表明将<code>5+5</code>的值赋给了<code>a</code>这个<code>变量</code>(喂,变量的相关知识在下一小节,再等等啦！)</p><p>这里有一些其它的赋值符:</p><ul><li><p><code>+=</code>:例如<code>a+=5</code>,它的意思便是<code>a=a+5</code></p></li><li><p><code>-=</code>:例如<code>a-=5</code>,它的意思便是<code>a=a-5</code></p></li><li><p>同理,<code>*=</code>,<code>/=</code>就不说明了…</p></li></ul><p><strong>永远记住</strong>,Python中的等号是<code>赋值</code>的意思！而并非<code>1+1=2</code>时<code>算出</code>的意思！</p><p class="note note-info">尽管Python还有许许多多的运算符,但毕竟这是一篇"初级"教程,只介绍用处比较多的部分...</p><p>至此,<code>运算符</code>环节结束.</p><hr><h3 id="3-魔法属性-——-变量类型"><a href="#3-魔法属性-——-变量类型" class="headerlink" title="3. 魔法属性! —— 变量类型"></a>3. 魔法属性! —— 变量类型</h3><p>千呼万唤始出来唷！</p><p>上上一小节的末尾提到了一个名!词——<code>字符串</code> ,上节也出现了”10.0”这个现象,这些都跟<code>变量类型</code>分不开关系.</p><p>在Python中,存在很多类型的变量类型,这些变量类型就如同装备的属性一般,有<code>金木水火土</code>之分.</p><hr><ol><li>土之属性! —— 字符串(str)</li></ol><p>字符串是什么?就是一大串字符啊！</p><p>比方说<code>shkwjxbdbens时间就像那啥那啥487646@jdenn</code>(滚键盘滚出来的,没有实际意义…)</p><p>我们不妨在Python中print一下这串乱码:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220416_205101.jpg" alt="报错了！"></p><p>这是我们第一次遇到报错的情况！我们分析一下报错内容:</p><p class="note note-danger">NameError: name 'shkwjxbdbens时间就像那啥那啥487646' is not defined</p><p>大致是说:这串乱码没有被定义.</p><p>嘶,这是什么意思呢?</p><p>在Python中,如同这样的结构被称为<code>字符串</code>,是需要加上<code>冒号</code>才能被<code>print</code>的！</p><p>有没有似曾相识的感觉?原来,早在<code>Hello World！</code>那一章节,我们已经接触了作为<code>字符串变量</code>的<code>Hello World！</code>.</p><p>我们加上冒号输出试一试:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220416_205802.jpg" alt="成功了！"></p><p>果不其然,我们会得出下面一个规律:</p><blockquote><p>所有非纯数字的组合结构都称为字符串,而输出字符串需要加英文状态下的冒号.</p></blockquote><p>你可能会问:这么长的一个字符串,怎么重复调用呢?</p><p><strong>使用赋值运算符啊！</strong></p><p>例如:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220416_210511.jpg" alt="反复调用"></p><p class="note note-info">在Python中,两个字符串或是字符串变量也可以通过+号合并输出；\n表示换行,关于\(转义符)以后会有详细介绍.</p><p>在字符串中,如果想要替换一些特定的文字,改怎么操作呢?</p><p>这时,我们需要使用<code>replace</code>方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">word=&#x27;便当真是太厉害啦!&#x27;</span><br><span class="line">after_word=word.replace(&#x27;厉害&#x27;,&#x27;菜&#x27;)</span><br></pre></td></tr></table></figure><p>输出一下看看!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Python 3.10.4 (main, Apr  2 2022, 09:04:19) [GCC 11.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; word=&#x27;便当真是太厉害啦!&#x27;</span><br><span class="line">&gt;&gt;&gt; after_word=word.replace(&#x27;厉害&#x27;,&#x27;菜&#x27;)</span><br><span class="line">&gt;&gt;&gt; print(after_word)</span><br><span class="line">便当真是太菜啦!</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>原本<code>word</code>里的话被替代了!</p><blockquote><p>被称为土之属性的<code>字符串</code>变量必须受到<code>冒号</code>的保护,否则便会流失魔力！</p></blockquote><hr><ol start="2"><li>水之属性! —— 整数(int)</li></ol><p>“如果我们想输出1+1,怎么做?”</p><p>这句话会使你产生怎样的联想?</p><p>“到底是要我输出两个为1的字符串呢,还是算数呢?”</p><p>如果是字符串式的输出方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=&quot;1&quot;</span><br><span class="line">print(a+a)</span><br></pre></td></tr></table></figure><p>如果是<code>算数</code>的方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">print(a+a)</span><br></pre></td></tr></table></figure><p>我们运行一下:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220416_212115.jpg" alt="结果"></p><p>加冒号时,1被当成了字符串,而不加冒号时,a被作为一个整数进行数字运算.</p><p>可是,当我们打算运行这样的代码时:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&quot;1&quot;</span><br><span class="line">b=1</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure><p>整数和字符串相加,是什么结果呢?</p><p><strong>报错了！</strong>(懒得截屏了)报错信息是:</p><p class="note note-danger">TypeError: can only concatenate str (not "int") to str</p><p>意思是说,两种类型的变量发生了冲突.那么此时我们需要<code>类型转换</code>,解决方法如下:</p><p>如果想输出两个字符串:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&quot;1&quot;</span><br><span class="line">b=1</span><br><span class="line">print(a+str(b))</span><br></pre></td></tr></table></figure><p>如果想输出算数结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&quot;1&quot;</span><br><span class="line">b=1</span><br><span class="line">print(int(a)+b)</span><br></pre></td></tr></table></figure><p>运行一下:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220416_212942.jpg" alt="结果"></p><p>恩,没有报错了！这便是灵活的水属性! —— int.</p><hr><ol start="3"><li>风之属性! —— 列表(list)</li></ol><p>什么是列表?不难理解,列表就是<code>一串东西</code>组合成的一列表</p><p>具体这串东西是什么,Python已经为我们定义好了：可以是所有变量类型,我们称之为<code>元素</code>.</p><p>在Python中,定义一个空列表的方法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls=[]</span><br></pre></td></tr></table></figure><p>举例：一个列表中可以包含的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls=[&#x27;听话的便当&#x27;,666,&#x27;真的吗&#x27;,True]</span><br></pre></td></tr></table></figure><p>如果我们在终端输出一下这个列表,结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python 3.10.4 (main, Apr  2 2022, 09:04:19) [GCC 11.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; ls=[&#x27;听话的便当&#x27;,666,&#x27;真的吗&#x27;,True]</span><br><span class="line">&gt;&gt;&gt; print(ls)</span><br><span class="line">[&#x27;听话的便当&#x27;, 666, &#x27;真的吗&#x27;, True]</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>如果我们想添加这个列表的元素,只需:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls=[&#x27;听话的便当&#x27;,666,&#x27;真的吗&#x27;,True]</span><br><span class="line">ls.append(&#x27;那当然&#x27;)</span><br></pre></td></tr></table></figure><p>再输出一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Python 3.10.4 (main, Apr  2 2022, 09:04:19) [GCC 11.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; ls=[&#x27;听话的便当&#x27;,666,&#x27;真的吗&#x27;,True]</span><br><span class="line">&gt;&gt;&gt; ls.append(&#x27;那当然&#x27;)</span><br><span class="line">&gt;&gt;&gt; print(ls)</span><br><span class="line">[&#x27;听话的便当&#x27;, 666, &#x27;真的吗&#x27;, True, &#x27;那当然&#x27;]</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>列表的元素增加了!</p><p>如果我们要输出所有元素呢?</p><p>我们可以输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(ls[0]+ls[1]+ls[2]+ls[3]+ls[4])</span><br></pre></td></tr></table></figure><p>还有另一个更简便的方法,叫做<code>循环遍历</code>.具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls=[&#x27;听话的便当&#x27;,666,&#x27;真的吗&#x27;,True]</span><br><span class="line">for element in ls:</span><br><span class="line">print(element)</span><br></pre></td></tr></table></figure><p>来逐行看一下：</p><ol><li>第一行,定义了一个名为ls的列表;</li><li>第二行,定义了一个<code>element</code>变量,充当循环过程中的变量;</li><li>第三行,在循环中输出了变量<code>element</code>.</li></ol><p>其中,变量element的作用相当于把<code>列表中的每个元素带入到一个循环里并执行这个循环里的事件</code>,</p><p>在这段代码中,循环里的事件就是<code>print</code>.</p><p>我们来运行一下,看看结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">听话的便当</span><br><span class="line">666</span><br><span class="line">真的吗</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>非常好,按照我们预期的样子输出了每一个元素!</p><p>当然,在循环中的事件可以写得很复杂,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls=[&#x27;听话的便当&#x27;,666,&#x27;真的吗&#x27;,True]</span><br><span class="line">for element in ls:</span><br><span class="line">print(str(ls.index(element))+&#x27;. &#x27;+str(element),end=&#x27;\n\n&#x27;)</span><br></pre></td></tr></table></figure><blockquote><p>在<code>列表内print()函数</code>的末尾加上<code>end=</code>可以使得输出结果的末尾带上特定内容.<code>\n</code>的意思为<code>换行</code>.</p></blockquote><blockquote><p>ls.index(element)的意思是<code>获取列表ls中,每个出现的元素element在列表中的位置</code>.</p></blockquote><p>值得一提的是:在编程语言的列表中,<code>第一个</code>元素的位置并<strong>不是1</strong>,<strong>而是0</strong>.</p><p>运行一下上面的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0. 听话的便当</span><br><span class="line"></span><br><span class="line">1. 666</span><br><span class="line"></span><br><span class="line">2. 真的吗</span><br><span class="line"></span><br><span class="line">3. True</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>美化输出了我们的列表内容!这样也会减少代码量,提高运行效率.建议大家多使用列表!</p><p>风之属性的<code>list</code>真是快捷呢!</p><hr><ol start="3"><li>火之属性! —— 字典(dict)</li></ol><p>又是一个顾名思义的变量类型!字典嘛,一一对应即可.</p><p>在Python中创建一个空字典的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&#125;</span><br></pre></td></tr></table></figure><p>字典中的元素会成双成对的出现,并且用<code>:</code>分隔开.<code>:</code>前的元素称为键(keys),后的元素称为值(values);</p><p>一对一对的元素,即一个一个的键值对,之间用<code>,</code>分隔开.</p><p>比如说,我开了一家水果店,一个苹果的价格是五块钱,草莓两块,香蕉三块.定义一个字典:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&#x27;苹果&#x27;:5,&#x27;草莓&#x27;:2,&#x27;香蕉&#x27;:3&#125;</span><br></pre></td></tr></table></figure><p>此时我们有一个告示牌贴在门口,上面会告知顾客<code>今天有什么水果</code>,<code>都什么价格</code>.</p><p>我们想知道<code>苹果</code>的价格,只需:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&#x27;苹果&#x27;:5,&#x27;草莓&#x27;:2,&#x27;香蕉&#x27;:3&#125;</span><br><span class="line">print(dic[&#x27;苹果&#x27;])</span><br></pre></td></tr></table></figure><p>要输出字典中所有的水果名,即<code>:</code>前的键,只需:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&#x27;苹果&#x27;:5,&#x27;草莓&#x27;:2,&#x27;香蕉&#x27;:3&#125;</span><br><span class="line">print(dic.keys())</span><br></pre></td></tr></table></figure><p>结果为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python 3.10.4 (main, Apr  2 2022, 09:04:19) [GCC 11.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; dic=&#123;&#x27;苹果&#x27;:5,&#x27;草莓&#x27;:2,&#x27;香蕉&#x27;:3&#125;</span><br><span class="line">&gt;&gt;&gt; print(dic.keys())</span><br><span class="line">dict_keys([&#x27;苹果&#x27;, &#x27;草莓&#x27;, &#x27;香蕉&#x27;])</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>输出了一个列表!毕竟一个字典的所有键不可能只有一个嘛!</p><p>现在,我们的告示牌上只有水果名,没有价格,未免没法吸引顾客.所有我们把字典中的所有信息美化输出一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&#x27;苹果&#x27;:5,&#x27;草莓&#x27;:2,&#x27;香蕉&#x27;:3&#125;</span><br><span class="line">name=dic.keys()</span><br><span class="line">print(&#x27;欢迎来到便当的水果店!今日信息:\n&#x27;)</span><br><span class="line">for n in name:</span><br><span class="line">print(n+&#x27;的价格为: &#x27;+str(dic[n]),end=&#x27;\n\n&#x27;)</span><br></pre></td></tr></table></figure><p>结果为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">欢迎来到便当的水果店!今日信息:</span><br><span class="line"></span><br><span class="line">苹果的价格为: 5</span><br><span class="line"></span><br><span class="line">草莓的价格为: 2</span><br><span class="line"></span><br><span class="line">香蕉的价格为: 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析一下代码:</p><ul><li>第一行,定义了一个字典,里面有便当水果店的所有信息;</li><li>第二行,我们为字典的键(水果名)创建了列表</li><li>第四行,我们遍历循环了<code>水果名</code>这个列表,用<code>n</code>这个元素代替了水果名中的各个元素</li><li>第五行,我们在循环中输出n(水果名)和n在字典中对应的值,并以换行结尾</li></ul><blockquote><p>因为字典中的值没有加<code>&#39;</code>,所以是<code>int</code>型变量.与字符串一起输出时需要转换成<code>str</code>型.</p></blockquote><p>火之属性的字典包含大量信息,要好好利用噢!</p><hr><h3 id="4-招兵买马-——-def"><a href="#4-招兵买马-——-def" class="headerlink" title="4. 招兵买马! —— def()"></a>4. 招兵买马! —— def()</h3><p>招兵买马,什么意思呢?</p><p>我们可以看到,在前面文章中的代码示例中,很多都有重复代码,比如说:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205081447693.png"></p><p>为了提高效率,我们可以提前定义一些会重复的代码为一个函数.</p><p>在Python中,定义一个函数的方法为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def name(参数):</span><br><span class="line">pass</span><br></pre></td></tr></table></figure><p>例如,我们可以定义一个用来美化输出列表的函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def beautiful_ls(ls):</span><br><span class="line">for element in ls:</span><br><span class="line">print(&#x27;#&#x27;*12+&#x27;\n&#x27;+element)</span><br></pre></td></tr></table></figure><p>运行一下,发现什么结果都没有!</p><p>原来,我们只定义了函数,而没有<code>调用</code>函数.</p><p>怎么调用呢?只需:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beautiful_ls(参数)</span><br></pre></td></tr></table></figure><p>可以看出,这个函数需要我们传入的参数为一个列表,不妨试一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls=[&#x27;听话的便当&#x27;,&#x27;真的是&#x27;,&#x27;太菜了&#x27;,&#x27;!&#x27;]</span><br><span class="line">beautiful_ls(ls)</span><br></pre></td></tr></table></figure><p>结果为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">听话的便当</span><br><span class="line">############</span><br><span class="line">真的是</span><br><span class="line">############</span><br><span class="line">太菜了</span><br><span class="line">############</span><br><span class="line">!</span><br></pre></td></tr></table></figure><p>比较一下两种方法.</p><ol><li>原始种:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;############&#x27;)</span><br><span class="line">print(ls[0])</span><br><span class="line">print(&#x27;############&#x27;)</span><br><span class="line">print(ls[1])</span><br><span class="line">print(&#x27;############&#x27;)</span><br><span class="line">print(ls[2])</span><br><span class="line">print(&#x27;############&#x27;)</span><br><span class="line">print(ls[3])</span><br></pre></td></tr></table></figure><ol start="2"><li>函数种:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def beautiful_ls(ls):</span><br><span class="line">        for element in ls:</span><br><span class="line">                print(&#x27;#&#x27;*12+&#x27;\n&#x27;+element)</span><br><span class="line">ls=[&#x27;听话的便当&#x27;,&#x27;真的是&#x27;,&#x27;太菜了&#x27;,&#x27;!&#x27;]</span><br><span class="line">beautiful_ls(ls)</span><br></pre></td></tr></table></figure><p>不但代码量减少了,方便度也大大增加.以后我们需要美化输出列表的时候直接调用函数即可,成千上百个元素组成的列表也能只用一行代码轻松解决!</p><p>当然,函数不止包括这种<code>动作型</code>的(即执行),也可以做变量型的!</p><p>比方说,我们想在每次输出的末尾都加上<code>!</code>,就可以这样做:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def beautiful_p(str):</span><br><span class="line">return str+&#x27;!&#x27;</span><br></pre></td></tr></table></figure><p>在这个函数中,可以看到:</p><ul><li>我们传入了一个字符串类型的参数</li><li>return(返回)了这个字符串参数加<code>!</code></li></ul><p>我们把<code>beautiful_ls</code>和<code>beautiful_p</code>一起使用下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls=[&#x27;听话的便当&#x27;,&#x27;真的是&#x27;,&#x27;太菜了&#x27;,&#x27;!&#x27;]</span><br><span class="line">def beautiful_p(str):</span><br><span class="line">return str+&#x27;!&#x27;</span><br><span class="line">def beautiful_ls(ls):</span><br><span class="line">for element in ls:</span><br><span class="line">print(beautiful_p(&#x27;#&#x27;*12+&#x27;\n&#x27;+element))</span><br><span class="line">beautiful_ls(ls)</span><br></pre></td></tr></table></figure><p>结果为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">听话的便当!</span><br><span class="line">############</span><br><span class="line">真的是!</span><br><span class="line">############</span><br><span class="line">太菜了!</span><br><span class="line">############</span><br><span class="line">!!</span><br></pre></td></tr></table></figure><p>为了方便地处理参数,请多多使用函数吧!写一些灵活的函数,减少你的代码量的,无疑是最好的招兵买马.</p><hr><h3 id="4-组织成立-——-import"><a href="#4-组织成立-——-import" class="headerlink" title="4. 组织成立! —— import"></a>4. 组织成立! —— import</h3><blockquote><p>“哥哥!我们招到了大量士兵(函数)!”<br>我身旁的眼镜魔法使——一个对我忠心不二的三尺萝莉对我说道<br>“是吗…好!今天就是我便当崛起的时刻.立即组建军队!”<br>“是!”</p></blockquote><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《湘夫人》讲解与赏析课件</title>
    <link href="/xfr/"/>
    <url>/xfr/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://cdn.jsdelivr.net/gh/wzk0/photo@main/800.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>大家好！今天由我来为大家讲解<code>《湘夫人》最后一段</code>以及其<code>情感赏析</code>.</p><p>首先，请将<code>语文课本</code>翻至<code>第二课</code>，或将<code>《步步高》</code>翻至<code>第五页</code>，或看<code>大屏幕</code>.</p><hr><h2 id="朗诵"><a href="#朗诵" class="headerlink" title="朗诵"></a>朗诵</h2><blockquote><p>捐余 <strong>袂(mèi)</strong> 兮江中，<strong>遗(wèi)</strong> 余 <strong>褋(dié)</strong> 兮 <strong>澧(lǐ)</strong> 浦。<br><strong>搴(qiān)</strong> 汀洲兮杜若，将以 <strong>遗(wèi)</strong> 兮远者。<br>时不可兮骤得，聊逍遥兮容与。</p></blockquote><p class="note note-info">以下是《湘夫人》最后一段的朗诵音频.</p><link href="https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css" rel="stylesheet"><script src="https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js"></script><div id="aplayer01"></div><script type="text/javascript">    const ap = new APlayer({        container: document.getElementById('aplayer01'),        audio: [{            name: '《湘夫人》最后一段',            artist: '听话的便当',            url: 'https://ghproxy.com/https://github.com/wzk0/photo/blob/main/xfr.mp3?raw=true',            cover: 'https://cdn.jsdelivr.net/gh/wzk0/photo@main/800.jpg'        }]    });</script><hr><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p class="note note-primary">听完了优美的朗诵后，我们来翻译一下这篇文章.</p><big><center><strong><p>我把那衣袖抛到江中去，我把那单衣扔到澧水旁。</p><p>我在小洲上啊采摘着杜若，将用来馈赠给远方的姑娘。</p><p>美好的时光啊不可多得，我姑且悠闲自得地徘徊游逛。</p><p></strong></center></big></p><p>袂（mèi）：衣袖。<br>褋（dié）：《方言》：禅衣，江淮南楚之间谓之“褋”。禅衣即女子内衣，是湘夫人送给湘君的信物。这是古时女子爱情生活的习惯。<br>汀：水中或水边的平地。<br>杜若：一种香草。<br>远者：指湘夫人。<br>骤得：数得，屡得。<br>逍遥：游玩。<br>容与：悠闲的样子。</p><hr><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p><strong><center><big></p><p>捐余袂兮江中，遗余褋兮澧浦。</p><p>搴汀洲兮杜若，将以遗兮远者。</p><p>时不可兮骤得，聊逍遥兮容与。</p><p></strong></center></big></p><p>此诗写湘君期待湘夫人而不至，产生的<big><b>思慕哀怨之情</b></big>，诗以湘君思念湘夫人的语调去写，描绘出那种<big><b>驰神遥望，祈之不来，盼而不见的惆怅心情</b></big>。全诗写男子的相思，所抒情意缠绵悱恻；加之作品对民间情歌<big><b>直白的抒情方式的吸取</b></big>和对<big><b>传统比兴手法的运用</b></big>，更加强了它的艺术感染力，对后世的文学创作产生了很大的影响。</p><p>最后一段与《湘君》结尾不仅<b><big>句数相同</b></big>，而且<b><big>句式也完全一样</b></big>。湘君在绝望之余，也像湘夫人那样情绪激动，向江中和岸边抛弃了对方的赠礼，但<b><big>表面的决绝却无法抑制内心的相恋</b></big>。他最终同样恢复了平静，打算在耐心的等待和期盼中，走完相恋相思这段好事多磨的<b><big>心理历程</b></big>。他在汀洲上采来芳香的杜若，准备把它赠送给远来的湘夫人。</p><p>《湘夫人》在语言上有<b><big>楚化</b></big>的特点。楚辞中使用了<b><big>大量的方言俗语</b></big>，《湘夫人》也不例外，<b><big>如“搴”（动词）、“袂”、“褋”（名词）等</b></big>。最突出的是<b><big>“兮”字</b></big>的大量运用——全诗每句都有一个“兮”字。这个语气词相当于今天所说的<b><big>“啊”字</b></big>。它的作用就在于<b><big>调整音节，加大语意、语气的转折、跳跃，增强语言的表现力</b></big>。《湘夫人》以方言为主，兼有五七言，句式变化灵活。这种“骚体”诗，是<b><big>继《诗经》后新出现的自由诗</b></big>，在我国古代诗歌发展史上是一次<b><big>了不起的创新</b></big>。</p><p>综上所述，《湘夫人》其实就是<b><big>由一次约会在时间上的误差而引出的两个悲剧，但合起来又是一幕两情相悦、忠贞不渝的喜剧</b></big>。说它们是悲剧，是因为赴约的双方都错过了相会的时间，彼此都<b><big>因相思不见而难以自拔</b></big>，心灵和感情遭受了长时间痛苦的煎熬；说它们是喜剧，是由于男女双方的相恋真诚深挚，尽管稍有挫折，但<b><big>都没有放弃追求和期盼</b></big>，所以圆满结局的出现只是<b><big>时间问题</b></big>。当他们在耐心平静的相互等待之后终于相见时，这场因先来后到而产生的误会和烦恼必然会在顷刻间烟消云散，迎接他们的将是湘君在幻觉中所感受的那种<b><big>欢乐和幸福</b></big>。</p><p>这也正是应了一句话:</p><p class="note note-danger">两情若是久长时，又岂在朝朝暮暮！</p><p>《湘君》与《湘夫人》两篇作品<b><big>一写女子的爱慕</b></big>，<b><big>一写男子的相思</b></big>，所取角度不同，所抒情意却<b><big>同样缠绵悱恻</b></big>；加之作品对民间情歌直白的抒情方式的吸取和对传统比兴手法的运用，更加强了它们的艺术感染力。因此尽管这种<b><big>热烈大胆、真诚执着的爱情</b></big>被包裹在<b><big>宗教仪式的外壳中</b></big>，但它本身所具有强大的生命内核，却经久不息地释放出无限的能量，让历代的读者和作者都能从中<b><big>不断获取不畏艰难、不息地追求理想和爱情的巨大动力</b></big>。这可以从无数篇后代作品都深受其影响的历史中，得到最好的印证。</p><hr><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><p>由于担心冷场，所以我提前制作了这个<code>随机点名器</code>:</p><center><big><p id="p1">结果产生区</p></center></big><script>function ChangeText(){    document.getElementById("p1").innerHTML="已从六班学生.xls中抽取结果如下:<br>抽取次数:6472<br>最高出现次数:973<br>名称:韩旭豪";}</script><center><input type="button" onclick="ChangeText()" value="随机点名器" /></center><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个小故事</title>
    <link href="/lv/"/>
    <url>/lv/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220213_195003_983.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><p>“是，他的味道呢。”</p><p>微风吹动，悬崖边上的莫妮卡狡猾地嬉笑道，</p><p>背后是翻涌着的花海，她闭上双眼，细嗅着飘来的一股股香气；或是，找寻着某个人的气息。</p><p>尽管面前是万丈深渊，但莫妮卡却丝毫没有畏惧，因为她知道——</p><p>“来了！”</p><p>从这甜得让人眩晕的花香中，她猛然闻出——应该说是感应——一个熟悉得不能再熟悉的味道。</p><p>“那，我要来咯！”</p><p>莫妮卡的忽闪了一下琥珀色的眼睛，随即便从悬崖之巅一跃而起，携起许多花瓣与她飞舞。</p><p>下坠。下坠。似乎是无止境的下坠。</p><p>而莫妮卡却沉浸其中，沉浸在花之旋风里。</p><p>她长长的白色裙摆与这些顽皮的花瓣纠缠着，如同五彩颜料打翻在洁白画布上一样。</p><p>突然，一条强壮的手臂撑起了莫妮卡娇小的身体，她不再下坠——</p><p>“你呀，才追上来么？”</p><p>莫妮卡缓缓睁开双眼，而脸颊已经变得绯红。</p><p>“恩，无论你在哪，我都会追上的。”</p><hr><p>我是<strong>听话的便当</strong>.</p><p><img src="/img/thdbd.jpg"></p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>让你的Ubuntu更有果子味</title>
    <link href="/bu/"/>
    <url>/bu/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20220201231745.png">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先,祝各位读者新年快乐!🥳</p><p>如果老板们有闲钱,不妨给正在码字的便当一个奖励!🌑</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201050242.png"></p><p>前几天写了一篇Ubuntu的入门使用集,</p><p>十分的实用!</p><p>而今天,我们主要介绍一些<code>浮于外表</code>的东西—</p><p>通过安装主题让你的Ubuntu充满果子味!(指苹果)</p><p>最后的结果:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201050754.png" alt="差不多是这样的"></p><p>如果你心动了,那就接着往下看吧!</p><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>一个Ubuntu系统的设备.</li></ul><hr><h2 id="第一步-下载工具"><a href="#第一步-下载工具" class="headerlink" title="第一步 下载工具"></a>第一步 下载工具</h2><p>打开终端,输入以下指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository universe</span><br><span class="line"></span><br><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201051948.png" alt="如图所示"></p><p>以及</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-shell-extensions</span><br><span class="line"></span><br><span class="line">sudo apt install dconf-editor</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201052245.png"></p><p>至此,工具下载完毕.</p><hr><h2 id="第二步-下载资源"><a href="#第二步-下载资源" class="headerlink" title="第二步 下载资源"></a>第二步 下载资源</h2><ul><li>主题:(能让窗口的右上角变成苹果的三个点)</li></ul><p>打开这个网址: <a href="https://www.gnome-look.org/p/1241688/">https://www.gnome-look.org/p/1241688/</a></p><p>选择前两个文件下载(一个也行,<code>Dark</code>是黑色版本,比较好看)</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201053209.png"></p><hr><ul><li>图标:(让一些软件和文件图标变样,不过我感觉不好看)</li></ul><p>打开这个网址: <a href="https://www.gnome-look.org/p/1102582/">https://www.gnome-look.org/p/1102582/</a></p><p>选择第二个<code>Cupertino-Catalina</code>下载:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201053642.png"></p><hr><ul><li>顶栏:(左上角加上苹果图标)</li></ul><p>打开这个网址: <a href="https://www.gnome-look.org/p/1220826/">https://www.gnome-look.org/p/1220826/</a></p><p>同理,选择前两个文件下载(一个也行,<code>Dark</code>是黑色版本,比较好看)</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201054040.png"></p><hr><h2 id="第三步-解压与移动"><a href="#第三步-解压与移动" class="headerlink" title="第三步 解压与移动"></a>第三步 解压与移动</h2><p>如果都选择下载的话,现在你的下载文件夹中应该有三个压缩包:(我没下载图标,因为不太好看)</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201054440.png"></p><p>打开终端,输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nautilus</span><br></pre></td></tr></table></figure><p>之后会弹出来一个窗口:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201054659.png"></p><p>点击<code>文件系统根目录</code>,随后按下快捷键<code>Ctrl L</code>.</p><p>然后输入这个路径:</p><p><strong>&#x2F;usr&#x2F;share&#x2F;themes</strong></p><p>然后把<code>主题</code>的那个压缩包移动进去并解压:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201055106.png"></p><hr><p><code>图标</code>的压缩包与<code>主题</code>的操作方式一样,只不过<code>图标</code>的路径是:</p><p><strong>&#x2F;usr&#x2F;share&#x2F;icons</strong></p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201055316.png"></p><hr><p><code>顶栏</code>这个方式有些不同:</p><p>我们退出刚刚的那个文件管理器,点击系统自带的<code>文件</code>:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201055604.png"></p><p>点击<code>显示隐藏文件</code>,或者按<code>Ctrl H</code>,</p><p>随后新建一个名为<code>.themes</code>的文件夹:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201055731.png"></p><p>然后把顶栏的压缩包解压进去.</p><hr><p>随后,搜索<code>Tweak</code>这个软件并打开:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201060006.png"></p><p>之后更换我们刚刚下载的主题,图标即可!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201060140.png"></p><p class="note note-info">如果不显示的话请重启电脑,Shell用户主题未启用是正常现象,接下来会说明启用方法(Shell用户主题就是我上面说的顶栏)</p><hr><h2 id="第四步-设置"><a href="#第四步-设置" class="headerlink" title="第四步 设置"></a>第四步 设置</h2><p>现在已经有一些果子的雏形了,不过应用栏什么的还在侧边,或者在底边但是无法居中,</p><p>我们接下来要做的就是打开dconf编辑器:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201060955.png"></p><p>按下快捷键<code>Ctrl L</code>,输入路径:</p><p><strong>&#x2F;org&#x2F;gnome&#x2F;shell&#x2F;extensions&#x2F;dash-to-dock&#x2F;</strong></p><p>翻动到下方这个位置:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201061442.png"></p><p>把这两个有<code>autohide</code>的东西打开;</p><hr><p>接着往下翻动到有<code>dock position</code>的地方,并且点进去:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201061651.png"></p><p>关闭<code>默认</code>,选择<code>bottom</code>:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201061810.png"></p><p>然后应用栏(dock)就会变到下面了!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201062018.png"></p><p>接着我们返回上一级,在<code>dock position</code>的下面有一个选项<code>extend-height</code>,我们把它关闭掉:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201062204.png"></p><p>然后应用栏就会居中了!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201062241.png"></p><p>如果你认为应用图标太大,可以点击<code>dash-max-icon-size</code>修改大小:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201062425.png"></p><p>随后,关闭dconf编辑器即可.</p><hr><h2 id="第五步-扩展"><a href="#第五步-扩展" class="headerlink" title="第五步 扩展"></a>第五步 扩展</h2><p>我们打开<code>优化（Tweak）</code>，在<code>扩展</code>中打开这三个选项：</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201224111.png"></p><p>随后重新启动一下，就会发现,原先灰色的Sehll主题可以选择了:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201224423.png"></p><p>至此.我们的果子味Ubuntu桌面,就安装好啦!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/20220201225052.png"></p><hr><p><img src="/img/thdbd.jpg"></p><p>我是<strong>听话的便当</strong>.</p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次接触Ubuntu的各种技巧</title>
    <link href="/uu/"/>
    <url>/uu/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/uu.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天在捣弄之前的旧电脑, </p><p>虽然最后没有做到像维修工那样尽善尽美的地步..</p><p><strong>但是,</strong></p><p>我还是通过U盘的方式运行了一个原生的Ubuntu系统!</p><p>具体怎么操作, 安装之后又有哪些使用技巧, 怎么安装一系列常用的国产软件(QQ, 微信, 钉钉等)</p><p>如果你对这些问题感兴趣, 就继续往下看吧!</p><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>开始之前, 起码要有的东西有:</p><ul><li><p>一台电脑(好坏没关系, 能开机就行)</p></li><li><p>一个U盘(大小起码16G, 32G或以上是最好的选择)</p></li></ul><p class="note note-danger">U盘在过程中需要被格式化, 请先备份里面的重要文件!</p><hr><h2 id="1-制作启动盘"><a href="#1-制作启动盘" class="headerlink" title="1.制作启动盘"></a>1.制作启动盘</h2><p>首先, 我们要去<a href="https://cn.ubuntu.com/download/desktop">Ubuntu官方中文网站</a>下载一个Ubuntu镜像.</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/1.png" alt="如图"></p><p><del>最好是选择<code>Ubuntu 20.04.3 LTS</code>, 是目前最稳定的一个版本.</del></p><p>最新稳定版出了: 22.04!</p><hr><p>下载完镜像后, 打开<a href="https://rufus.ie/zh/">Rufus官方中文网站</a>, 下载<code>Rufus</code>以制作启动盘.</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/2.png" alt="如图"></p><p class="note note-primary">Rufus无需安装, 打开.exe文件即可执行.</p><hr><p>打开<code>Rufus</code>后, 我们要进行以下操作</p><ol><li><p>插入U盘;</p></li><li><p><code>设备</code>选择刚刚插入的U盘;</p></li><li><p><code>引导类型</code>选择<code>镜像文件</code>, 并且选择中刚刚下载的Ubuntu镜像;</p></li><li><p>其它选项不用管, 如果你想长期使用Ubuntu, 可以把<code>持久分区</code>拉满(我就是);</p></li></ol><p class="note note-info">关于持久分区功能的详细介绍, 请看: https://zh.codepre.com/how-to-5341.html</p><ol start="5"><li><p>点击开始(会提示格式化设备);</p></li><li><p>完成时, 进度条会变绿, 此时点击<code>关闭</code>即可(不要再点一遍开始!!);</p></li><li><p>拔出U盘.</p></li></ol><hr><h2 id="2-启动Ubuntu"><a href="#2-启动Ubuntu" class="headerlink" title="2.启动Ubuntu"></a>2.启动Ubuntu</h2><p>步骤有以下几个:</p><ol><li>先搜索一下自己的电脑主板可以通过哪种方式启动U盘系统盘;</li></ol><p class="note note-info">这里是一些参考:</p><table><thead><tr><th>主板品牌</th><th>启动按键</th><th>笔记本品牌</th><th>启动按键</th><th>台式机品牌</th><th>启动按键</th></tr></thead><tbody><tr><td>华硕主板</td><td>F8</td><td>联想笔记本</td><td>F12</td><td>联想台式机</td><td>F12</td></tr><tr><td>技嘉主板</td><td>F12</td><td>宏基笔记本</td><td>F12</td><td>惠普台式机</td><td>F12</td></tr><tr><td>微星主板</td><td>F11</td><td>华硕笔记本</td><td>ESC</td><td>宏基台式机</td><td>F12</td></tr><tr><td>映泰主板</td><td>F9</td><td>惠普笔记本</td><td>F9</td><td>戴尔台式机</td><td>ESC</td></tr><tr><td>梅捷主板</td><td>ESC或F12</td><td>联想Thinkpad</td><td>F12</td><td>神舟台式机</td><td>F12</td></tr><tr><td>七彩虹主板</td><td>ESC或F11</td><td>戴尔笔记本</td><td>F12</td><td>华硕台式机</td><td>F8</td></tr><tr><td>华擎主板</td><td>F11</td><td>神舟笔记本</td><td>F12</td><td>方正台式机</td><td>F12</td></tr><tr><td>斯巴达克主板</td><td>ESC</td><td>东芝笔记本</td><td>F12</td><td>清华同方台式机</td><td>F12</td></tr><tr><td>昂达主板</td><td>F11</td><td>三星笔记本</td><td>F12</td><td>海尔台式机</td><td>F12</td></tr><tr><td>双敏主板</td><td>ESC</td><td>IBM笔记本</td><td>F12</td><td>明基台式机</td><td>F8</td></tr><tr><td>翔升主板</td><td>F10</td><td>富士通笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>精英主板</td><td>ESC或F11</td><td>海尔笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>冠盟主板</td><td>F11或F12</td><td>方正笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>富士康主板</td><td>ESC或F12</td><td>清华同方笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>顶星主板</td><td>F11或F12</td><td>微星笔记本</td><td>F11</td><td></td><td></td></tr><tr><td>铭瑄主板</td><td>ESC</td><td>明基笔记本</td><td>F9</td><td></td><td></td></tr><tr><td>盈通主板</td><td>F8</td><td>技嘉笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>捷波主板</td><td>ESC</td><td>Gateway笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>Intel主板</td><td>F12</td><td>eMachines笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>致铭主板</td><td>F11</td><td>苹果笔记本</td><td>长按”option”键</td><td></td><td></td></tr></tbody></table><p>(我的主机是华硕, 但是ESC也能启动)</p><ol start="2"><li><p>把电脑关机, 并且插入U盘</p></li><li><p>开机, 在显示主板画面的时候迅速按几下<code>启动快捷键</code>(参照上方表格)</p></li><li><p>随后, 进入这个画面的时候, 选择<code>Ubuntu</code>(就是第一项), 然后回车:</p></li></ol><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/3.jpg" alt="如图"></p><p>然后进入非常精致的开机画面(华硕是这样):</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/4.jpg" alt="如图"></p><ol start="5"><li>之后, 成功地进入Ubuntu!</li></ol><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/5.png" alt="如图"></p><p>看到上图这个画面后, 可以选择直接点击右上角的叉关闭(如果不打算安装Ubuntu在本地的话);</p><p>如果要安装以长期使用, 会经历一个比较复杂的分区过程:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/5.jpg" alt="如图"></p><ul><li><p>如果要分区, 最好选择新外接一个硬盘, 使用原电脑的硬盘会导致数据丢失;</p></li><li><p>如果在上面的Rufus制作过程中, 选择了<code>持久分区</code>, 并且<code>持久分区</code>比较大时, 无需安装即可直接使用;</p></li><li><p>不能将新系统安装到启动盘上, 不然格式化的时候, 安装也在进行, 这两个过程是<code>冲突</code>的.</p></li></ul><hr><h2 id="3-使用Ubuntu"><a href="#3-使用Ubuntu" class="headerlink" title="3.使用Ubuntu"></a>3.使用Ubuntu</h2><h3 id="内置"><a href="#内置" class="headerlink" title="内置"></a>内置</h3><ul><li><p>Firefox(火狐)浏览器;</p></li><li><p>基础的播放器(Rhythmbox)和文本编辑器(Gedit);</p></li><li><p>办公套件(Libreoffice);</p></li><li><p>默认Bash的强大的终端.</p></li></ul><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>Ubuntu安装软件的方式主要是<code>apt</code>, 而国内连接apt官方的源时会不太稳定.</p><p>因此我们可以打开终端, 输入以下指令将apt源换为清华的:</p><blockquote><p>人生中唯一一次和清华扯上关系…</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&quot;s@http://.*archive.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g&quot;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&quot;s@http://.*security.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g&quot;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h3 id="语言与输入法"><a href="#语言与输入法" class="headerlink" title="语言与输入法"></a>语言与输入法</h3><p>主要就是一些设置问题!</p><p>首先我们点击主页面左下角那个九个点的东西:, 并且在搜索框输入<code>settings</code>:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/6.png" alt="如图"></p><p>之后滚动到最下面<code>Region &amp; Language</code></p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/7.png" alt="如图"></p><p>把<code>language</code>改成<code>China</code>或者<code>Chinese</code>(有哪个就选哪个)</p><p><code>formats</code>是日期格式, 也可以修改;</p><p>改完语言后, 提示重启(绿色的<code>restart</code>), 点击之后会提示60秒后注销, 或者点击<code>log out</code>直接注销即可.</p><p>重启之后, 回到刚刚设置的页面, 选择输入法:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/8.png" alt="如图"></p><p>选择<code>智能拼音</code>即可.</p><p>时间什么的, 也可以在设置找到!</p><blockquote><p>建议使用fcitx5输入法, 安装参考这篇文章: <a href="https://muzing.top/posts/3fc249cf/">https://muzing.top/posts/3fc249cf/</a></p></blockquote><h3 id="代理工具-Clash"><a href="#代理工具-Clash" class="headerlink" title="代理工具(Clash)"></a>代理工具(Clash)</h3><p><code>Clash for Windows</code>的制作者同时也做了适用于Linux的发行版!</p><p>官方地址: <a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p><p>使用方法:</p><p>点击下方对应链接下载0.20.7版本的压缩包;</p><p><a href="https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.7/Clash.for.Windows-0.20.7-arm64-linux.tar.gz">ARM架构</a></p><p><a href="https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.7/Clash.for.Windows-0.20.7-x64-linux.tar.gz">X64架构</a></p><p class="note note-info">直接点击链接即可, 已经使用了加速下载.</p><ul><li><p>下载完成后, 右键此文件, 解压缩;</p></li><li><p>打开解压缩完的文件夹;</p></li></ul><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/11.png" alt="如图"></p><ul><li><p>右键空白处, 在终端打开;</p></li><li><p>输入指令:</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cfw</span><br></pre></td></tr></table></figure><blockquote><p>或者右键cfw这个文件, 修改属性为<code>可执行</code>, 然后双击打开.</p></blockquote><ul><li>随后会弹出界面:</li></ul><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/9.png" alt="如图"></p><p>之后的操作参考<a href="/cfw/#%E5%90%AF%E5%8A%A8">这篇文章</a>.</p><hr><h3 id="截屏-录屏"><a href="#截屏-录屏" class="headerlink" title="截屏&#x2F;录屏"></a>截屏&#x2F;录屏</h3><p>有多种方式可以截屏:</p><ol><li>快捷键:<ul><li>如果<strong>需要保存截屏</strong><ul><li>特定区域: <code>Shift + PrintScrennSysRq</code> </li><li>整个屏幕: <code>PrintScrennSysRq</code></li><li>当前窗口: <code>ALT + PrintScrennSysRq</code></li></ul></li><li>如果<strong>需要保存到剪切板</strong><ul><li>特定区域: <code>Ctrl + Shift + PrintScrennSysRq</code> </li><li>整个屏幕: <code>Ctrl + PrintScrennSysRq</code></li><li>当前窗口: <code>Ctrl + ALT + PrintScrennSysRq</code></li></ul></li></ul></li></ol><p class="note note-info">规律:保存到剪切板的有Ctrl.</p><blockquote><p>Ubuntu 22.04中, 这些快捷键部分是失效的, 取而代之的是按下<code>PrintScrennSysRq</code>键后, 出现一个可选功能的截屏&#x2F;录屏界面, 即<code>screenshot</code>软件.</p></blockquote><ol start="2"><li>内置的截屏工具:</li></ol><p>搜索<code>screenshot</code>即可:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/screenshot.png" alt="如图"></p><hr><p>Ubuntu自带录屏工具, 如果你只想录一小会儿屏幕时, 可以同时按快捷键:</p><p><code>Ctrl + Shift + ALT + R</code></p><blockquote><p>Ubuntu 22.04中, 通过按下<code>PrintScrennSysRq</code>键或打开<code>screenshot</code>软件可以选择录屏.</p></blockquote><p>但是自带的录屏工具无法录制声音, 并且录制后的格式是<code>webm</code>.</p><blockquote><p>这里有一篇文章: <a href="/ubw">为Ubuntu编写一个录屏格式自动转换脚本</a>.</p></blockquote><p>所以建议大家安装世界上最强大的<code>开源免费</code>录屏&#x2F;推流软件: <a href="https://obsproject.com/">OBS Studio</a></p><p>安装可在终端输入指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:obsproject/obs-studio</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ffmpeg obs-studio</span><br></pre></td></tr></table></figure><p>使用方法全平台通用.</p><blockquote><p>需要注意, OBS在后台时, 时间长了会占用大量GPU资源.</p></blockquote><hr><h3 id="一些软件的安装"><a href="#一些软件的安装" class="headerlink" title="一些软件的安装"></a>一些软件的安装</h3><hr><h4 id="通讯软件的Ubuntu版本"><a href="#通讯软件的Ubuntu版本" class="headerlink" title="通讯软件的Ubuntu版本"></a>通讯软件的Ubuntu版本</h4><p>Telegram, 微信, 钉钉和QQ官方都有其Ubuntu版本(QQ的比较丑)</p><hr><h5 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h5><p>点击链接下载:</p><p><a href="http://archive.ubuntukylin.com/software/pool/partner/weixin_2.1.1_amd64.deb">http://archive.ubuntukylin.com/software/pool/partner/weixin_2.1.1_amd64.deb</a></p><p>这是优麒麟和微信合作推出的微信, 能支持一些最基本的功能.</p><p>在下载好的文件所在文件夹右键空白处打开终端, 输入指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure><hr><h5 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h5><ol><li>(不推荐)直接在应用商店搜索<code>Telegram</code>下载:</li></ol><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/sft.png" alt="如图"></p><ol start="2"><li>点击链接下载: <a href="https://telegram.org/dl/desktop/linux">https://telegram.org/dl/desktop/linux</a></li></ol><p>下载完成后右键解压, 随后会发现两个文件:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/tg.png" alt="如图"></p><p>双击那个<code>Telegram</code>即可.</p><hr><h5 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h5><p>点击下方链接下载:</p><p><a href="https://dtapp-pub.dingtalk.com/dingtalk-desktop/xc_dingtalk_update/linux_deb/Release/com.alibabainc.dingtalk_1.4.0.20829_amd64.deb">AMD架构</a></p><p><a href="https://dtapp-pub.dingtalk.com/dingtalk-desktop/xc_dingtalk_update/linux_deb/Release/com.alibabainc.dingtalk_1.4.0.20829_arm64.deb">ARM架构</a></p><p>在下载好的文件所在文件夹右键空白处打开终端, 输入指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure><hr><h5 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h5><ol><li>官方的垃圾版:</li></ol><p>选择合适的安装包: <a href="https://im.qq.com/linuxqq/download.html">https://im.qq.com/linuxqq/download.html</a></p><p>官方在下方也贴有安装方式.</p><ol start="2"><li>好看又好用的<code>Icalingua ++</code>:</li></ol><p>点击下方链接下载2.7.7版本:</p><p><a href="https://ghproxy.com/https://github.com/Icalingua-plus-plus/Icalingua-plus-plus/releases/download/v2.7.7/Icalingua++-2.7.7.AppImage">APPimage</a></p><p><a href="https://ghproxy.com/https://github.com/Icalingua-plus-plus/Icalingua-plus-plus/releases/download/v2.7.7/icalingua_2.7.7_amd64.deb">AMD架构</a></p><p><a href="https://ghproxy.com/https://github.com/Icalingua-plus-plus/Icalingua-plus-plus/releases/download/v2.7.7/icalingua_2.7.7_arm64.deb">ARM架构</a></p><p>后两者需要在下载好的文件所在文件夹打开终端, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure><blockquote><p>APPimage是一种可以<code>跨所有Linux发行版</code>的软件格式, 双击即可运行, 无需安装.</p></blockquote><blockquote><p>官方仓库: <a href="https://github.com/Icalingua-plus-plus">https://github.com/Icalingua-plus-plus</a></p></blockquote><hr><h4 id="一般通用的方法"><a href="#一般通用的方法" class="headerlink" title="一般通用的方法:"></a>一般通用的方法:</h4><h5 id="应用商店"><a href="#应用商店" class="headerlink" title="应用商店"></a>应用商店</h5><p>Ubuntu自带的应用商店使用的是<code>snap</code>源:</p><p>也就是说, 你可以安装任何在 <a href="https://snapcraft.io/">https://snapcraft.io/</a> 上找到的软件.</p><p>在每一个软件页面, 都有详细的安装方式:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/az.png" alt="安装"></p><p>这种安装形式, 可以类比为安卓里, 从谷歌商店下载软件.</p><hr><h5 id="deb"><a href="#deb" class="headerlink" title="deb"></a><code>deb</code></h5><p>直接双击文件或者在文件所在文件夹右键空白处打开终端, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i 名字.deb</span><br></pre></td></tr></table></figure><p>这种安装形式, 可以类比为安卓里, 下载别人发给你的安装包(.apk)</p><hr><h5 id="AppImage"><a href="#AppImage" class="headerlink" title="AppImage"></a><code>AppImage</code></h5><p>一种很强大的跨平台的软件格式, 修改文件权限为可执行后双击即可运行.</p><p>或在终端输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xxx.appimage</span><br></pre></td></tr></table></figure><hr><h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><p>下载官网提供的压缩包通常有两种可能:</p><ul><li>如果解压缩完, 文件很少, 或是看见的可执行文件, 点击可执行文件即可;</li></ul><blockquote><p>说明你下载的不是源码.</p></blockquote><ul><li>如果解压缩完是一大堆文件, 还没有可执行文件的, 一般就需要自己编译了.</li></ul><hr><p><strong>举个例子:</strong></p><p>我的nano版本是4.8:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/4.8.png" alt="版本"></p><p>而我现在要安装<code>nano 6.0.0</code>, 官方提供了<code>tar.xz</code>结尾的一个文件, </p><p>解压缩之后发现了一些有特征的文件:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/nn.png" alt="nano"></p><ul><li><p><code>configure</code>文件:用来设置一些配置, 比如安装路径什么的;</p></li><li><p><code>Makefile</code>文件:可以编译的文件.</p></li></ul><p>那么这就是一个源码包了.</p><hr><p>第一步, 输入指令进行检查和配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p class="note note-info">也可以输入 ./configure --help 查看详细配置帮助.</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/wr.png" alt="报错"></p><p>但是!如上图可以看到, 报错了:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure: error: </span><br><span class="line">  *** No curses lib was found.  Please install the curses header files</span><br><span class="line">  *** from libncurses-dev (Debian),  ncurses-devel (Fedora),  or similar.</span><br><span class="line">  *** (Or install ncurses from https://ftp.gnu.org/gnu/ncurses/.)</span><br></pre></td></tr></table></figure><p>具体就是让我们再下载安装一个啥, </p><p>好, 那就打开他这个链接安装吧!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/uc.png" alt="安装"></p><p>如上图, 这个东西也是一个<code>tar.xz</code>包, 我们给他解压缩, 发现和<code>nano</code>解压缩完有异曲同工之处:</p><p>那我们也编译一下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/sc.png" alt="成功"></p><p>可以看到, 这次的成功了!</p><p>接下来, 我们输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>之后进入编译, 会等待一会儿.</p><p>编译完成后, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p>可以看到, 又报错了:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/sudo.png" alt="报错"></p><p>权限不足, 我们需要在指令前加上<code>sudo</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>好了!这次不知道成功与否.但是看样子没报错.</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/unk.png"></p><p>那么我们就继续安装<code>nano</code>吧</p><hr><p>回到nano的文件夹, </p><p>再次输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>成功了!这次检查通过:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/nsc.png"></p><p>按照上面一样的步骤, 我们输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>不出意料的通过了!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/tongg.png"></p><p>最后, 输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/unn.png"></p><p>不知道成功与否, 我们重新打开终端验证一下:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E6%88%90%E5%8A%9F.png"></p><p>成功了!升级到了6.0.0版本!</p><hr><p>那如果我们想卸载呢?</p><p>只需在编译完的文件夹打开终端输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure><p>然后, 就显示没有nano这个选项了:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/zero.png"></p><hr><h3 id="卡死处理-关机"><a href="#卡死处理-关机" class="headerlink" title="卡死处理&#x2F;关机"></a>卡死处理&#x2F;关机</h3><p>Ubuntu可能会出现突然卡死的情况.</p><blockquote><p>当系统负载太大时.</p></blockquote><p>这时, 千万不要直接拔电源!</p><p>可以按以下的操作进行快捷键重启:</p><p>同时按住<code>Ctrl ALT PrintScreen</code>三个键, 几秒钟之后松开<code>PrintScreen</code>, 然后按照顺序输入以下字母:<code>r e i s u b</code>(反过来是<code>busier</code>)</p><p>然后你的系统就会自动关机了.</p><hr><p>正常关机的方式:点击右上角<code>关机/注销</code>.</p><hr><p><img src="/img/thdbd.jpg"></p><p>我是<strong>听话的便当</strong>.</p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机？-&gt;电脑！</title>
    <link href="/pc/"/>
    <url>/pc/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20220101_222025_290.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新年快乐！🌈✨✨</p><p>最近入了一台<code>新电脑</code></p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_20220102_004616.png" alt="如图所示"></p><p>怎么样?是不是非常美观呢?但实际上——</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2022-01-02-08-49-22-26.jpg" alt="如图所示"></p><p>哈哈哈哈哈，居然是在手机里.</p><p>或许你要问了:这是云电脑么？还是什么远程桌面或是vps桌面?</p><p>都不是！这是一个在本地运行的电脑(可以想象成虚拟机的性质)！</p><p>如果你手头缺一台电脑，或是手机配置高得废不完的，那么这篇文章非常适合你！</p><blockquote><p>Tips:手机需有至少5GB空间，4GB内存，如果不确定，请看我的(辣鸡)配置，比这个高就可以跑🌚</p></blockquote><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2022-01-02-09-08-57-02.jpg" alt="my"></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为跟手机扯上关系了，那必然请出我们的<code>Termux</code>，</p><blockquote><p>如果你还没有安装<code>Termux</code>，<a href="https://f-droid.org/repo/com.termux_117.apk">点击这里安装</a></p></blockquote><p>其次，我们需要一个<code>可操作的桌面</code>，因此还需要下载一个<code>VNC Viewer</code>，</p><blockquote><p>如果你还没有安装<code>VNC Viewer</code>，<a href="https://wangzhuoke.lanzoul.com/iJ17My8z3qb">点击这里安装</a>， 密码:666</p></blockquote><p>这就是我们”电脑”所需的所有”硬件”，</p><p>另一方面，我们需要<code>在容器中</code>进行这一系列操作，所以要跑一个脚本安装容器，</p><p>其次，安装桌面，也需要跑一个脚本，</p><p>至此，这篇文章的思路就说明完了！</p><hr><h2 id="安装-进入-容器"><a href="#安装-进入-容器" class="headerlink" title="安装(进入)容器"></a>安装(进入)容器</h2><ul><li><p>如果你进行过<code>pgm机器人在Termux的搭建</code>，则不需要进行这一步，直接<code>./start-ubuntu.sh</code>即可</p></li><li><p>如果没有:</p></li></ul><p>打开Termux，执行脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install wget openssl-tool proot -y &amp;&amp; hash -r &amp;&amp; wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh &amp;&amp; bash ubuntu.sh</span><br></pre></td></tr></table></figure><p>等宽字体的此脚本:</p><p><code>pkg install wget openssl-tool proot -y &amp;&amp; hash -r &amp;&amp; wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh &amp;&amp; bash ubuntu.sh</code></p><blockquote><p>不能直接复制的问题我会通过更换主题的方式尽快解决！但是这个主题实在是太好看了🌚</p></blockquote><p>之后<code>./start-ubuntu.sh</code>进入即可.</p><hr><h2 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h2><p>在<code>容器</code>中，执行脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/EXALAB/Anlinux-Resources/raw/master/Scripts/DesktopEnvironment/Heavy/KDE/Ubuntu/de-ubuntu-kde.sh &amp;&amp; bash de-ubuntu-kde.sh</span><br></pre></td></tr></table></figure><p>等宽字体的此脚本:</p><p><code>wget https://github.com/EXALAB/Anlinux-Resources/raw/master/Scripts/DesktopEnvironment/Heavy/KDE/Ubuntu/de-ubuntu-kde.sh &amp;&amp; bash de-ubuntu-kde.sh</code></p><p>此过程总共会安装1628个依赖，所以耐心等待吧~最后几步的时候会提示选择语言什么的，Chinese即可，</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2022-01-01-15-42-33-18.jpg" alt="依赖"></p><p>同时，会设置<code>VNC Viewer</code>的密码，需要一个六位数以上的字符串.</p><blockquote><p>此脚本安装的是<code>KDE桌面</code>，如有其它需求，请安装AnLinux，<a href="https://wangzhuoke.lanzoul.com/i4mecy8zble">点击这里安装</a>，密码:666</p></blockquote><hr><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>执行完上一个脚本后，默认是启动了服务的，</p><p>此时我们打开<code>VNC Viewer</code>，点击右下角的<code>+</code>号，</p><p>在<code>Address</code>填入<code>127.0.0.1:5901</code>，name随便，</p><p>接着就开始连接啦！提示输入密码的时候，输入即可.</p><p>停止:<code>vncserver-stop</code></p><p>启动:<code>vncserver-start</code></p><hr><p>我是<strong>听话的便当</strong>.</p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Termux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我有两个梦</title>
    <link href="/dm/"/>
    <url>/dm/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211230_011239.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><hr><p>我是<strong>听话的便当</strong>.</p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>nano编辑器的简明完整用法</title>
    <link href="/nn/"/>
    <url>/nn/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211228_124708_035.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><p>如果看过我的其它博文，时不时会发现<code>nano</code>的身影，</p><p>而我对它的介绍，往往只有:</p><p><em>Ctrl O保存，Ctrl X退出</em></p><p>直到今天——</p><hr><h1 id="nano是什么"><a href="#nano是什么" class="headerlink" title="nano是什么"></a>nano是什么</h1><p>像往常一样，我们先来看看<a href="https://zh.wikipedia.org/zh-hans/Nano_%28%E6%96%87%E5%AD%97%E7%B7%A8%E8%BC%AF%E5%99%A8%29">Wikipedia的介绍</a>:</p><blockquote><p>nano (文字编辑器)<br>nano是Unix和类Unix系统中的一个文本编辑器，是Pico的复制品（clone）。<br>nano的目标是类似Pico的全功能但又易于使用的编辑器。<br>nano是遵守GNU通用公共许可证的自由软件，自从2.0.7版发布，许可证从GPLv2升级到GPLv3。</p></blockquote><p>嗯，简洁明了开门见山，<code>nano</code>就是一个<code>终端文本编辑器</code>，可以理解为Windows里的<code>NotePad++</code>或<code>记事本</code>.</p><p>它相比较于<code>vim</code>，没有那么多复杂的东西(例如<code>模式</code>)，打开文件后可以直接编辑，方便大众使用.</p><hr><h1 id="nano的安装"><a href="#nano的安装" class="headerlink" title="nano的安装"></a>nano的安装</h1><ul><li>对于<code>Debian</code>系的用户(含<code>Termux</code>):</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nano</span><br></pre></td></tr></table></figure><ul><li>对于<code>yum</code>系的用户:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nano</span><br></pre></td></tr></table></figure><hr><h1 id="nano的基础用法"><a href="#nano的基础用法" class="headerlink" title="nano的基础用法"></a>nano的基础用法</h1><ul><li>查看版本号:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano --version</span><br></pre></td></tr></table></figure><ul><li>编辑一个文件:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano 文件名(可含路径)</span><br></pre></td></tr></table></figure><ul><li>从特定行数开始编辑:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano +行数 文件名 //加号不能省略</span><br></pre></td></tr></table></figure><blockquote><p>此文件可以是<code>已经存在</code>或<code>尚未创建</code>的，但如果<code>包含路径</code>，需要先确定<code>存在路径</code>.</p></blockquote><ul><li><p>移动光标:</p><ul><li>对于Termux用户:</li></ul></li></ul><p>快捷栏的<code>上下左右</code>移动按钮.</p><ul><li>对于电脑用户:<br>光标或键盘的<code>上下左右</code>键即可.</li></ul><hr><h1 id="nano的快捷键"><a href="#nano的快捷键" class="headerlink" title="nano的快捷键"></a>nano的快捷键</h1><h2 id="1-跳转"><a href="#1-跳转" class="headerlink" title="1. 跳转"></a>1. 跳转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl _ 行数</span><br></pre></td></tr></table></figure><p><strong>快速跳转到某一行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl V</span><br></pre></td></tr></table></figure><p><strong>跳转到下一页</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl Y</span><br></pre></td></tr></table></figure><p><strong>跳转到上一页</strong></p><h2 id="2-搜索"><a href="#2-搜索" class="headerlink" title="2. 搜索"></a>2. 搜索</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl W 关键词</span><br></pre></td></tr></table></figure><p><strong>搜索关键词(输入关键词后回车，寻找下一个关键词输入<code>ALT W</code>)</strong></p><h2 id="3-替换"><a href="#3-替换" class="headerlink" title="3. 替换"></a>3. 替换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl \ 关键词</span><br></pre></td></tr></table></figure><p><strong>替换关键词(输入完替换词后，若输入A，则全局替换)</strong></p><h2 id="4-复制，剪切与粘贴"><a href="#4-复制，剪切与粘贴" class="headerlink" title="4. 复制，剪切与粘贴"></a>4. 复制，剪切与粘贴</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALT a</span><br></pre></td></tr></table></figure><p><strong>设置要复制的段落的开头锚(取消选择输入<code>Ctrl 6</code>)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALT 6</span><br></pre></td></tr></table></figure><p><strong>将所选段落复制到剪切板</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl K</span><br></pre></td></tr></table></figure><p><strong>将所选段落剪切到剪切板</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl U</span><br></pre></td></tr></table></figure><p><strong>将复制内容粘贴到光标所在位置</strong></p><h2 id="5-插入文本"><a href="#5-插入文本" class="headerlink" title="5. 插入文本"></a>5. 插入文本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl R</span><br></pre></td></tr></table></figure><p><strong>读取其它文件并插入当前位置</strong></p><h2 id="6-保存，退出"><a href="#6-保存，退出" class="headerlink" title="6. 保存，退出"></a>6. 保存，退出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl O</span><br></pre></td></tr></table></figure><p><strong>保存，会提示是否更改文件名，回车则不修改</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl X</span><br></pre></td></tr></table></figure><p><strong>退出，如果没有保存会提示是否要保存</strong></p><h2 id="7-其它"><a href="#7-其它" class="headerlink" title="7. 其它"></a>7. 其它</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALT #</span><br></pre></td></tr></table></figure><p><strong>显示行数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl C</span><br></pre></td></tr></table></figure><p><strong>显示光标位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALT U</span><br></pre></td></tr></table></figure><p><strong>撤销操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALT E</span><br></pre></td></tr></table></figure><p><strong>重做</strong></p><hr><h1 id="nano的高级用法"><a href="#nano的高级用法" class="headerlink" title="nano的高级用法"></a>nano的高级用法</h1><blockquote><p>其实记得住上面这些快捷键就很高级了。。🌚</p></blockquote><h2 id="接下来的所有指令之前，都为ALT"><a href="#接下来的所有指令之前，都为ALT" class="headerlink" title="接下来的所有指令之前，都为ALT"></a>接下来的所有指令之前，都为<code>ALT</code></h2><p>X<br><code>辅助模式</code></p><p>C<br><code>持续显示游标位置</code></p><p>O<br><code>编辑多行</code></p><p>S<br><code>平滑式卷动画面</code></p><p>P<br><code>显示空格</code></p><p>Y<br><code>语法色彩高亮</code></p><p>H<br><code>智能HOME键(第一次Home跳到行首非空字符，第二次到行首)</code></p><p>I<br><code>自动缩进</code></p><p>K<br><code>剪切至行尾</code></p><p>L<br><code>长行转换</code></p><p>Q<br><code>输入的制表符转换为空格</code></p><p>B<br><code>备份文件</code></p><p>F<br><code>多重文件缓冲区</code></p><p>M<br><code>鼠标支持</code></p><p>N<br><code>不从DOS/Mac格式转换</code></p><p>Z<br><code>暂停</code></p><p>$<br><code>软换行</code></p><hr><h1 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考:"></a>文章参考:</h1><ul><li><a href="https://p3terx.com/archives/linux-nano-tutorial.html">https://p3terx.com/archives/linux-nano-tutorial.html</a></li><li><a href="https://www.polarxiong.com/archives/ubuntu-nano-shortcuts.html">https://www.polarxiong.com/archives/ubuntu-nano-shortcuts.html</a></li><li><a href="https://www.nano-editor.org/dist/latest/nano.html">官方文档</a></li></ul><hr><p>我是<strong>听话的便当</strong>.</p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo无法被渲染到Page的处理</title>
    <link href="/hx-w/"/>
    <url>/hx-w/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_215140_547.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>昨晚补充完整好博客文章后，用<a href="https://github.com/wzk0/quick-hexo">一键脚本</a>美滋滋地上传了，</p><p>结果今天早上打开博客的时候发现–</p><p>居然没更新上！！</p><p>我急忙查看了一下仓库的源代码，发现HTML的内容已经存在了，但并没有在<code>Github Pages</code>上出现，</p><p>这究竟是怎么回事呢?🤔我开始了如下的调查.</p><hr><h2 id="发现了原因"><a href="#发现了原因" class="headerlink" title="发现了原因"></a>发现了原因</h2><p>我们梳理一下整个过程(对于任意一种错误，我的处理方法通常都是先分析一波)——</p><ul><li><p>你的md文章，写好了，因为Hexo能成功渲染；</p></li><li><p>Hexo成功渲染，同时上传之前我已经预览了一遍，没有问题，说明HTML等(即<code>public文件夹</code>)也是好的；</p></li><li><p>Git没有问题，因为成功上传了；</p></li><li><p>仓库没有问题，内容都被修改成最新的了.</p></li></ul><p>那么<code>真相只有一个</code>！——</p><p><strong>是Github在渲染页面到Page的时候出错了！</strong></p><blockquote><p>Page指Github Pages</p></blockquote><hr><h2 id="找到了问题"><a href="#找到了问题" class="headerlink" title="找到了问题"></a>找到了问题</h2><p>于是我详细查看了仓库，发现了一个不同寻常的地方——</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211229_013211.jpg" alt="如图所示"></p><p>在<code>Actions(活动)</code>页面居然出现了错误情况！(红色和灰色)</p><blockquote><p>话说我之前从来没看过Github的这个页面，这次是随便翻的时候发现了🌚(遇到报错，先随便找找)</p></blockquote><p>我们打开看一下具体是什么问题:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211229_013622.jpg" alt="问题"></p><p>果然，问题与我无关，是<code>Github Pages Bot</code>出的错！</p><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>本来呢，到这个时候我都已经准备删库了.</p><blockquote><p>啥鬼问题，什么报错，我都没见过啊…好像很严重，还有什么<code>Docker</code>啊..居然还是等级<code>1</code>的报错！</p></blockquote><p>但是直到我发现了这个按钮——</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211229_013703.jpg" alt="按钮"></p><p>只需要点击一下然后等待下面变绿就可以啦！</p><blockquote><p>如果一下不行，那就两下</p></blockquote><hr><p>PS:还有一种可能存在的错误——Github连HTML文件都没更新.</p><p>那么请检查网络连接🌚或者Git是否要更新.</p><hr><p>(这篇有点水)</p><p>我是<strong>听话的便当</strong>.</p><p>Bye~❛‿˂̵✧</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一看就会的Git基础用法(Termux及Linux用户)</title>
    <link href="/gu/"/>
    <url>/gu/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211216_122618_748.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><p><strong>这篇文章的阅读技巧:</strong></p><ul><li>注意分界线，这样读文章下来会发现内容是一块一块的</li><li>注意标题大小区分</li></ul><hr><p>今天在Tg看见了一个频道主遇到的问题:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_144431_067.jpg" alt="问题"></p><p>什么?在线编辑无法用，只能删库重来了么??</p><p>这也太让人难受了吧！</p><p>因此，为了我们仓库的安全以及编辑的容易度，必须使用一种<code>更快更好更稳定的方法</code>.</p><p>所以今天，就要向大家科普一下<code>已经是老常客</code>却<code>很少物尽其用</code>的<code>Git</code>(对于我这种小白来说🌚)</p><hr><blockquote><p>Tips:按照小白通常<code>灵魂三问</code>的顺序说明</p></blockquote><h1 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h1><p>我们来看看<a href="https://zh.wikipedia.org/zh-hans/Git?wprov=sfla1">Wikipedia的说明</a></p><blockquote><p>Git<br>免费和开源的版本控制软件<br>是一个分散式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL释出。最初目的是为更好地管理Linux核心开发而设计。应注意的是，这与GNU Interactive Tools（一个类似Norton Commander（英语：Norton Commander）界面的文件管理器）不同。Git最初的开发动力来自于BitKeeper和Monotone。git最初只是作为一个可以被其他前端（比如Cogito或Stgit）包装的后端而开发的，但后来Git内核已经成熟到可以独立地用作版本控制。很多著名的软件都使用Git进行版本控制，其中包括Linux核心、X.Org服务器和OLPC内核等项目的开发流程。<br>Linus的又一个无心插柳柳成荫之作🌚(自己加的)</p></blockquote><p>那么Git和刚刚提到的频道主所说的<code>Github</code>有什么关系呢?</p><p>我们来看看一位知乎人的说法:</p><blockquote><p>Git 是版本控制软件，目前最先进最流行的.<br>Github 是一个网站，用于广大开发者开源自己的代码，也提供私有仓库的付费功能，而它采用的版本控制软件就是Git.</p></blockquote><p>似乎说的已经很明白了，其实:</p><p><strong>Git就相当于是Github的另一种使用方式(仅选取这两个对象来看)</strong></p><p>现在的Github，可以直接在网页端在线编辑，而网页端编辑的弊端也显而易见了(eg:可怜的频道主)</p><p>因此，我们使用Git这个工具来取代原先需要<code>在线编辑</code>，或是<code>拖拽选取文件</code>才能上传的方式.</p><h1 id="Git怎么下载"><a href="#Git怎么下载" class="headerlink" title="Git怎么下载"></a>Git怎么下载</h1><blockquote><p>如标题，不说明Windows用户的安装方法了</p></blockquote><p>只需要一行指令(<code>Termux</code>和<code>Ubuntu</code>用户):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install git</span><br></pre></td></tr></table></figure><p>如果是Termux用户，还可以再安装<code>nushell</code>这个生产力工具(其它用户自行搜索安装方法):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nushell</span><br></pre></td></tr></table></figure><blockquote><p>如果你还没有安装Termux，请从F-droid下载，或者<a href="https://f-droid.org/repo/com.termux_117.apk">点击这里快速下载</a></p></blockquote><h1 id="Git怎么使用"><a href="#Git怎么使用" class="headerlink" title="Git怎么使用"></a>Git怎么使用</h1><p><strong>重点来了！</strong></p><p>我们想想，平常使用Github的时候，要不然自己是<code>仓库的开发者</code>，要不然自己是<code>仓库的使用者</code>.</p><p>而Git是对于开发者而言的工具，也有两种方式:</p><ul><li>把本地的仓库上传变成Github的仓库.</li><li>把Github的仓库变成本地的仓库，编辑完再上传.</li></ul><p>差别就在于<code>建立仓库的方式</code>:</p><ul><li>在线建立</li><li>本地生成</li></ul><blockquote><p>这里推荐第一种，可以少输入几行指令🌚</p></blockquote><p>那么<code>在线建立</code>的方法十分简单，我们只需要打开github.com，再点击如图所示的<code>新建仓库标识按钮</code>即可:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_151214.jpg" alt="建立"></p><p>之后添加一个<code>README.md</code>(或者其它随便什么文件都行，因为仓库不能为空)</p><p>如图所示，随便这里面写点啥:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_152718.jpg" alt="README.md"></p><p>随后将仓库整到本地来，输入指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址.git</span><br></pre></td></tr></table></figure><blockquote><p>如果是他人的仓库，先<code>Fork</code>一份，再<code>clone</code>自己Fork的仓库</p></blockquote><hr><p>如果你在建库时，选择了<code>private(私有仓库)</code>，则会出现下面的提示:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_153122.jpg" alt="提示"></p><p>提示输入Github的用户名和密码，此时我们不能直接输入用户名和密码，不然一定会报错(因为Guthub已经取消了这种用户名密码明文登陆的方式)</p><p>我们要在<code>https://github.com/settings/tokens</code>这个网址生成一个<code>Personal access tokens</code>，随后复制这个tokens，在输入用户名和密码的时候直接粘贴就可以了.</p><blockquote><p>PS:用户名就是tokens，密码直接回车就行</p></blockquote><hr><p><code>本地生成</code>的话，只需要我们进入自己的本地仓库文件夹，输入指令即可:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>如图所示，即完成:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_151909.jpg" alt="完成"></p><hr><p>通过以上两种方式任意一种建立完仓库以后，我们该怎样在本地编辑之后并上传呢?</p><hr><h2 id="如果你选择了在线建立的那种方式"><a href="#如果你选择了在线建立的那种方式" class="headerlink" title="如果你选择了在线建立的那种方式:"></a>如果你选择了<code>在线建立</code>的那种方式:</h2><p>此时仓库里只有一个<code>README.md</code>文件，这时我们创建几个需要的文件以让这个README不再孤单:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch LICENSE  //创建许可证</span><br></pre></td></tr></table></figure><blockquote><p>此处省略编辑，粘贴等等工作…</p></blockquote><p>OK！一切准备都完成了！现在只需上传到Github！</p><p>通常，这时你的做法(电脑用户)应该会是:</p><ul><li>拖拽文件夹上传</li></ul><p>但是这种方法既慢，又有大小限制，且对Termux用户(无root)无用.</p><p>此时我们输入接下来的几个指令:</p><blockquote><p>安装完nushell的用户可以输入<code>nu</code>以进入<code>生产力模式</code>(其实nu比较方便的地方就是<code>对指令的记忆与自动补全功能</code>)</p></blockquote><blockquote><p>Tips:所有指令都是在<code>仓库的根目录</code>里执行的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add * .</span><br></pre></td></tr></table></figure><p>这个指令是什么意思呢?我们翻译一下:</p><ul><li><code>git</code>，指使用<code>git</code>，所以<code>git</code>此时做指令的主语；</li><li><code>add</code>，指<code>添加文件</code>，<code>add</code>做指令的谓语；</li><li><code>*</code>，指所有文件(通配符)，是指令的宾语；</li><li>添加所有文件到哪呢?<code>.</code>做宾语补足语，指把所有文件添加到<code>git文件缓存区</code>，<code>.</code>是对这个区的简便称呼；</li></ul><p>好了！我们已经把<code>仓库的所有文件</code>添加到<code>git缓存区</code>了，这个缓存区的名字是<code>.</code>！</p><hr><p>接下来，输入另一个指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;这是关于许可证的第一次提交！🦄✨🌈&quot;</span><br></pre></td></tr></table></figure><p>再按照<code>英语语法</code>的方式分析一下！:</p><ul><li><code>git</code>，指使用<code>git</code>，所以<code>git</code>此时做指令的主语；</li><li><code>commit</code>，指<code>提交</code>，此时做指令的谓语；</li><li><code>-m</code>，做状语，是对<code>commit</code>的修饰；</li><li><code>&quot;一些内容&quot;</code>，做宾语，是对于<code>被修改文件</code>的描述；</li></ul><blockquote><p>这里的被修改怎么理解:添加，删除，修改内容，都指<code>被修改</code></p></blockquote><p>完成！我们已经给<code>这次将要提交</code>的<code>缓存区的内容</code>加了一个修改描述！</p><p>如图所示，即完成:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_225854.jpg" alt="这里插入一张图片，git commit"></p><hr><p>接下来，输入最后一个指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>最后分析一次！:</p><ul><li><code>git</code>，指使用<code>git</code>，所以<code>git</code>此时做指令的主语；</li><li><code>push</code>，指<code>推送</code>，做谓语；</li><li><code>-u</code>，一个状语；</li><li><code>origin main</code>，指<code>main分支</code>(一个仓库可以有多个分支)，做宾语；</li></ul><p>回车后，此时又会进入<code>输入用户名和密码</code>的状态，我们把上面说过的<code>tokens</code>粘贴进去.</p><p>如图所示，即完成:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211226_230229.jpg" alt="这里插入一张图片，git push"></p><p>成功！我们已经把本地的仓库内容全部推送到Github仓库啦！(不信可以去看看)</p><hr><p>可以看到，总共的指令一共有三条:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add * . //添加到缓存区</span><br><span class="line">git commit -m &quot;内容&quot; //添加提交描述</span><br><span class="line">git push -u origin main //推送到Github</span><br></pre></td></tr></table></figure><p>记不住的话只需要编辑一个脚本(<code>nano git.sh</code>)，写入内容，每次<code>sh git.sh</code>就能快速上传啦！</p><hr><h2 id="如果你选择了本地生成的那种方式"><a href="#如果你选择了本地生成的那种方式" class="headerlink" title="如果你选择了本地生成的那种方式"></a>如果你选择了<code>本地生成</code>的那种方式</h2><p>首先，我们还是要在Github里建立一个仓库(因为最后是要到Github上的，所以网页创建仓库是<code>万事之根</code>)</p><p>之后，在本地仓库中输入指令以<code>确定分支</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure><p>像上面的<code>git push</code>一样，这一步指的是<code>确认默认主分支名为main</code>.</p><p>接下来输入指令以<code>绑定</code>到仓库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:用户名/项目名.git</span><br></pre></td></tr></table></figure><blockquote><p>其实相比较<code>在线建立</code>的方式，就多输入了这两个指令而已🌚而且只需要输一次</p></blockquote><p>接着像上面<code>在线建立</code>的方法一样，输入三条指令即可:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add * . //添加到缓存区</span><br><span class="line">git commit -m &quot;内容&quot; //添加提交描述</span><br><span class="line">git push -u origin main //推送到Github</span><br></pre></td></tr></table></figure><hr><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>其实文章挺简单的，但是为什么要专门拎出来长篇大论一番，是因为<code>当时我想用git的时候</code>，虽然搜了<code>很多文章</code>，但是都没有<code>较为仔细的解释</code>，导致我对这么多指令是<code>干啥的</code>，<code>接下来怎么弄</code>非常模糊，所以今天写了这篇文章，既算<code>加深了自己的印象</code>，又算是给<code>比我还小白的人</code>的一个<code>科普</code>吧，毕竟我便当的话还是<code>挺直白的</code>🌚而且<code>自认为</code>文章都很详细🌚</p><p>希望大家喜欢！不懂的话可以与我私聊！</p><hr><p>我是<strong>听话的便当</strong>，</p><p>Bye~ ♬︎*(๑ºั╰︎╯︎ºั๑)♡︎</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Git</tag>
      
      <tag>Termux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python实用代码段收藏</title>
    <link href="/er/"/>
    <url>/er/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211216_122547_181.jpg">点击获得封面头图</a></p></blockquote><blockquote><p>此文章使用<code>CC-BY-NC</code>协议，协议详情介绍<a href="https://wzk0.github.io/bk/">请看此文</a></p></blockquote><hr><h2 id="判断文件是否存在，不存在则执行特定指令"><a href="#判断文件是否存在，不存在则执行特定指令" class="headerlink" title="判断文件是否存在，不存在则执行特定指令:"></a>判断文件是否存在，不存在则执行特定指令:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;thdbd.txt&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):     //若不存在<span class="string">&quot;thdbd.txt&quot;</span></span><br><span class="line">  os.system(<span class="string">&quot;touch thdbd.txt&quot;</span>)       //创建<span class="string">&quot;thdbd.txt&quot;</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;thdbd.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;thdbd&quot;</span>)                 //写入内容</span><br></pre></td></tr></table></figure><h2 id="以cookie的格式打开文件并作为变量"><a href="#以cookie的格式打开文件并作为变量" class="headerlink" title="以cookie的格式打开文件并作为变量:"></a>以cookie的格式打开文件并作为变量:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">r&#x27;cookie.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">cookies=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.read().split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">  name,value=line.strip().split(<span class="string">&#x27;=&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">  cookies[name]=value</span><br></pre></td></tr></table></figure><h2 id="强制退出程序"><a href="#强制退出程序" class="headerlink" title="强制退出程序:"></a>强制退出程序:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="更换工作目录"><a href="#更换工作目录" class="headerlink" title="更换工作目录:"></a>更换工作目录:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&quot;path/to/your/files&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="检测是否安装了模块并尝试导入"><a href="#检测是否安装了模块并尝试导入" class="headerlink" title="检测是否安装了模块并尝试导入:"></a>检测是否安装了模块并尝试导入:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">import</span> name</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;没有安装模块&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="检测操作系统"><a href="#检测操作系统" class="headerlink" title="检测操作系统:"></a>检测操作系统:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">if</span> platform.system() == <span class="string">&#x27;Windows&#x27;</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;系统为:&quot;</span> + platform.system())</span><br></pre></td></tr></table></figure><h2 id="requests实现的更新方式"><a href="#requests实现的更新方式" class="headerlink" title="requests实现的更新方式:"></a>requests实现的更新方式:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;https://raw.githubusercontent.com/xxx.py&quot;</span>  <span class="comment">#远端更新地址</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;name.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment">#远端和本地文件名需一致</span></span><br><span class="line">  f.write(r.text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新完毕！&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何更好地保护自己的博客文章</title>
    <link href="/bk/"/>
    <url>/bk/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211211_202736_014.jpg">点击获得封面头图</a></p></blockquote><p>今天要说明(科普?)一些关于<code>保护博客文章</code>的策略.</p><p>对于<code>保护</code>一词，主要有两个方面:</p><ul><li><p>版权©的保护</p></li><li><p>文章的保存</p></li></ul><p>好的，废话不多说，我们马上开始吧！</p><h2 id="保护的必要性"><a href="#保护的必要性" class="headerlink" title="保护的必要性"></a>保护的必要性</h2><p>如果你是经常搜索查阅程序实现方案，或是报错处理等技术类文章的人，</p><p>应该经常会发现一个现象(这里以CSDN为例):</p><p>文章被抄来抄去，不加转载提示，甚至将他人公开免费的博客文章加以收费等等.</p><p>以至于现在的CSDN被戏称为<code>垃圾场</code>(其实不假)</p><p>除了版权这方面以外，<code>文章常常丢失</code>也是一方面(我深有体会)</p><p>例如，像我这样经常换设备的人，博客网站就建了好几个，每次都不固定</p><p>而对于使用Hexo的我来说，一换设备就代表着网站永远无法继续更新了</p><p>所以这也是非常令人苦恼的一件事，那么我们到底该怎么解决这些可能发生的问题呢?</p><h2 id="版权的保护"><a href="#版权的保护" class="headerlink" title="版权的保护"></a>版权的保护</h2><p>如果经常看别人的博客的话，可能不时会在结尾看见这样的字样:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2021-12-14-23-38-49-13.jpg" alt="文章保护协议"></p><p>没错，这便是一种对自己文章版权保护的方法:<code>加上采用的文章协议</code>.</p><p>(当然，如果遇上那种<code>无视协议无脑复制粘贴</code>的人，只能采用<code>水印</code>或<code>页面禁复制</code>等极端手段了🌚)</p><p>那么，都有哪些协议，可以供我们使用呢?</p><p>可能我们大部分所了解的，是<code>程序开源方面的协议</code>，如下图所示，为现在常用的<code>开源协议</code>:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211214_230932_409.jpg" alt="开源协议"></p><p>而对于文章的使用协议 也有十分详细的划分:</p><ul><li><p>首先，基本上所有的博客文章都会满足的一个协议是<code>知识共享协议(Creative Commons)</code>，简称<code>CC</code>.对于其权利(力?)的划分又有四种:</p><ul><li><p><code>署名(Attribution)</code>，简称<code>BY</code>，即<code>必须提到原作者</code>；</p></li><li><p><code>非商业用途(Noncommercial)</code>，简称<code>NC</code>，<code>即不得用于盈利性目的</code>;</p></li><li><p><code>禁止演绎(No Derivative Works)</code>，简称<code>ND</code>，即<code>不得修改原作品, 不得再创作</code>;</p></li><li><p><code>相同方式共享(Share Alike)</code>，简称<code>SA</code>，即<code>允许修改原作品，但必须使用相同的许可证发布</code>.</p></li></ul></li><li><p>根据这些详细的协议，产生了现在几种常见的协议:</p><ul><li><p>例如上面图片展示的<code>CC-BY-NC-SA</code>协议(转载加作者标注，不得用于商业用途，且二改文章之后要以同样的协议发布);</p></li><li><p>以及<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/cn/">署名-非商业性使用-禁止演绎 3.0 中国大陆 (CC BY-NC-ND 3.0 CN)</a>协议;</p></li><li><p>还有<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">署名-相同方式共享 4.0 国际 (CC BY-SA 4.0)</a>协议;</p></li><li><p>当然，你也可以<code>自己创建一个许可证</code>.</p></li></ul></li></ul><hr><h2 id="文章的保存"><a href="#文章的保存" class="headerlink" title="文章的保存"></a>文章的保存</h2><p>使用Hexo这类<code>本地静态博客</code>的用户，对于文章的<code>备份与保存</code>工作是必不可少的.</p><p>这里说明两种方法:</p><ul><li><p>把文章保存在多个本地设备上;</p></li><li><p>上传文章至网络</p></li></ul><blockquote><p>Tips:精力充沛的话还可以手写下来哈哈哈哈😂</p></blockquote><p>对于第一种，由于我是在手机上编辑的Hexo，所以最好的方法是:</p><ol><li>安装<code>http-server</code>模块:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server</span><br></pre></td></tr></table></figure><ol start="2"><li>在文章所在目录执行:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure><ol start="3"><li>在本地8080端口就能看见自己的文章啦</li></ol><p>此时，我们可以将其粘贴进<code>Joplin</code>(一个开源的Markdown编辑器，谷歌商店有)</p><p>随后保存即可.</p><hr><p>但是对于手机也会丢的用户，本地的方法也很不保险，那么我们可以进行如下操作:</p><ol><li><p>新建一个Git仓库(在Gtihub上，可以设置为私有仓库)</p></li><li><p>随后进入<code>~/hx/source/_posts/</code>文件夹(即Hexo文章保存的目录)</p></li><li><p>执行如下指令:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">git add *.md</span><br><span class="line"></span><br><span class="line">git commit -m &quot;博客文章提交&quot;</span><br><span class="line"></span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:wzk0/text.git  //记得换成自己的！！</span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><ol start="4"><li>随后会让你输入用户名和密码(如果用<code>ssh连接</code>过了则不用)</li></ol><blockquote><p>Tips:这一步最好使用<code>Personal access tokens</code>，如果不知道在哪生成，<a href="https://github.com/settings/tokens">点击这里</a></p></blockquote><ol start="5"><li>之后，你的文章就会上传到Git仓库啦，只不过每次都得与文章同步地上传罢了.</li></ol><p>同时，可以编辑一个脚本(<code>git.sh</code>)用于快速上传，例如:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add * .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>即可每次使用<code>sh git.sh</code></p><hr><p>我是<strong>听话的便当</strong>，不懂的话可以与我私聊.</p><p>(๑╹ヮ╹๑)ﾉ</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的好东西收藏集</title>
    <link href="/sr/"/>
    <url>/sr/</url>
    
    <content type="html"><![CDATA[<h2 id="网站类"><a href="#网站类" class="headerlink" title="网站类"></a>网站类</h2><p>见 <a href="https://wzk0.github.io/ws">https://wzk0.github.io/ws</a></p><h2 id="项目类"><a href="#项目类" class="headerlink" title="项目类"></a>项目类</h2><ul><li><a href="https://github.com/Binaryify/NeteaseCloudMusicApi">网易云音乐 Node.js API service</a> </li><li><a href="https://github.com/miiiku/hexo-theme-flexblock">一个卡片类拟态风格的Hexo主题</a></li><li><a href="https://github.com/yudai/gotty">Share your terminal as a web application</a></li><li><a href="https://github.com/RimoChan/Night-Beam">【Night Beam】去除文本马赛克的随机算法！</a></li><li><a href="https://github.com/qier222/YesPlayMusic">高颜值的第三方网易云播放器</a></li></ul><h2 id="文章类"><a href="#文章类" class="headerlink" title="文章类"></a>文章类</h2><ul><li><a href="https://user.guancha.cn/main/content?id=655862">毛星云，究竟死在谁手里？</a></li><li></li><li></li><li></li><li></li></ul><h2 id="视频类"><a href="#视频类" class="headerlink" title="视频类"></a>视频类</h2><p>* </p><p>* </p><p>* </p><p>* </p><p>* </p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的Linux常用指令集</title>
    <link href="/ln/"/>
    <url>/ln/</url>
    
    <content type="html"><![CDATA[<blockquote><p>以后会慢慢添加，欢迎各位向我提出建议！</p></blockquote><h2 id="查看类"><a href="#查看类" class="headerlink" title="查看类"></a>查看类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> //查看当前文件夹的文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> 文件夹名 //查看某个文件夹中的文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -a //查看文件夹中所有文件(因为.开头的文件夹会被隐藏)</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> //同<span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> 文件名 //以文本格式查看一个文件</span><br></pre></td></tr></table></figure><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 文件夹名 //创建文件夹</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> 文件 //创建文件(记得带后缀)</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> 文件1 文件2 //复制文件1为文件2</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> 文件1 文件2 //重命名文件1为文件2</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> 文件 文件夹名 //移动文件到文件夹</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf 文件或文件夹 //删除文件或文件夹</span><br></pre></td></tr></table></figure><h2 id="移动类"><a href="#移动类" class="headerlink" title="移动类"></a>移动类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 文件夹名 //进入文件夹</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .. //返回上一级文件夹</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> //返回初始位置</span><br></pre></td></tr></table></figure><h2 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> xxx=<span class="string">&#x27;command&#x27;</span> //指令重定向</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Termux无服务器运行PagerMaid-Modify</title>
    <link href="/pm/"/>
    <url>/pm/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/Tumblr_l_56821636930232.jpg">点击获得封面头图</a></p></blockquote><p><code>PagerMaid-Modify</code>是一个非常强大的Telegram辅助工具.</p><p>其具体功能我在此不细说，</p><p>关于其部署，可以选择云服务器(但是要花钱🌚)</p><p>如果你还没有Telegram ID和hash，请到<a href="https://my.telegram.org/">这里</a>注册一个.</p><blockquote><p>Tips:<code>URL</code>填入的时候，输入一个自己的网站(别输入那种大的，例如<a href="https://youtube.com/">https://youtube.com</a> 这种。最好是自己的Github Page，记得加https:&#x2F;&#x2F;)</p></blockquote><p>今天，来讲一个用<code>Termux</code>安装并部署的方法</p><p class="note note-primary">我已经写好了一个脚本！使用请看: https://github.com/wzk0/pgm-Termux</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>Tips:如果你对Linux比较熟悉的话，只需看这部分思路即可完成.</p></blockquote><p>首先，官方给出了<code>PagerMaid-Modify</code>的<code>Ubuntu安装方法</code>，</p><p>那么我们只需拥有一个Ubuntu系统即可.</p><p>而Termux虽然默认有apt包管理器，但是被阉割太严重，导致无法正常安装<code>PagerMaid-Modify</code>的所有依赖.</p><p>况且，最重要的一点是，通常大部分人的手机没有root，因此Termux也就无法使用sudo等这些管理员指令.</p><p>所以，我们需要的是一个<code>虚拟系统</code>，里面有原生的Ubuntu，以及<code>虚拟的root用户</code>.</p><p>于是我便找到了<code>第二步</code>中的那个脚本，它可以实现上述要求.</p><p>那么安装完这个<code>虚拟系统</code>之后，一切做法就和<a href="https://gitlab.com/Xtao-Labs/pagermaid-modify">官方文档</a>一样啦！</p><hr><h1 id="第一步-安装Termux"><a href="#第一步-安装Termux" class="headerlink" title="第一步 安装Termux"></a>第一步 安装Termux</h1><p>如果你还没有安装<code>Termux</code>，<a href="https://f-droid.org/repo/com.termux_118.apk">点击这里安装</a></p><blockquote><p>Tips:请从F-droid下载，或者点击上面安装</p></blockquote><hr><h1 id="第二步-安装Ubuntu虚拟容器系统"><a href="#第二步-安装Ubuntu虚拟容器系统" class="headerlink" title="第二步 安装Ubuntu虚拟容器系统"></a>第二步 安装Ubuntu虚拟容器系统</h1><p>输入指令更新pkg包管理器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg update</span><br><span class="line">pkg upgrade</span><br></pre></td></tr></table></figure><p>输入指令以安装<code>Ubuntu虚拟系统</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install wget openssl-tool proot -y &amp;&amp; hash -r &amp;&amp; wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh &amp;&amp; bash ubuntu.sh</span><br></pre></td></tr></table></figure><blockquote><p>时间较长，过程中有<code>Y/n</code>并且卡住的时候请输入<code>y</code></p></blockquote><p>进入<code>Ubuntu虚拟系统</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-ubuntu.sh</span><br></pre></td></tr></table></figure><hr><h1 id="第三步-安装PagerMaid-Modify"><a href="#第三步-安装PagerMaid-Modify" class="headerlink" title="第三步 安装PagerMaid-Modify"></a>第三步 安装PagerMaid-Modify</h1><blockquote><p>Warn:这一步是在进入Ubuntu虚拟系统后进行的</p></blockquote><p>输入指令更新apt包管理器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update -y</span><br><span class="line">apt upgrade -y</span><br></pre></td></tr></table></figure><p>输入指令安装<code>git</code>，<code>Python</code>，<code>pip3</code>，<code>nano</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install git</span><br><span class="line">apt install python</span><br><span class="line">apt install python3-pip</span><br><span class="line">apt install nano</span><br></pre></td></tr></table></figure><hr><h1 id="第四步-安装依赖及可选软件包"><a href="#第四步-安装依赖及可选软件包" class="headerlink" title="第四步 安装依赖及可选软件包"></a>第四步 安装依赖及可选软件包</h1><blockquote><p>Warn:这一步是在进入Ubuntu虚拟系统后进行的</p></blockquote><h2 id="输入指令clone仓库-必选"><a href="#输入指令clone仓库-必选" class="headerlink" title="输入指令clone仓库(必选):"></a>输入指令clone仓库(<code>必选</code>):</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitlab.com/Xtao-Labs/pagermaid-modify.git pagermaid &amp;&amp; cd pagermaid</span><br></pre></td></tr></table></figure><hr><h2 id="输入指令安装软件包-可选"><a href="#输入指令安装软件包-可选" class="headerlink" title="输入指令安装软件包(可选):"></a>输入指令安装软件包(<code>可选</code>):</h2><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理:"></a>图片处理:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install imagemagick -y</span><br></pre></td></tr></table></figure><h3 id="系统信息-仓库无效，无法获取，建议跳过"><a href="#系统信息-仓库无效，无法获取，建议跳过" class="headerlink" title="系统信息:(仓库无效，无法获取，建议跳过)"></a>系统信息:(仓库无效，无法获取，建议跳过)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install software-properties-common  &amp;&amp; add-apt-repository ppa:dawidd0811/neofetch &amp;&amp; apt-get update &amp;&amp; apt-get install neofetch</span><br></pre></td></tr></table></figure><h3 id="二维码处理"><a href="#二维码处理" class="headerlink" title="二维码处理:"></a>二维码处理:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libzbar-dev -y</span><br></pre></td></tr></table></figure><h3 id="光学识别"><a href="#光学识别" class="headerlink" title="光学识别:"></a>光学识别:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install tesseract-ocr tesseract-ocr-all -y</span><br></pre></td></tr></table></figure><h3 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行:"></a>任务执行:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install redis-server -y</span><br></pre></td></tr></table></figure><h2 id="安装依赖-必选"><a href="#安装依赖-必选" class="headerlink" title="安装依赖(必选):"></a>安装依赖(<code>必选</code>):</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="修改并写入配置-必选"><a href="#修改并写入配置-必选" class="headerlink" title="修改并写入配置(必选):"></a>修改并写入配置(<code>必选</code>):</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp config.gen.yml config.yml</span><br><span class="line"></span><br><span class="line">nano config.yml</span><br></pre></td></tr></table></figure><blockquote><p>复制<code>api_id</code>和<code>api_hash</code>值，填入<code>api_key</code>和<code>api_hash</code></p></blockquote><blockquote><p>Tips: <code>Ctrl O</code>保存之后，会提示是否修改文件名，直接回车一次即可，然后再<code>Ctrl X</code>，也可以直接<code>Ctrl X</code>，之后会提示是否保存，输入y即可.</p></blockquote><hr><h1 id="运行"><a href="#运行" class="headerlink" title="运行:"></a>运行:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pagermaid</span><br></pre></td></tr></table></figure><blockquote><p>Warn:这一条指令是在<code>PagerMaid-Modify</code>的根目录执行的</p></blockquote><blockquote><p>首次会提示登陆账号，如果有二步验证密码输入，密码不会显示出来</p></blockquote><hr><p><strong>相关:</strong></p><p><del><a href="https://github.com/Xtao-Labs/PagerMaid-Modify">PagerMaid-Modify官方Github地址</a></del></p><p>已失效，新地址:</p><p><a href="https://gitlab.com/Xtao-Labs/pagermaid-modify">https://gitlab.com/Xtao-Labs/pagermaid-modify</a></p><p><a href="https://github.com/Xtao-Labs/PagerMaid-Modify/wiki/Ubuntu-16.04-%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3">PagerMaid-Modify官方Ubuntu手动搭建教程</a></p><p><a href="https://index.xtaolabs.com/">PagerMaid-Modify插件集合</a></p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Termux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Termux制作Hexo的详细攻略</title>
    <link href="/hx/"/>
    <url>/hx/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/Tumblr_l_56783869134384.jpg">点击获得封面头图</a></p></blockquote><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面:"></a>写在前面:</h3><p><em>虽然之前发过不少Hexo的搭建与部署教程，但一直都很粗糙，所以这次准备认真地写一篇详细的<code>使用Termux制作Hexo的攻略</code>！</em></p><blockquote><p>PS:本篇虽为Termux用户所写 但可能会提两嘴Windows和Linux用户，跳过即可.</p></blockquote><hr><blockquote><p>我已经写好了一个<code>方便Termux用户</code>的<code>一键Hexo脚本</code>，<a href="https://github.com/wzk0/quick-hexo">点击这里查看！</a>(不需要记忆那么多指令，输入几个数字完成部署！)</p></blockquote><hr><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>Hexo是一个Github上极高收藏数的项目.</p><p>它以<code>免费</code>，<code>美观</code>，<code>快速</code>，<code>简单</code>等特点吸引了大量用户.</p><p>而对于这些用户，我们通常称他们为<code>博客</code>.</p><p>Hexo作为一个<code>高效易上手</code>的<code>博客写作工具</code>，已经渲染了百万个美观的网页(我瞎猜的🌚)</p><p>其<code>Markdown --&gt; HTML</code>的<code>易写作性</code>也是我们<code>静态博客爱好者</code>的不二之选.</p><p>话不多说，如果你想<code>完全免费地</code>建一个像你现在正在浏览的网站一样的网站，那我们就开始吧！</p><hr><h2 id="开始Hexo的准备"><a href="#开始Hexo的准备" class="headerlink" title="开始Hexo的准备"></a>开始Hexo的准备</h2><blockquote><p>既然是<code>详细的教程</code>，那么就从安装开始吧！</p></blockquote><blockquote><p>如果你还没有安装Termux，请从F-droid下载，或者<a href="https://f-droid.org/repo/com.termux_117.apk">点击这里快速下载</a></p></blockquote><p>你需要安装的东西:<code>Git</code>，<code>Nodejs</code>，<code>ssh</code>.</p><p>这里是<a href="https://git-scm.com/downloads">Git的官方下载页面</a></p><p>这里是<a href="https://nodejs.org/zh-cn/download/">Nodejs的官方下载页面</a></p><p>这里是<a href="https://www.ssh.com/download/">ssh的官方下载页面</a></p><ul><li>如果你是Windows用户</li></ul><blockquote><p>安装<code>Git</code>与<code>Nodejs</code>，要求系统版本起码为<code>Windows10</code>，并且添加到<code>环境变量</code>.</p></blockquote><ul><li>如果你是Linux用户</li></ul><blockquote><p>使用对应的包管理器进行安装即可(注意npm也要安装).</p></blockquote><ul><li>如果你是Termux用户</li></ul><blockquote><p>打开软件，输入<code>pkg install nodejs &amp;&amp; pkg install openssh &amp;&amp; pkg install git &amp;&amp; pkg install nano</code>即可</p></blockquote><blockquote><p>Tips:nano是命令行编辑器.</p></blockquote><blockquote><p>吐槽:还是我大Termux方便哈哈哈哈，不过电脑的大屏幕还是爽的(||๐_๐)</p></blockquote><hr><p>上面几个东西安装完之后，来安装我们的Hexo吧！</p><p>打开终端，输入指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>Tips:如果提示<code>npmNOT FOUND等字样</code>，说明是npm没有安装</p></blockquote><p>好了，至此，安装”大件”的工作全部完成！</p><hr><h2 id="生成与编辑"><a href="#生成与编辑" class="headerlink" title="生成与编辑"></a>生成与编辑</h2><p>打开终端，输入指令以生成名为<code>hx</code>的<code>Hexo文件夹</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hx</span><br></pre></td></tr></table></figure><p>此时如果报错:</p><blockquote><p>WARN  Failed to install dependencies. Please run ‘npm install’ in “&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;home&#x2F;hx” folder.</p></blockquote><p>则:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hx &amp;&amp; npm install</span><br></pre></td></tr></table></figure><blockquote><p>Tips:这一步报错是因为依赖没有安装好.</p></blockquote><p>接下来，如果返回:</p><blockquote><p>found 0 vulnerabilities</p></blockquote><p>就说明成功了！</p><p>查看下<code>hx文件夹</code>有哪些文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2021-11-26-19-39-44-47.jpg" alt="有这些东西"></p><p>其中，</p><ul><li><p><code>_config.yml</code>是网站的<code>配置文件</code>，在里面可以编辑例如你的<code>网站名</code>，<code>作者</code>，<code>描述</code>等信息.</p></li><li><p><code>source</code>内存放你的<code>页面</code>和<code>文章</code>(文章地址在<code>source/_posts</code>里).</p></li><li><p><code>themes</code>里存放着<code>博客主题</code>的<code>相关配置</code>与信息.</p></li></ul><p>其他的一般没有用.</p><hr><p>接下来，让我们了解几个简单的<code>Hexo指令</code>吧！</p><ul><li>hexo init xxx<blockquote><p>生成<code>Hexo文件夹</code>(即一个网站).</p></blockquote></li><li>hexo new xxx<blockquote><p>生成名为xxx的文章，位置在<code>~/hx/source/_post/xxx.md</code></p></blockquote></li><li>hexo new page about<blockquote><p>生成<code>about页面</code>，位置在<code>~/hx/source/about/index.md</code>，<code>about</code>可换.</p></blockquote></li><li>hexo s<blockquote><p>开启本地预览，通常网址为<code>http://localhost:4000</code></p></blockquote></li><li>hexo g<blockquote><p>渲染生成<code>HTML页面</code>，位置在<code>~/hx/public</code></p></blockquote></li></ul><hr><p>编辑任务，只需编辑<code>_config.yml</code>即可，后续的<code>主题配置</code>后面再说.</p><blockquote><p>吐槽:这时候桌面的好处体现出来了——同时编辑好几个都没问题.</p></blockquote><blockquote><p>Tips:看不懂的英语可以Google一下！</p></blockquote><blockquote><p>Tips:nano的简单用法:<code>Ctrl O</code>是<code>保存</code>，<code>Ctrl X</code>是<code>退出</code>，编辑一个文件的指令是<code>nano xxx.xx</code>(记得加上后缀).</p></blockquote><blockquote><p>Tips:Markdown的学习可<a href="https://thdbd.gitbook.io/thdbd/article/3">点击此处</a></p></blockquote><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>此时我们可以执行命令查看一下<code>本地预览</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如果返回下列内容:</p><blockquote><p>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000/">http://localhost:4000</a> . Press Ctrl+C to stop.</p></blockquote><p>则此时可在浏览器打开<code>http://localhost:4000</code>查看预览.</p><hr><p>什么?Hexo的原生主题太难看?</p><p>没关系！现在我将说明<code>Hexo主题</code>的更换方法:</p><p>首先，随便在Github上搜索一个Hexo主题，</p><blockquote><p>这里我以我网站的<code>flex-block</code>主题为例</p></blockquote><p>通常，一个对用户友好的主题都会说明<code>安装与配置方法</code>，</p><p>譬如<code>flex-block</code>，给出了两种方法:</p><blockquote><p>如果是安装了Git:<br>进入你的网站目录并执行以下代码:<br><code>git clone https://github.com/miiiku/hexo-theme-flexblock.git ./themes/flex-block</code></p></blockquote><blockquote><p>如果没有安装Git:<br>可以从<a href="https://github.com/miiiku/hexo-theme-flexblock/archive/refs/heads/master.zip">https://github.com/miiiku/hexo-theme-flexblock/archive/refs/heads/master.zip</a><br>下载压缩包解压到你的网站目录下的theme文件夹下<br>重命名hexo-theme-flexblock-master为flex-block。</p></blockquote><p>此时你就会发现，在<code>themes文件夹</code>中多了一个刚刚安装的主题.</p><p>进入这个<code>主题所在的文件夹</code>，查看一下有哪些文件，会发现:</p><p>这里也有一个<code>_config.yml</code>！</p><p>通常这个配置文件，包含许多自定义功能:</p><p>譬如<code>是否开启评论</code>，<code>是否开启打赏</code>，<code>社交平台</code>等等.</p><blockquote><p>Tips:config是配置的意思，帮你查过了.</p></blockquote><blockquote><p>Tips:中文开发者的主题中，config文件往往有中文注释.</p></blockquote><p>编辑就完事了！</p><blockquote><p>Tips:通用一般主题获取方式:<code>git clone 仓库地址.git ./themes</code></p></blockquote><p>之后，在<code>根目录</code>的<code>_config.yml</code>里，写入主题名如图所示:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2021-11-27-08-57-25-65.jpg" alt="这里"></p><h2 id="网页托管与上传"><a href="#网页托管与上传" class="headerlink" title="网页托管与上传"></a>网页托管与上传</h2><p>现在，我们的主题也选择并设置完了！</p><p>接下来怎么让所有人都看见呢?</p><p>众所周知，一个网站是需要<code>域名</code>，<code>托管后端</code>等要花钱的东西的.</p><p><big><strong>但是！</strong></big></p><p>既然开头说了，是<code>全免费</code>的，那么域名和其他的也一并不需要！</p><p>我们只需要在Github创建一个名为<code>用户名.github.io</code>的仓库即可.</p><blockquote><p>如果不懂的话可以观看这个<a href="https://b23.tv/lpFMOTX">哔哩哔哩视频教程~</a></p></blockquote><p>那么我们如何快速上传页面到<code>Github Pages</code>呢?</p><ol><li>编辑<code>根目录</code>(即<code>hx文件夹</code>)下的<code>_config.yml</code>，在最后几行<code>Deployment部分</code>添加如下字样:</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装hexo-deployer-git插件:</li></ol><p>输入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="3"><li>返回根目录(<code>非hx文件夹</code>)</li></ol><p>输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>即可返回.</p><ol start="4"><li>在这个根目录下输入:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的名字&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email “你的邮箱”</span><br></pre></td></tr></table></figure><p>添加过后可以输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line"></span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><p>查看是否已经添加了Git账户.</p><ol start="5"><li>输入:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>以生成ssh<code>公钥</code>和<code>私钥</code>.</p><p>随后输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后复制这一串字符，在 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a> 添加这一段字符.</p><ol start="6"><li>进入<code>hx文件夹</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hx</span><br></pre></td></tr></table></figure><p>输入指令上传:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><blockquote><p>如果此时返回:<br>INFO  Deploy done: git<br>则说明成功了！打开用户名.github.io，刷新几次就有页面了 </p></blockquote><hr><p>如果你觉得<code>ssh方式</code>太难太复杂看不懂，这里还有一种<code>Personal access tokens</code>的方法:</p><p>打开这个网站以生成一个<code>Personal access tokens</code>:<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p>随后编辑<code>根目录</code>(即<code>hx文件夹</code>)下的<code>_config.yml</code>，在最后几行<code>Deployment部分</code>添加如下字样:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips:与前面的区别是repo的格式.</p></blockquote><p>之后执行<code>hexo g -d</code>，会弹出<code>输入用户名和密码</code>字样，</p><blockquote><p>Tips:这些字当然是英文的.</p></blockquote><p>只需粘贴我们刚刚生成的<code>Personal access tokens</code>即可.</p><p>唯一的缺点是每一次上传都要输入<code>Personal access tokens</code>.</p><blockquote><p>Tips:用户名和密码都是这串长长的东西.</p></blockquote><blockquote><p>Tips:输入密码的时候，不会显示出来，所以不要傻乎乎地粘贴好几遍最后报错.</p></blockquote><blockquote><p>我有一篇文章，对Git的基础使用进行了讲述，可以<a href="https://wzk0.github.io/gu/">点击这里</a>看看(写得非常详细🌚)</p></blockquote><hr><p>此外 我还编写了一个Python脚本供不太清楚Hexo目录结构和方法的萌新使用！</p><p>具体功能有如下几个:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/IMG_20211222_005506.jpg" alt="功能"></p><p>具体请查看: <a href="https://github.com/wzk0/quick-hexo">https://github.com/wzk0/quick-hexo</a></p><hr><p>我是<code>听话的便当</code>，</p><p>不懂的话可以在<a href="https://t.me/hlx666">我的群组</a>讨论.</p><p><strong>╭︎( ˙º˙)╯︎</strong></p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Termux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一个Python小程序全记录</title>
    <link href="/py/"/>
    <url>/py/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://raw.githubusercontent.com/wzk0/photo/main/Tumblr_l_56779837917922.jpg">点击获得封面头图</a></p></blockquote><p>这一阵子迷上了Python.</p><p>因为是零基础的计算机小白，对于现在的主流语言一窍不通的我，选择了学习Python这门<code>易上手</code>，<code>实用性强</code>的语言.</p><p>于是，便诞生了这篇文章——一个纯小白第一次写Python程序的全记录.</p><hr><h2 id="什么是Python"><a href="#什么是Python" class="headerlink" title="什么是Python"></a>什么是Python</h2><p>虽然一开头就介绍了Python的两个特点，但不过是寥寥.</p><p>我们来看一下维基百科对Python的解释:</p><blockquote><p>Python<br>通用高级编程语言<br>是一种广泛使用的解释型、高级和通用的编程语言。Python支持多种编程范型，包括函数式、指令式、结构化、面向对象和反射式编程。它拥有动态类型系统和垃圾回收功能，能够自动管理内存使用，并且其本身拥有一个巨大而广泛的标准库。</p></blockquote><p>过多的不再赘述，总之都突出了Python这门<code>工具语言</code>的强大之处.</p><h2 id="开始Python的准备"><a href="#开始Python的准备" class="headerlink" title="开始Python的准备"></a>开始Python的准备</h2><ul><li>如果你是Windows用户</li></ul><blockquote><p>去<a href="https://www.python.org/downloads/release/python-3100/">这里</a>下载一个Python并安装(注意添加到环境变量).</p></blockquote><ul><li>如果你是Linux用户</li></ul><blockquote><p>使用对应的包管理器进行安装即可(顺便安装一下python3-pip插件库)</p></blockquote><ul><li>如果你只有手机</li></ul><blockquote><p>嗯，使用<a href="https://f-droid.org/repo/com.termux_117.apk">Termux</a>随时随地编写Python程序也很方便呢</p></blockquote><hr><p>在安装完成后，打开终端输入命令以检查<code>Python</code>是否安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>此时终端进入类似如下状态，则说明<code>Python</code>安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.10</span><span class="number">.0</span> (default, Oct <span class="number">31</span> <span class="number">2021</span>, 01:09:07) [Clang <span class="number">12.0</span><span class="number">.8</span> (https://android.googlesource.com/toolchain/llvm-project c935d99d7 on linux</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Tips: <code>Ctrl D</code>退出.</p></blockquote><p>输入命令查看<code>pip3</code>是否安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 -V</span><br></pre></td></tr></table></figure><p>此时终端返回类似如下数据，则说明<code>pip3</code>安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="number">21.3</span><span class="number">.1</span> <span class="keyword">from</span> /data/data/com.termux/files/usr/lib/python3<span class="number">.10</span>/site-packages/pip (python <span class="number">3.10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>补充说明:<code>pip3</code>是<code>Python3</code>官方的一个强大的插件库，必不可少.</p></blockquote><h2 id="开始编写第一个程序"><a href="#开始编写第一个程序" class="headerlink" title="开始编写第一个程序"></a>开始编写第一个程序</h2><p>俗话说，万事<code>&quot;Hello World！&quot;</code>为先 那么我们就写一个程序以输出它吧！</p><blockquote><p>补充说明:<code>&quot;Hello World！&quot;</code>已经成为了一种不成文的规定——即一种语言的学习先从输出<code>&quot;Hello World！&quot;</code>开始.</p></blockquote><p>在命令行输入<code>python</code>以进入即时交互状态.</p><blockquote><p>补充说明:表现了Python的面向对象性与反射性.</p></blockquote><p>终端出现<code>&gt;&gt;&gt;</code>时即可输入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World！&quot;</span>)</span><br></pre></td></tr></table></figure><p>回车执行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Hello World！&quot;</span>)</span><br><span class="line">Hello World！</span><br></pre></td></tr></table></figure><p>看到这样的结果时，恭喜你！</p><p>你已经完成了一个简单Python程序的编写！</p><h2 id="较为高级的”Hello-World！”"><a href="#较为高级的”Hello-World！”" class="headerlink" title="较为高级的”Hello World！”"></a>较为高级的”Hello World！”</h2><p>一个程序不可能只有机器一直在输出——更何况是对于Python这种<code>交互式语言</code>.</p><p>那么我们就可以换一个高级一点儿的方法来实现交互式地输出”Hello World”:</p><ul><li>定义一个变量，其内容为”Hello World！”:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="string">&quot;Hello World！&quot;</span></span><br></pre></td></tr></table></figure><ul><li>输出该变量:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure><p>回车执行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>var = <span class="string">&quot;Hello World！&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(var)</span><br><span class="line">Hello World！</span><br></pre></td></tr></table></figure><p>是不是比刚刚的高级一些了呢?但是仍然没有交互.</p><p>我们交互一下:</p><ul><li>定义一个<code>可写入变量</code>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="built_in">input</span>(<span class="string">&quot;请输入Hello World:&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>输出该变量:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure><p>回车执行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>var = <span class="built_in">input</span>(<span class="string">&quot;请输入Hello World:&quot;</span>)</span><br><span class="line">请输入Hello World:Hello World！</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(var)</span><br><span class="line">Hello World！</span><br></pre></td></tr></table></figure><p>好了，现在的你已经可以写出更复杂的Python程序了！</p><h2 id="插件的使用——requests"><a href="#插件的使用——requests" class="headerlink" title="插件的使用——requests"></a>插件的使用——requests</h2><p><code>requests</code>是Python一个最为有力之一的插件.</p><p>其主要功能与目的就是:<code>让机器像人一样访问互联网</code>.</p><p>具体是什么意思呢?我在这里举个例子.</p><p>平常我们浏览网页时，页面都是花花绿绿，甚是好看的(我的也是🌚)</p><p>而我们却不会在意浏览的<code>html页面</code>中包含哪些<code>元素</code>.</p><p>因为浏览器已经在瞬间帮助我们做好了<code>渲染</code>工作.</p><p>而requests模块的存在，让机器读取<code>html页面</code>变得可能:</p><p>因此，这就好像你的Python程序在自己上网一样.</p><p>不过程序没有对<code>图形化界面</code>的分析能力，只能从html页面上下手.</p><p>久而久之，requests成为了<code>爬虫</code>必不可少的工作.</p><p>我们来说明一个实例吧！</p><p>打开终端，首先安装<code>requests插件</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><p>随后输入<code>python</code>进入交互模式，</p><p>输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests <span class="comment">##导入requests插件</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://wzk0.github.io&quot;</span>  <span class="comment">##定义一个待访问的页面为变量&quot;url&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url) <span class="comment">##通过requests请求url，并将返回结果定义为变量&quot;r&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text) <span class="comment">##以文本格式输出r</span></span><br></pre></td></tr></table></figure><p>我们来看看运行结果:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2021-11-27-22-24-42-22.jpg" alt="如图所示"></p><p>是不是很神奇?返回并且输出了HTML代码呢！</p><p>但是里面有很多<code>我们不需要的东西</code>，比如标签什么的.</p><p>那么我们怎么筛选呢?</p><blockquote><p>Tips:关于requestss的更多，强烈建议<a href="https://cn.python-requests.org/zh_CN/latest/user/quickstart.html">看看这个</a>！</p></blockquote><h2 id="插件的使用——json"><a href="#插件的使用——json" class="headerlink" title="插件的使用——json"></a>插件的使用——json</h2><p>json是一种<code>人类可读</code>的语言，我将其称为<code>条理清晰的卡片语言</code>.</p><p>为什么这么说呢，看一张图就明白了:</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E6%AD%8C%E8%AF%8D.png" alt="如图所示"></p><p>这种格式简直比HTML好看不止一点点啊！</p><p>而此时我们访问的这个url，便是下一个子标题要说明的<code>API</code>.</p><p>不懂没有关系！把上一个子标题中的url换一个即可.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json  <span class="comment">##导入插件</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://autumnfish.cn/search/hot/detail&quot;</span>  <span class="comment">##定义一个待访问的页面为变量&quot;url&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url) <span class="comment">##通过requests请求url，并将返回结果定义为变量&quot;r&quot;</span></span><br><span class="line"></span><br><span class="line">temp = json.loads(r.text) <span class="comment">##将json格式转换成text格式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(temp) <span class="comment">##以文本格式输出temp</span></span><br></pre></td></tr></table></figure><p>结果如图所示:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2021-11-27-22-37-01-43.jpg" alt="如图所示"></p><p>可以看到，返回了一大串数据，但却不像HTML一样杂乱.</p><p>这种格式就叫做json！</p><p>那么怎么实现只输出想要的那部分呢?比如说我只想输出返回数据中的”还是会想你”，怎么做呢?</p><p>我们来观察一下数据，”还是会想你”在’searchWord’这个东西后面跟着，</p><p>而在这些之前，他们都被包括在一个名为’data’的东西里.</p><p>所以，我们只要先输出’data’，再输出’searchWord’就行了！</p><p>我们来试一下:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/Screenshot_2021-11-27-22-47-01-20.jpg" alt="如图所示"></p><p>最后，我们通过输出<code>temp[&#39;data&#39;][0][&#39;searchWord&#39;]</code>这个东西，来实现了输出”还是会想你”.</p><p>再来分析一遍:</p><p>第一次我输出了<code>temp[&#39;data&#39;]</code>，可以看到原本开头的<code>code</code>等东西都被过滤了.</p><p>随后，我输出了<code>print(temp[&#39;data&#39;][0]</code>，这个<code>[0]</code>是什么呢?其实就是data列表里的第一个数据罢了.</p><blockquote><p>Tips:在编程语言中，0通常代表第一个.</p></blockquote><p>所以这次过滤完后，只保存了跟”还是会想你”有关的那一组的信息，</p><p>接着，我们输出了这个名字所在的’searchWord’位置，做法是输出<code>print(temp[&#39;data&#39;][0][&#39;searchWord&#39;]</code>.</p><p>由此可见，输出特定内容，只需要加<code>[内容]</code>即可.</p><p>而这也正是json的好处——没有多少关键字，内容可选择程度高.</p><p>那么什么样的链接可以返回给我们json数据呢?</p><h2 id="认识API"><a href="#认识API" class="headerlink" title="认识API"></a>认识API</h2><p>API说白了就是没有花花绿绿页面的网站，其名又为<code>应用程序接口</code>.</p><p>譬如上一个子标题出现的例子:</p><ul><li><p>它没有返回大量无用的HTML标签等</p></li><li><p>它完成了<code>我没有打开网易云却查看了热搜榜</code>这样一个任务</p></li></ul><p>是不是又很神奇?而单单一个网易云，就有200多个像这样的API(比如说看歌词，看评论等)</p><p>关于如何搭建API我是不清楚啦，不过现在市面上免费的API不少，都可以用来学习.</p><p>只需要把requests.get(url)里url换成API网址即可.</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在VMware上运行Windows11</title>
    <link href="/win11/"/>
    <url>/win11/</url>
    
    <content type="html"><![CDATA[<p>由于开学所以会少更博客了,期待的人不要太期待了(可能根本就没有哈哈哈哈)</p><p>步入正题:</p><p>自从微软在6月24日公布了下一代Windows系统–Windows11后,我就很想尝鲜试试看看,</p><p>但一直困于系统配置不给力(其实强装也彳亍),以及不敢乱搞的原因,</p><p>我就寻思着用虚拟机运行一下应该可以;</p><p>于是,在尝试完甲骨文虚拟机和其他众多虚拟机后,</p><p>我选择了VMware,这个能完美运行Windows11的虚拟机.</p><p>首先放几张Windows11的图欣赏欣赏吧(很流畅啊,很流畅)</p><p>图片截屏的时间比较早了)</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/3.png" alt="文件"></p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/4.png" alt="设置界面"></p><p>居然一改原来的四方角,变成了丝滑的Mac的感觉的角!</p><p>看完后,你,难道没有心动吗???</p><p>那么就让我们开始吧!</p><hr><h2 id="第一步-说明"><a href="#第一步-说明" class="headerlink" title="第一步 说明"></a>第一步 说明</h2><p>我们要想在自己的电脑上运行一个虚拟机的Windows11系统,</p><p>首先必不可少的就是虚拟机了,</p><p>安装完虚拟机后,我们还需要Windows11的镜像文件,</p><p>最后,我们把Windows11的镜像文件导入到虚拟机中即可;</p><p>接下来,就来详细地说明一下步骤.</p><hr><h2 id="第二步-下载"><a href="#第二步-下载" class="headerlink" title="第二步 下载"></a>第二步 下载</h2><p>我们先去VMware的官网下载一下虚拟机客户端—</p><p>当前最强大以及最新的版本就是VMware Workstation 16 Pro,</p><p>我们点击这个网址,就可以直接下载Windows版本了:<a href="https://www.vmware.com/go/getworkstation-win">https://www.vmware.com/go/getworkstation-win</a> </p><p>或者在这里选择相应的版本再下载:<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><p>下载好VMware的setup.exe之后,傻瓜式地安装即可,</p><p>在最后一个小窗口的时候会弹出”许可证”的字样,</p><p>这个就是让你填写密钥的地方,</p><p>这里给大家提供几个VMware Workstation 16 Pro的密钥:</p><p>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p><p>YF390-0HF8P-M81RQ-2DXQE-M2UT6</p><p>ZF71R-DMX85-08DQY-8YMNC-PPHV8</p><hr><p>接下来我们下载一下Windows11的镜像文件,</p><p>这里有两个途径:</p><p>如果你不想太麻烦的话,直接在浏览器上搜索Windows11镜像文件,下载第三方网站提供的即可,但速度和安全可能是个问题;</p><p>第二个方法是从微软官方网站下载;</p><p>这种方法首先需要注册一个Windows预览体验计划成员,</p><p>我们点击这个网站进行注册并且登录:<a href="https://insider.windows.com/en-us/getting-started">https://insider.windows.com/en-us/getting-started</a></p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E6%B3%A8%E5%86%8C.png" alt="注册成功了"></p><p>随后我们打开这个网站选择需要的镜像版本:<a href="https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewiso">https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewiso</a></p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E7%89%88%E6%9C%AC.png" alt="选择前两个版本任意一个即可"></p><p>然后点击确认,并选择语言:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E8%AF%AD%E8%A8%80.png" alt="简体中文即可"></p><p>最后点击下载即可(注意,下载镜像文件之后需要在24小时之内操作,不然镜像就会过期,所以第三方镜像怎么做的不会过期我也是非常迷惑):</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E4%B8%8B%E8%BD%BD.png" alt="建议使用IDM进行下载,文件比较大"></p><p>🆗!下载完成.</p><h2 id="第三步-导入"><a href="#第三步-导入" class="headerlink" title="第三步 导入"></a>第三步 导入</h2><p>我们打开VMware,点击创建新的虚拟机;</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E6%B7%BB%E5%8A%A0.png"></p><p>然后一路回车,直到这个页面:</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/ISO.png"></p><p>然后(因为VMware目前还没有更新到能检测出Windows11的程度)—</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E9%80%89%E6%8B%A9.png"></p><p>接着名称和位置就可以自定义了(千万不要放在C盘!!!)</p><p>磁盘大小默认就行—</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E7%A3%81%E7%9B%98.png"></p><p>接下来按照图片设置—</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E5%86%85%E5%AD%98.png"></p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E6%A0%B8.png"></p><p>然后就完成了!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E5%AE%8C%E6%88%90.png"></p><p>随后点击”开启此虚拟机”,</p><p>接着一路回车即可!</p><p><img src="https://raw.githubusercontent.com/wzk0/photo/main/%E8%BF%9B%E7%A8%8B.jpg"></p><p>然后—</p><iframe width="874" height="700" src="https://www.youtube.com/embed/TwHq3NuwcSU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>成功了!!享受你的Windows11吧!</p><hr><p>听说Ctrl D收藏本站就再也不会找不到了)</p><p>我是 <strong>听话的便当</strong></p><p>Bye~</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub Pages部署Hexo制作网站</title>
    <link href="/gp-h/"/>
    <url>/gp-h/</url>
    
    <content type="html"><![CDATA[<p>首先可以看一个示例网站(还是上N节我说过的GitHub Pages那个示例站点)</p><p>当然我现在的博客就是用的Hexo来搭建的,所以就参考这个吧!</p><p>记得上N节我说过的GitHub Pages的用途之一,就有“使用Hexo框架搭建博客”,当时没有细讲是因为我觉得Gitbook其实就挺适合的了;不过比较一下UI什么的还是发现,Hexo还是美观得多(因为可以自选主题);话不多说,开始——</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>首先需要下载——</p><ul><li>Node.js</li><li>Git</li></ul><p>这里是官网——</p><p>Node.js：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>Git：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>其中,在Node.js安装过程中,会出现下面的窗口：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/bvh7bf1qxo52qpzj5_q.png?w=499"></p><p>要点第四个,添加到Path(环境变量);</p><p>Git的安装则是傻瓜式安装即可,虽然步骤多,但是按照默认的来就行;</p><p>好的,现在已经全部准备完毕.</p><h2 id="建立阶段"><a href="#建立阶段" class="headerlink" title="建立阶段"></a>建立阶段</h2><p>为了验证我们的Node.js和Git是否安装完毕,可以在CMD(win+R,输入“cmd”即可打开)中输入两条命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">git version</span><br></pre></td></tr></table></figure><p>如果出现以下的反馈(版本号可能不一样),则证明安装成功;</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/kca71x0vx9l7408.png?w=993"></p><p>接下来,创建一个文件夹(名字随便,位置随便,但是最好方便些,这里建议在桌面建立一个名为“hexo”的文件夹);</p><p>我们进入到这个文件夹——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/k5dinhk0bvemq1ljt_9.png?w=993"></p><p>接下来输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>(这里我已经安装过了,就不重复安装了;安装过程中记得保持网络不要断了;)</p><p>然后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://thdbd666666.files.wordpress.com/2021/08/2hh_h72rh9ccpg93.png?w=993"></p><p>可以发现,它已经安装了一大堆东西了.</p><h2 id="写作阶段"><a href="#写作阶段" class="headerlink" title="写作阶段"></a>写作阶段</h2><p>使用Hexo框架,可以用Markdown进行文章的写作——</p><p>输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new “文章标题”</span><br></pre></td></tr></table></figure><p>这样就创建了一篇新文章——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/srvob9g5k8oo99.png?w=505"></p><p>位置在source文件夹中的_posts文件夹中,名为“听话的便当”的Markdown文件;</p><p>我们使用记事本打开看看——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/a8gcgcoj8gk31imkmgrg.png?w=651"></p><p>可以发现它已经很贴心地帮我们写好开头了(当然“data”和“tags”删除也没有关系);</p><p>接下来我们就可以用Markdown来创作了——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/3b37icmc2g40gv2c3sdg.png?w=1024"></p><p>这篇是我使用Markdown打出的一篇文章,那么它预览起来是什么样的呢？——</p><p>输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://thdbd666666.files.wordpress.com/2021/08/ycgroij6p5kumbqfy.png?w=993"></p><p>发现：生成了一个网站(<a href="http://localhost:4000),此时复制后浏览器打开即可——">http://localhost:4000),此时复制后浏览器打开即可——</a></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/e59bbee78987-2.png?w=1024"></p><p>(ps：如果要关闭预览,在CMD里按Ctrl+C;)</p><h2 id="美化阶段"><a href="#美化阶段" class="headerlink" title="美化阶段"></a>美化阶段</h2><p>那么接下来,就介绍一下Hexo强大的功能之一：主题;</p><p>我们可以在GitHub上直接搜索“Hexo theme”,就能发现一大堆,具体看个人喜好;</p><p>我们随便选择一个——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/4h_6h5gxrsy260w9g702.png?w=1024"></p><p>打开“Releases”或者上方的“Code”,下载任意压缩格式的文件;</p><p>然后打开hexo文件夹中的themes文件夹,并解压进去：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/dpwxl5rsp6vjck4p.png?w=861"></p><p>复制刚刚解压过的文件夹的全名称,之后返回根目录(hexo文件夹);</p><p>编辑根目录中的<code>_config.yml文件</code>——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/oz9rujm62fi_4fe4sp.png?w=861"></p><p>这里需要改动一些地方：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/okcl67554wieuipce1.png?w=450"></p><p>这里是一些基本的,比如说你的网站名(第六行);</p><p>描述(第八行);</p><p>作者(第十行);</p><p>语言(第十一行);</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/cf4ofg1klobxmmswh57.png?w=994"></p><p class="note note-danger">第十六行的URL一定要改成你将来要部署的网站域名,即Github Pages的地址.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/g21fy403ycizqtyvjbwzq.png?w=1024"></p><p>这里建议改成六的倍数(不只是吉利),这样的话会比较美观;</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/6kr97sgt4stih6inn.png?w=1024"></p><p>第一百行的主题名称改为之前让你复制的那个文件夹的名称(记得空格);</p><p>第一百零五行“type”改为“git”;</p><p>第一百零六行加上“repo”,然后加上链接——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/tkwxgnehh006du4k.png?w=1024"></p><p class="note note-danger">这里与上面相反,不是GitHub Pages的链接,是GitHub Pages的库的链接.</p><p>第一百零七行加上“branch”,名字为<code>main</code>;</p><p>完成这些之后,我们可以再次用“hexo s”这个指令查看预览,发现已经更新主题了.</p><h2 id="部署阶段"><a href="#部署阶段" class="headerlink" title="部署阶段"></a>部署阶段</h2><p>整了这么多,你的网站也终究只在你的本地运行,那么怎么部署到GitHub Pages上呢——</p><p>首先,我们需要用指令下载一个插件,用于连接GitHub账户和Hexo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装之后,如果想确认是否安装成功,可以输入这个指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list hexo-deployer-git </span><br></pre></td></tr></table></figure><p><img src="https://thdbd666666.files.wordpress.com/2021/08/hllnoo91pxw9if27p1.png?w=993"></p><p>出现了版本号,说明成功了;</p><p>接着,我们到这里生成一个Token: <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p>接下来,输入指令——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>随后会提示输入你的Github用户名和密码,用户名我们直接粘贴Token即可,密码直接回车就行.</p><p>之后,就可以轻松地用Hexo在本地书写,在GitHub Pages上显示啦！</p><p>其他更多Hexo书写技巧,以及指令,请到<a href="https://hexo.io/">Hexo官网</a>查看.</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>由于本篇文章是很早之前写的,东西可能都有缺失,这里还有一些关于Hexo搭建的其他文章:</p><ul><li><a href="https://wzk0.github.io/hx/">使用Termux制作Hexo的详细攻略</a></li></ul><p class="note note-info">我也在B站上发布了这篇教程的视频.</p><hr><p>我是 <strong>听话的便当</strong></p><p>Bye~</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建你的Gitbook（不使用Node.js）</title>
    <link href="/gb-nj/"/>
    <url>/gb-nj/</url>
    
    <content type="html"><![CDATA[<p>一日更两篇！！&lt;(ˉ^ˉ)&gt;</p><h2 id="了解Gitbook"><a href="#了解Gitbook" class="headerlink" title="了解Gitbook"></a>了解Gitbook</h2><p>Gitbook是一个…类似于“石墨文档”（或腾讯文档）的…功能（这里可以类比GitHub Pages,详见上一篇）</p><p>我的Gitbook：thdbd.gitbook.io（注意：是gitbook而不是github）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-5.png?w=1024"></p><p>简洁大方,还添加了轻小说 Ψ(￣∀￣)Ψ</p><h2 id="搭建Gitbook"><a href="#搭建Gitbook" class="headerlink" title="搭建Gitbook"></a>搭建Gitbook</h2><p>方法有三种</p><ol><li>使用Gitbook Web端;</li><li>使用Git+Node.js+GitHub Page(Gitbook需要老版本的Node);</li><li>使用Git+Node.js+个人服务器进行部署;</li></ol><p>这里是第一种和第二,三种的区别</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/rlc1krmj1i3b7zhb7h3mr.png"><img src="https://thdbd666666.files.wordpress.com/2021/08/62zgx5g52w_c1q49l.png"></p><p>所以我来说一下第一种（我觉得还是前者比较好看的）</p><h2 id="Step-1：搭建"><a href="#Step-1：搭建" class="headerlink" title="Step 1：搭建"></a>Step 1：搭建</h2><p>打开这个网址: <a href="https://www.gitbook.com/">https://www.gitbook.com/</a></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-6.png?w=1024"></p><p>选择Sign Up With GitHub（使用GitHub登录）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-7.png?w=1024"></p><p>邮箱会收到noreply发来的链接,点击即可</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-8.png?w=1024"></p><p>点击后跳转到这个页面</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-9.png?w=1024"></p><p>填写你的手机号,然后填入验证码</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-10.png?w=1024"></p><p>进到工作台了,然后创建一个新空间</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-11.png?w=1024"></p><p>之后最好改一下名字,不然域名会非常长</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/settings-gitbook.png"><img src="https://thdbd666666.files.wordpress.com/2021/08/settings-gitbook-1.png"></p><p>此时你就拥有了一个Gitbook站点</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-12.png?w=1024"></p><h2 id="Step-2：设计"><a href="#Step-2：设计" class="headerlink" title="Step 2：设计"></a>Step 2：设计</h2><p>我们以一本书来举例,假如这本书叫《三只小猪》,总共有三大章,每三大章都有三小节,并且要标注相关衍生作品,完成这个设计方案.</p><p>首先明确这本书的结构——题目,简介,正文,其他信息</p><p>先完成简介的设计.通常来说,简介应该是一打开书就能看见的,所以放在第一位.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-13.png?w=1024"></p><p>如图,完成对标题的修改</p><p>随后,我们来添加正文——要求是三大章,每章有三小节,此时我们可以新建一个组,名为“正文”.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/5yxlqp9d5ul4n44b7waw.png?w=1024"></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/qqe688aae59bbe20210821222126.png?w=591"></p><p>（注意：当光标在页面下方时,会出现这个快捷添加的蓝色加号按钮）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/3xzoevmtgal2owcj9yijs.png?w=789"></p><p>（注意：下方的SLUG为固定链接的意思）</p><p>三大章完成了,接下来要进行的是九小节；</p><p>我们点击 “第一章” 的右边三个点的位置,并在如图所示位置添加子页面.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/pxmu5t97kh1wufg01yw.png?w=776"></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/wmm8difieq44kc403_lm.png?w=391"></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/dj403n35rl405402e78.png?w=338"></p><p>（注意：不要忘记保存,点击绿色按钮Save [保存] 后会变成紫色按钮Merge [上传] ）</p><p>然后,添加其他信息.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/qqe688aae59bbe20210821223318.png?w=1024"></p><p>（注意：记得不要添加到“正文”组了）</p><p>最后,标注衍生作品；既然是衍生作,就不应该用页面表示,而应该为一个链接；</p><p>添加 “动画”,“电影” 两个链接；</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/dirm82m2u7hq15g3plz1e.png?w=1024"></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/gnr_9z6_t4_jkyhne6d.png?w=1024"></p><p>完成！</p><p>来看一下刚刚的项目——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-14.png?w=1024"></p><p>十分精美啊！！</p><hr><p>我是 <strong>听话的便当</strong></p><p>ヾ(￣▽￣)Bye~</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何部署GitHub Pages？</title>
    <link href="/gp/"/>
    <url>/gp/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果你想拥有一个网站——</p><p>必不可少的两样东西是：域名(网址)和空间(存放网站数据的主机).</p><p>只需要<strong>“简单四步”</strong>就可以——</p><ol><li><p>购买域名；</p></li><li><p>购买服务器；</p></li><li><p>安装网站环境(虚拟主机的话不需要此步)；</p></li><li><p>安装网站.</p></li></ol><p>但是实际上,真正要做好一个网站,远远不止这4步；</p><p>更何况你可能会止步于空空如也的钱包或是没有深谋远虑的想法；</p><p>这个时候如果一股脑花大价钱,最终却可能把行动付诸于东流.</p><p>所以这篇文章将向你介绍<strong>GitHub Pages</strong>这一强大的功能,<strong>只需两步</strong>,就可完成.</p><h2 id="什么是GitHub-Pages？"><a href="#什么是GitHub-Pages？" class="headerlink" title="什么是GitHub Pages？"></a><strong>什么是GitHub Pages？</strong></h2><p>GitHub Pages是GitHub提供的一个网页寄存服务,于2008年推出.可以用于存放静态网页,包括博客、项目文档甚至整本书.Jekyll软件可以用于将文档转换成静态网页,该软件提供了将网页上传到GitHub Pages的功能.一般GitHub Pages的网站使用github.io的子域名,但是用户也可以使用第三方域名.</p><p>也就是说,当你部署完GitHub Pages后,会得到一个XXX.github.io的网站.这里举个例子</p><p>我的GitHub Pages——你现在正在浏览的这个;</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-3.png?w=1024"></p><p>除了域名之外跟其他网站没什么两样</p><h2 id="如何部署GitHub-Pages"><a href="#如何部署GitHub-Pages" class="headerlink" title="如何部署GitHub Pages"></a>如何部署GitHub Pages</h2><p>首先,登录&#x2F;注册一个GitHub账号 <a href="https://github.com/">https://github.com/</a></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/404n4q7pct_vgpv20b2xw.png?w=643"></p><p>第一行：输入邮箱；</p><p>第二行：输入密码；</p><p>第三行：输入用户名；(注意：这个用户名是什么,XXX.github.io 里的XXX就是什么.比如我的昵称为byn6,最终得到的就是byn6 .github.io )(用户名为英文)</p><p>第四行：是否允许广告(y为允许,n为不允许)；</p><p>然后会让你人机验证啦,邮箱验证什么的；</p><p>最终完成初始化——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/k658h_gnfi6ctq274iq.png?w=1024"></p><p>(以上内容仅对非登录用户有用)</p><p>新建一个仓库: <a href="https://github.com/new">https://github.com/new</a></p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/1m94j4b_05_400a073.png?w=354"></p><p>点击绿色按钮新建一个库——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/l0xcpr4m6x7bet_lj3_0t0d.png?w=873"></p><p>此处库的名字为 你的昵称.github.io；</p><p>权限为Public(公共).[ 注意：这个库的这个权限以后千万不能改为Private,否则会导致永久无法访问此网站 {除非删库重来} ]</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/5xbp4zxmdvd5ze95.png?w=1024"></p><p>creating a new file为创建新的文件；</p><p>uploading an existing file为上传文件；</p><p>如果你手头有编写好的html文件的话就可以选择后者,如果没有也可以在GitHub上现编,这需要有一些html基础知识.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/2lgwgauaz387o.png?w=1024"></p><p>(注意：如果上传&#x2F;编写的html文件中没有index.html,就会导致404.)</p><p>于是我编写了一个index.html,在这之前我的网站是这样的——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/5e0_t7zkv2uk7a2qxvjc7a.png?w=1024"></p><p>我们来上传一下——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/k_4xedu8bj61ukp44.png?w=1024"></p><p>经过了一段时间之后,网站变成了——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/my940yn2uwpxdgyx41xu.png?w=1024"></p><p>完成！</p><p>在主页的基础上,你可以进行其他页面逻辑的联系；(其实不设置主页也是可以的)</p><p>关于GitHub Pages,</p><p>你也可以利用Hexo搭建为自己的博客；<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>搭建为资源分发网站；(小型网盘)</p><p>或是单纯的预览试调平台.</p><hr><p>我是 <strong>听话的便当</strong></p><p>ヾ(￣▽￣)Bye~</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何下载Niconico上的视频？</title>
    <link href="/dnc/"/>
    <url>/dnc/</url>
    
    <content type="html"><![CDATA[<p>很久没写过文章了感觉网站都要长毛了..</p><p>今天继续整篇实用性很“强”的教程！</p><h2 id="什么是Niconico？"><a href="#什么是Niconico？" class="headerlink" title="什么是Niconico？"></a>什么是Niconico？</h2><p><a href="https://www.nicovideo.jp/">Niconico动画</a>（日语：ニコニコ動画；简称Niconico、N站、Nico等 ）是日本多玩国公司营运的在线弹幕视频分享网站.其中“Niconico”（ニコニコ）意为微笑,“动画”（動画）意为视频.Niconico动画与YouTube等视频共享网站相似,但Niconico动画提供观赏者可在视频上留言并以弹幕的形式出现在视频上的功能.<a href="https://zh.wikipedia.org/wiki/File:Nikoniko_honsya_ikebukuro.jpg"></a><a href="https://zh.wikipedia.org/wiki/File:Nikoniko_honsya_ikebukuro.jpg"></a>位于东京池袋的多用途场所Niconico本社（巴而可地下1－2层）,注意并非网站运营意义上的本社</p><p>随着业务的扩张,如沿用“Niconico”之名的Niconico直播及Niconico插画,许多相关的服务都已超出了视频共享服务的框架.在2015年8月,Niconico动画一般会员约有5000万人,付费会员约有250万人.提供用户可跨平台使用此服务.2007年该网站赢得好设计奖与日本御宅大赏,2008年又获得电子艺术大奖. 近年来Niconico动画的付费用户数有萎缩的现象,2019年2月13日,根据公开的财务资料,付费会员减少至188万人.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image.png?w=1024"></p><p>页面挺low的 ✧(≖ ◡ ≖✿)</p><p>那么为什么要用Niconico呢？很简单,</p><p>毕竟是岛国的东西嘛,多多少少有些国内没有的.≡ω≡</p><h2 id="如何下载？"><a href="#如何下载？" class="headerlink" title="如何下载？"></a>如何下载？</h2><p>首先随便打开一个视频,</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-1.png?w=1024"></p><p>这个时候右键点击视频画面；（记得选好画质,选的是什么下载的就是什么）</p><p>会出现——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/cptqyihwdjmti1wf89q8.png?w=267"></p><p>然后点击一下最下面的（hls &gt; http）</p><p>变成——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/36h3premw0nb2e4ta2rb.png?w=274"></p><p>然后点击第四行的“开放系统讯息”——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/iljpmb8lzrsu03o401duv.png?w=1024"></p><p>变成这样</p><p>可以看见出现了许多链接,一般来说复制最后一个比较好；（因为不会被禁止）</p><p>然后打开链接——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/08/image-2.png?w=1024"></p><p>直接下载就OK了！</p><hr><p>我是 <strong>听话的便当</strong>,</p><p><strong>╰(*°▽°*)╯</strong></p><p>Bye~</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Free</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clash for Windows/Linux 的用法</title>
    <link href="/cfw/"/>
    <url>/cfw/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一篇简单介绍<code>Clash For Windows</code>用法的文章.</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/Fndroid/Clash_for_windows_pkg/releases">Clash for Windows 的官方GitHub地址</a> 下载.（注意：可能需要<code>翻墙</code>）</p><p class="note note-info">这个页面提供了不同系统的安装包(Windows, Mac, Linux)</p><p>如果没有翻墙或看不懂页面, 可以点击下面的链接下载0.20.7版本(已经加速, 无需翻墙):</p><ul><li><p><a href="https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.7/Clash.for.Windows.Setup.0.20.7.exe">64位Windows</a></p></li><li><p><a href="https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.7/Clash.for.Windows.Setup.0.20.7.ia32.exe">32位Windows</a></p></li><li><p><a href="https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.7/Clash.for.Windows-0.20.7-arm64-linux.tar.gz">Linux ARM</a></p></li><li><p><a href="https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.7/Clash.for.Windows-0.20.7-x64-linux.tar.gz">Linux X64</a></p></li></ul><p>其他:</p><ul><li><a href="https://github.com/ender-zhao/Clash-for-Windows_Chinese/releases/">汉化版GitHub地址</a>.</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>双击.exe文件, 随后跟着安装即可;</p><blockquote><p>Windows用户可以直接跳到<a href="/cfw/#%E4%BD%BF%E7%94%A8">使用</a>了.</p></blockquote><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>下载完成后, 右键此文件, 解压缩;</p><p>打开解压缩完的文件夹;</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/11.png" alt="如图所示"></p><p>右键空白处, 在终端打开;</p><p>输入指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cfw</span><br></pre></td></tr></table></figure><blockquote><p>或者右键<code>cfw</code>文件, 修改属性为可执行, 然后双击运行.</p></blockquote><p>随后会弹出界面:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/9.png" alt="如图"></p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>接下来, 在Clash设置一个port(或者使用默认的):</p><blockquote><p>设置方法为: 点击那个数字.</p></blockquote><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20220129220705.png" alt="我这里是6666"></p><p>随后, 打开系统设置, 找到<code>网络</code>, </p><p>把网络代理设置为<code>手动</code>:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20220129221213.png"></p><p>前面填写<code>127.0.0.1</code>或本地IP,</p><p>后面的端口填写在Clash里自定义的那个.</p><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p>如果想要关闭Clash, 先在顶栏右键Clash图标, </p><p>点击最下面的<code>quit</code>:</p><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/20220129222620.png" alt="如图所示"></p><p>随后打开系统设置&#x2F;网络, 把网络代理选项改为<code>已禁用</code>.</p><blockquote><p>否则浏览器访问网站时会出现<code>代理服务器问题</code>.</p></blockquote><p>Windows的关闭方法基本类似, 只不过软件图标在右下角.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p class="note note-info">使用方法各系统都一样.</p><p>类似所有代理软件的用法: 导入, 使用.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/u442e9c4nr_vkizoim1tu.png?w=850" alt="配置页面"></p><p>最上方分别代表的意思：</p><ul><li>那个意为“粘贴文件”的图标——从剪切板粘贴</li><li>Download——下载</li><li>Update All——（配置）全部更新</li><li>Import——导入（.yaml或者.yml文件）</li></ul><p><img src="https://ghproxy.com/https://raw.githubusercontent.com/wzk0/photo/main/202205081338308.png" alt="主页中文"></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>在<code>配置(Profiles)</code>页面上方输入框内粘贴链接后点击<code>Download</code>(或者直接将<code>配置文件</code>拖拽进去), 之后在<code>代理(Proxies)</code>界面选择一个能用的.</p><blockquote><p>注意, 第一个配置文件<code>config.yaml</code>不要删.</p></blockquote><p><img src="https://thdbd666666.files.wordpress.com/2021/07/b50u407ub2lf2db640dan.png?w=850" alt="如图所示"></p><p>绿色的为可用, 可以点击右上角小WIFI标志测速.</p><blockquote><p>这个速度为TCP速度, 并不是真连接的速度, 参考价值不大.</p></blockquote><p>然后就OK了.</p><blockquote><p><code>Windows用户</code>如果不能用, 可以点击主页的<code>系统代理</code>(system proxy), 或切换配置和代理.</p></blockquote><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p>由于<code>Clash For Windows</code>是<code>electron</code>软件, 占用系统资源过多是<code>正常现象</code>.</p><p><a href="/cpl">给Chrome设置代理的方法, 包含部分Linux设置代理的方法, 以及clash代理类型的说明.</a></p><p><a href="/cfa">Clash for Android的用法.</a></p><hr><p>我是 <strong>听话的便当</strong></p><p>Bye~</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些网站的收集</title>
    <link href="/ws/"/>
    <url>/ws/</url>
    
    <content type="html"><![CDATA[<p>本来这是做成一个页面的 后来一想 个人的东西太少 反倒有种“反客为主”的感觉</p><p>恩 发成文章比较好</p><ul><li><h2>MUSIC</h2><ul><li><h3>国际</h3><ul><li><a href="https://bandcamp.com/">Bandcamp</a></li><li><a href="https://soundcloud.com/discover">Soundcloud</a></li><li><a href="https://audius.co/trending">Audius</a></li><li><a href="https://music.youtube.com/">YouTube music</a></li><li><a href="https://www.apple.com/apple-music/">Apple music</a></li><li><a href="https://music.amazon.com/">Amazon music</a></li><li><a href="https://www.spotify.com/">Spotify</a></li><li><a href="https://tidal.com/">Tidal</a></li><li><a href="https://www.deezer.com/">Deezer</a></li><li><a href="https://www.billboard.com/">Billboard</a></li><li><a href="https://lofirecords.com/">Lofi girl</a></li></ul></li><li><h3>国内</h3><ul><li><a href="https://www.xiami.com/">虾米音乐</a>（现已成为音螺）</li><li><a href="https://music.163.com/">网易云音乐</a></li><li><a href="https://www.kugou.com/">酷狗音乐</a></li><li><a href="https://www.kuwo.cn/">酷我音乐</a></li><li><a href="https://y.qq.com/">QQ音乐</a></li><li><a href="https://music.migu.cn/">咪咕音乐</a></li></ul></li></ul></li></ul><hr><ul><li><h2>VIDEO</h2><ul><li><h3>国际</h3><ul><li><a href="https://www.youtube.com/">YouTube</a></li><li><a href="https://www.nicovideo.jp/">Niconico</a></li><li><a href="https://www.netflix.com/">NetFlix</a></li><li><a href="https://www.twitch.tv/">Twitch</a></li><li><a href="https://www.dailymotion.com/">Dailymotion</a></li><li><a href="https://vimeo.com/">Vimeo</a></li><li><a href="https://www.hulu.com/">Hulu</a></li><li><a href="https://www.metacafe.com/">MetaCafe</a></li><li><a href="https://fmovies.app/home">Fmovies</a></li><li><a href="https://disneymovieclub.go.com/magic">DisneyMovie Club</a></li><li><a href="https://tubitv.com/">TubiTV</a></li><li><a href="https://www.preview.disneyplus.com/">Disney+</a></li><li><a href="https://www.gamer.com.tw/">巴哈姆特</a></li><li><a href="https://emby.media/">Emby（具体教程看群）</a></li></ul></li><li><h3>国内</h3><ul><li><a href="https://v.qq.com/">腾讯视频</a></li><li><a href="https://www.iqiyi.com/">爱奇艺</a></li><li><a href="https://www.youku.com/">优酷</a></li><li><a href="https://www.bilibili.com/">哔哩哔哩</a></li><li><a href="https://www.tudou.com/">土豆</a></li><li><a href="https://tv.sohu.com/">搜狐视频</a></li><li><a href="https://www.mgtv.com/">芒果TV</a></li><li><a href="http://www.le.com/">乐视视频</a></li><li><a href="https://www.migu.cn/index.html">咪咕视频</a></li><li><a href="https://www.pptv.com/">PP视频</a></li><li><a href="https://www.agefans.cc/">AGE动漫</a></li><li><a href="http://www.yhdm.so/">樱花动漫</a></li><li><a href="http://www.fengchedm.tv/">风车动漫</a></li></ul></li></ul></li></ul><hr><ul><li><h2>NOVEL</h2><ul><li><a href="http://www.shencou.com/">神凑轻小说</a></li><li><a href="https://www.wenku8.net/login.php">轻小说文库</a></li><li><a href="https://books.google.com.tw/">Google图书</a></li></ul></li><li><h2>TOOL</h2><ul><li><h3>集合</h3><ul><li><a href="https://tool.chinaz.com/">ChinaZ 站长工具</a></li><li><a href="https://cn.piliapp.com/">工具邦</a></li><li><a href="https://www.dute.org/">独特工具箱</a></li><li><a href="https://it365.gitlab.io/zh-cn/">IT365工具箱</a></li></ul></li><li><h3>下载</h3><ul><li><a href="https://www.forhub.io/soundcloud/zh/">Soundcloud在线下载工具</a></li><li><a href="https://www.backupmp3.com/zh-cn/">YouTube在线下载工具</a>（已失效）</li><li><a href="https://www.jijidown.com/">哔哩哔哩下载工具</a></li><li><a href="https://thdbd666666.wordpress.com/2021/07/22/%e6%80%8e%e6%a0%b7%e8%8e%b7%e5%8f%96bandcamp%e4%b8%8a%e7%9a%84%e6%89%80%e6%9c%89%e9%9f%b3%e4%b9%90%ef%bc%9f/">Bandcamp下载</a></li><li><a href="https://apkcombo.com/zh/">APKCombo</a></li><li><a href="http://streampocket.net/">StreamPocket</a></li><li><a href="https://online-downloader.com/">ONLINE-DOWNLOADER</a>（据说很nb）</li></ul></li><li><h3>云盘</h3><ul><li><a href="https://pc.woozooo.com/mydisk.php">蓝奏云</a></li><li><a href="https://pan.baidu.com/">百度网盘</a></li><li><a href="https://www.aliyundrive.com/">阿里云盘</a></li><li><a href="https://cloud.189.cn/web/login.html">天翼云盘</a></li><li><a href="https://yun.139.com/">和彩云</a></li><li><a href="https://www.jianguoyun.com/">坚果云</a></li><li><a href="https://www.weiyun.com/">微云</a></li><li><a href="https://www.microsoft.com/zh-cn/microsoft-365/onedrive/online-cloud-storage">OneDrive云储存</a></li><li><a href="https://www.google.com/intl/zh-CN/drive/features.html">Google云端硬盘</a></li><li><a href="https://shimo.im/">石墨文档</a></li></ul></li><li><h3>博客</h3><ul><li><a href="https://ednovas.xyz/">Ednovas</a></li><li><a href="https://evewithjuly.code.blog/">Kevin Cartel</a></li><li><a href="https://aegisprogram.github.io/">ilemon Ellen</a></li></ul></li><li><h3>其他</h3><ul><li><a href="https://script.google.com/home/start">Google脚本</a></li><li><a href="https://waste.prprcloud.com/">流量消耗器</a></li><li><a href="https://ac.yunyoujun.cn/#/">云空调</a></li><li><a href="https://github.com/">GitHub</a></li><li><a href="http://www.shenfendaquan.com/">美国身份证生成</a></li><li><a href="https://getemoji.com/">比较不错的emoji表情网站</a></li><li><a href="https://kutt.it/">开源的链接缩短工具（比bitly好些）</a></li><li><a href="https://mm.edrawsoft.cn/create">在线思维导图</a></li></ul></li></ul></li><li><h2>STUDY</h2><ul><li><h3>百科</h3><ul><li><a href="https://zh.wikipedia.org/">Wikipedia</a></li><li><a href="https://zh.moegirl.org.cn/Mainpage">萌娘百科</a></li><li><a href="https://www.wenjianbaike.com/">文件百科</a></li><li><a href="https://scholar.google.com.hk/?hl=zh-CN">Google学术</a></li></ul></li><li><h3>科学</h3><ul><li><a href="https://www.solidot.org/">Solidot</a></li><li><a href="https://www.livescience.com/">Livescience</a></li></ul></li><li><h3>编程</h3><ul><li><a href="https://www.runoob.com/">菜鸟教程</a></li><li><a href="https://www.csdn.net/">CSDN</a></li><li><a href="https://www.dengnz.com/">峰哥分享</a></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>怎样获取Bandcamp上的所有音乐？</title>
    <link href="/dbc/"/>
    <url>/dbc/</url>
    
    <content type="html"><![CDATA[<p>今天 来一篇能白嫖很多专辑和歌曲的教程 ( • ̀ω•́ )✧</p><hr><h2 id="Bandcamp是啥？"><a href="#Bandcamp是啥？" class="headerlink" title="Bandcamp是啥？"></a>Bandcamp是啥？</h2><p><a href="https://bandcamp.com/">Bandcamp</a>是一家美国在线音乐公司, 由前Oddpost联合创始人Ethan Diamond与程序员Shawn Grunberger、Joe Holt和Neal Tucker于2008年创立,总部位于加利福尼亚.</p><p>Bandcamp是一个全球音乐社区,在这里,粉丝可以发现音乐,并支持创作音乐的艺术家.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/rb8m7hwqjwq65bcwec.png?w=1024" alt="简洁美观的主页"></p><h2 id="Bandcamp有啥特点？"><a href="#Bandcamp有啥特点？" class="headerlink" title="Bandcamp有啥特点？"></a>Bandcamp有啥特点？</h2><p>这是一个十分“小众”的音乐平台,但如果你恰恰是为小众而来,那么这样的小众又组合成了一个大众群体——Bandcamp.在这里,你并不能找到“周杰伦” “贾斯丁比伯”这样的名流歌手,但是你可以发现像“<a href="https://lofigirl.bandcamp.com/">lofi girl</a>” “<a href="https://geometriclullaby.bandcamp.com/">geometriclullaby</a>” 这样在大圈内不出名的著名小圈制作人；在这里,你也可以找到“<a href="https://troyesivan.bandcamp.com/">Troye Sivan</a>”这样有名歌手的早期作品</p><p>同时,你也可以看到——</p><p>Bandcamp在2010年7月获得了很多关注,当时Amanda Palmer、Low Places和Bedhed放弃了他们的唱片公司并开始在Bandcamp上销售专辑,使用Twitter进行推广.</p><p>Bandcamp在2011年很受欢迎,当时有几位独立游戏开发者在Bandcamp上发布了他们的游戏配乐,包括“宝瓶”、“堡垒”、“幽闭圣地”、“机械迷城”、“泰拉瑞亚”、“植物大战僵尸”、“地狱边境”、“超级食肉男孩”、“去月球”、“Fez”、“我的世界”和“不眠之夜”.</p><p>2014年12月,Bandcamp for Labels成立.几个流行的独立唱片公司如Sub Pop、Fat Wreck Chords、Relapse Records和 Epitaph Records推出了他们自己的Bandcamp页面.</p><p>一切尽在,<a href="https://bandcamp.com/"><strong>Bandcamp</strong></a>.</p><h2 id="关于Bandcamp的版权？"><a href="#关于Bandcamp的版权？" class="headerlink" title="关于Bandcamp的版权？"></a>关于Bandcamp的版权？</h2><p>通常,消费者通过各种免费文件分发渠道下载受版权保护的音乐,却无需向艺术家付款.像Bandcamp这样的网站为消费者提供免费的流媒体内容,同时为艺术家提供设定从免费到付费的可变价格的能力,为潜在客户提供更多选择,并允许消费者无需支付即可在线收听音乐.</p><p>这种利用灵活支付方法来平衡免费侵权内容的做法带来了极大的灵活性,允许艺术家通过提供数位发行的替代手段来与未经授权的内容竞争.在公司博客上,Bandcamp提供了谷歌搜索数据,显示用户被非法音乐搜索引导到该网站并进行购买.这样的数据可以让艺术家了解Bandcamp在打击侵权方面的成就,以及如何正确有效地应对侵权.</p><p>艺术家和唱片公司可以将音乐上传到Bandcamp并控制购买方式、价格,并且允许粉丝支付更多的钱和出售他们自己的物品.</p><p>在Bandcamp,粉丝可以下载已付费的音乐,如果没有付费,可以在线播放.他们还可以将以购买的音乐作为礼物发放,查看歌词,并将单曲或专辑保存到愿望清单中.Bandcamp允许任何人免费上传音乐,并将销售额除去15%用于支付处理费.如果艺术家的销售额超过5000美元,则降至10%.</p><p>Bandcamp为用户提供访问艺术家主页的功能,该页面包含有关艺术家的信息、社交媒体链接、商品销售链接以及艺术家在售的音乐.艺术家可以在主页上切换和自定义这些选项、更改页面外观,并自定义功能.2010年,Bandcamp在其他社群平台网站（如Facebook、Twitter、WordPress、Google+和Tumblr）中启用了嵌入式&#x2F;共享链接,并提供了电子邮件选项.2013年,Bandcamp推出了适用于iOS和Android设备的移动应用程序.</p><p>截至2018年5月,艺术家们共在Bandcamp上创收2.96亿美元.</p><hr><h2 id="正题（Download）"><a href="#正题（Download）" class="headerlink" title="正题（Download）"></a><strong>正题</strong>（Download）</h2><p>今天一共向大家说明三种方法来免费下载Bandcamp上的<strong>所有</strong>音乐（付费的也可以）.</p><h3 id="1-Chrome-插件方法"><a href="#1-Chrome-插件方法" class="headerlink" title="1,Chrome 插件方法"></a>1,Chrome 插件方法</h3><p>如果你的浏览器（电脑）是谷歌浏览器,那么一个插件就可以解决所有<strong>“播放过的”</strong>音乐的下载问题.（Bandcamp上有些歌曲不允许在线播放）</p><p><a href="https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn">插件下载地址</a>在这里!</p><p>下载完成后 我们播放任意一首Bandcamp上的音乐,打开插件,就能看见:</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/4040yaoyd834v2ngwefoonyt.png?w=1024"></p><p>在<strong>视频</strong>一栏,出现了刚刚播放的歌曲,我们点击下载即可.</p><h3 id="2-F12开发者模式"><a href="#2-F12开发者模式" class="headerlink" title="2.F12开发者模式"></a>2.F12开发者模式</h3><p>如果没有谷歌浏览器,或者不想用的话,我们在音乐开始播放后,按下键盘上的F12,进入开发者模式</p><p>此时右边有一大坨代码,我们翻到最底下（距离最底下还有几行的样子）,会发现一个链接（如图阴影部分）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/ohcanucmhv3mvxmve1f2.png?w=1024"></p><p>我们右键那一块,并点击 “Edit as HTML”</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/yxbrtj_csch0qgq.png?w=526"></p><p>发现一个长长的链接,这个就是音频的直链,我们粘贴打开即可.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/t60zx4bxib216j_yba2e.png?w=1024" alt="下载!!"></p><h3 id="3-HTML插入方法"><a href="#3-HTML插入方法" class="headerlink" title="3.HTML插入方法"></a>3.HTML插入方法</h3><p>我们在听Bandcamp上的歌时,有可能会出现下面的情况:</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/o400f1yu9ji2zrxd467.png?w=1024"></p><p>有些歌,你不给钱人家不让你听啊咋办!再看看价格——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/go66z0d3tqbbatncf1wnb.png?w=259"></p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/40olyg18sp7_8tt9wvcl9.png?w=892"></p><p>好家伙,16首歌将近70块钱,我可是白嫖怪啊怎么能花钱!但是没法播放,前两种方法也用不成啊!咋办？</p><p>此时,我们再看一遍页面,发现有这一个小东西——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/kixv8q47_x40vgxbq.png?w=799"></p><p>分享嵌入？emmm,点一下看看——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/6tt83lod0k8ec_xw8kdr.png?w=1024"></p><p>我们把这段HTML代码复制一下····——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/y8ch33pxh_eedg5dxq1u.png?w=426"></p><p>里面居然有串链接!用浏览器打开看看——</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/kc5z4k66f4s40pe_q9k.png?w=1024"></p><p>居然可以播放了!此时我们用前面两种方法其中任意一种即可.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/k08co_3l6rbdn5m1f.png?w=161"></p><p class="note note-info">只要能播放,就可以下载.</p><p>嘿嘿嘿,白嫖了70块钱的歌··· ٩(๑&gt;◡&lt;๑)۶ 虽然这么做<strong>有点不厚道</strong>···</p><hr><p>我是 <strong>听话的便当</strong>,</p><p>Bye~</p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Free</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何做一个可以回复指令的TG机器人？</title>
    <link href="/tg-bc/"/>
    <url>/tg-bc/</url>
    
    <content type="html"><![CDATA[<p>今天 便当教你如何<strong>快速自制</strong>一个简单的可以回复指令的TG机器人</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们需要:</p><p>1,一个Telegram</p><p>2,一个谷歌浏览器(<strong>登陆</strong>过的)(<strong>强烈建议电脑端!</strong>)</p><p>3,一个稳定的VPN(搞着搞着掉线了就不好整了)</p><p>接下来 我会以一个电脑端用户的视角进行讲解(结尾打脸)</p><p>我们可以首先创建一个<strong>记事本文件</strong>(.txt)(这是一个好习惯)</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/6yqjp08f4dppvizqo.png?w=917" alt="像是这样"></p><p>看的一头雾水？没关系 我来跟你讲解</p><hr><h2 id="第一步-编辑"><a href="#第一步-编辑" class="headerlink" title="第一步 编辑"></a>第一步 编辑</h2><p>我们的目的是做一个可以回复指令的TG机器人,首要的事,应该是创建几条指令.</p><p>打开与 @BotFather 的对话,发送指令<code>/mybots</code>打开上一节创建的机器人,并点击<code>Edit Bot</code>.</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/utkf6v9_b3i1pmlkr.png?w=286"></p><p>点击左下角<code>编辑指令</code>并发送几条编辑好的指令</p><p>格式如下:</p><p>command1(英语和数字都行 不能出现中文) - Description(这是描述)<br>command2 - Another description</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/oxkk7n3p40ijjwnbgq.png?w=569" alt="像这样"></p><p>此时我们再和机器人聊天,就会发现多了这些指令:</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/1r27aezjhk9t8wvn3.png?w=590"></p><hr><h2 id="第二步-脚本"><a href="#第二步-脚本" class="headerlink" title="第二步 脚本"></a>第二步 脚本</h2><p>打开<a href="https://script.google.com/home/start">这个网址</a>(注意:本节<strong>所有的网址</strong>打开<strong>都需要翻墙</strong>)起一个好听的名字:001</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/fbguzv12gy1n8o2zlzc.png?w=1024"></p><p>这时候你可能会说“啊 wc 我一点写代码的基础都没啊咋整”</p><p>没有关系!我已经给你整理好了:</p><p>打开<a href="https://shimo.im/docs/wVHJJrW9rtjtdp3p/">这个网址并复制全文</a>全部粘贴进新建项目001(注意:原本新建项目的存在的代码(如上图)<strong>也要替换</strong>)</p><p>接下来就可以自定义你的指令和回复啦!</p><p>需要注意的几点:</p><ol><li>记得保存!  </li><li>第二十四行记得更换成你机器人的Token  </li><li>第三十七行及之后注意出现的中文“指令名称”“反馈”</li></ol><p><img src="https://thdbd666666.files.wordpress.com/2021/07/fv40hjzg61h72gct_kw.png?w=618"></p><p>如图,是我编辑的指令以及收到相应指令后机器人反馈的消息.</p><hr><h2 id="第三步-部署"><a href="#第三步-部署" class="headerlink" title="第三步 部署"></a>第三步 部署</h2><p>在<strong>保存</strong>完项目之后 点击右上角的部署“新建部署” 选择类型为“Web应用” 执行身份为“我” 有访问权限的人员为“任何人”(如图)</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/ked3d6h4a8nixgdhr_vo88.png?w=796"></p><p>部署完后 会有下面的弹窗 我们复制一下web应用网址 并记录下(记事本的优越性体现出来了)</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image_editor_output_image1033625411-1626757330959.jpg?w=996"></p><p>之后 我们打开任意一个<a href="https://www.urlencoder.org/">url在线编码网站</a></p><p>输入刚刚复制的web应用地址 并点击Encode 会得到这样一串东西(如下图)</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image_editor_output_image2099745317-1626757806775.jpg?w=905"></p><p>我们复制一下这串链接 并将自己机器人的API Token和这串链接组合到一个新的超链接里(格式如下)</p><p><strong><a href="https://api.telegram.org/bot%E8%BF%99%E9%87%8C%E6%94%BE%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84token/setWebhook?url=%E8%BF%99%E9%87%8C%E6%94%BEurlEncode%E8%BF%87%E7%9A%84%E9%82%A3%E4%B8%80%E4%B8%B2%E9%93%BE%E6%8E%A5">https://api.telegram.org/bot这里放机器人的token/setWebhook?url=这里放urlEncode过的那一串链接</a></strong></p><p>随后 我们会得到一个超长的链接(如下图)</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image_editor_output_image1679726202-1626758101384.jpg?w=1024"></p><p>我们复制得到的超长链接 并在浏览器打开 结果发现会出现下面的内容 这说明成功啦!(除非你没按照步骤来)</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image_editor_output_image648218213-1626758219786.jpg?w=1024"></p><p>此时我们回到Telegram 再和机器人发送指令:</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/screenshot_2021-07-20-13-17-51-232_org.thunderdog.challegram.jpg?w=512"></p><p>它回复了!自动的!</p><p><strong>大功告成!</strong></p><p>本篇到这里就结束啦!前半段的时候还有电脑 现在由于在公交车上只能用手机编辑了</p><p>本文为了方便编辑,一些地方没有打码,大家在做的时候注意不要泄露出机器人的Token.</p><hr><p>我是 <strong>听话的便当</strong></p><p>Bye~</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何做一个TG私聊机器人？</title>
    <link href="/tg-bt/"/>
    <url>/tg-bt/</url>
    
    <content type="html"><![CDATA[<p>开始之前 我们需要的东西有：</p><p>1，一个Telegram（<a href="https://telegram.org/">点击即可</a>官网下载 <strong>要翻墙</strong>）</p><p>2，一双不太灵巧的手</p><p>3，一个能理解中文的大脑</p><p>好的 我们开始吧！</p><span id="more"></span><hr><p><strong>Step 1.</strong> <strong>造出它</strong></p><p>我们在Telegram搜索 @BotFather</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/5y140ekwovjjezx9.png?w=391"></p><p>向他发送指令 &#x2F;newbot</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/40pwsq7cfgmp9grxm.png?w=569"></p><p>可以看到 他回复了一段英文 大意就是：给你的机器人起一个好听的名字吧（例如：001）</p><p>然后我们给BotFather发送深思熟虑之后你为机器人起好的名字</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/t79ak_n9nywky8j0eukuo.png?w=570"></p><p>可以看到 他又回复了 这段的大意是：为你的机器人设置一个用户名 像是001_bot（注意结尾<strong>必须</strong>是 _bot）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/k5067kade9kt_iz1iles.png?w=576"></p><p>“恭喜！你已经拥有一个新的机器人了！”</p><hr><p><strong>Step 2.</strong> <strong>美化它</strong></p><p>此时我们向BotFather发送指令 &#x2F;mybots</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/wdz411hsp797dge6m8n.png?w=572"></p><p>我们点击刚刚创建的机器人（我出现了三个是因为我总共创建了三个机器人）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/7h9nzim1j_6om40pkkpqspi.png?w=352"></p><p>嘿嘿嘿</p><p>出现上面的一个类似小表格的东西 它们的意思分别是：</p><p>机器人的API接口Token（注意这个东西<strong>不要泄露</strong>）</p><p>编辑机器人</p><p>机器人设置</p><p>删除机器人</p><p>最下面是返回机器人列表</p><p>我们点击右上角 Edit Bot</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/svanyy9np4xw6ete208.png?w=295"></p><p>依旧是表格 它们的意思是：</p><p>编辑昵称</p><p>编辑描述</p><p>编辑简介</p><p>编辑头像</p><p>编辑指令</p><p>返回</p><p>这个时候自定义你的机器人就OK啦 举个例子</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/7idt9hwlx7i5jolla3y-1.png?w=287"></p><p>这是我编辑的</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/no0o7tbw6bkt825lma.png?w=873"></p><p>这个是成型的样子 自己鹦鹉学舌试试看</p><hr><p><strong>Step 3.</strong> <strong>连接它</strong></p><p>我们需要先复制<strong>自己机器人的API Token</strong>（如果你忘记了去上面找“嘿嘿嘿”那张图片并点击表格左上角）</p><p>然后找到这个机器人 @LivegramBot</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/coslajh7dqpr1t409f00.png?w=384"></p><p>向它发送指令 &#x2F;addbot</p><p>并在它回复之后发送你的机器人的API Token（如图）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/97kuw3_og9d4pwkkl.png?w=831"></p><p>成功了！</p><p>这个时候我们找几位测试员 向我们的机器人发消息</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/9ob40yp7owseb6ymt.png?w=873"></p><p>可以看到 三个人向我们的机器人发送了消息 这个时候并没有在列表内出现三个对话视窗 而是通过机器人向你发来了消息</p><p>而此时的回复方法是：指定某一条消息进行回复 <strong>直接向机器人发送消息无效</strong>（如下图）</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/ljib_36y5jnfs6r00y.png?w=979"></p><p><strong>大功告成！</strong></p><hr><p>好了 教程就到这里</p><p>欢迎加入我的<a href="https://t.me/hlx666">Telegram群组</a></p><p>感谢各位浏览！我是 <strong>听话的便当</strong></p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clash for Android 的用法</title>
    <link href="/cfa/"/>
    <url>/cfa/</url>
    
    <content type="html"><![CDATA[<p>Clash是一款很强大的<strong>翻墙软件</strong>（当然，你也可以选择V2RayNG或者SSR）</p><p>首先，这是<strong>Android</strong>端<strong>Clash</strong>的<a href="https://github.com/Kr328/ClashForAndroid"><strong>GitHub下载地址</strong></a>，可以按照自己的Android系统选择<strong>合适</strong>的版本。</p><p>下载完之后，进入软件，我们可以看到如下页面（一级页面）：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image.png?w=482"></p><p>（当然初次打开看到的界面是亮色的 在设置&#x2F;应用里面可以调整）</p><p>这个时候 我们点击<strong>配置</strong>（二级页面）</p><p>发现右上角有一个<strong>小加号</strong>，点击加号后，会有下面的页面（三级页面）：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image-1.png?w=482"></p><p>接下来，我会先讲解<strong>URL</strong>（统一资源定位符）导入的方法：</p><p>点击<strong>URL</strong>，出现下面的页面 ：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image-2.png?w=482"></p><p>我们可以给刚刚嫖（买）到的订阅起一个好听的名字，例如：001</p><p>随后在<strong>URL框</strong>粘贴进你刚刚复制的嫖（买）到的订阅链接</p><p>然后点击右上角<strong>保存</strong>（如果失败，下方会有弹窗提示，说明这个URL无效，或者机场主关闭了新的订阅允许，此时你要再去找（换）一个新的URL）成功后，会回到<strong>配置</strong>（二级页面）页面，如下：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image-3.png?w=482"></p><p>（我是导入了<strong>很多</strong>订阅之后才这么多的）</p><p>我们点击刚刚添加或者能用的订阅，然后点击左上角返回到一级页面，点击<strong>已停止（点击启动）</strong>，如下，出现字节跳动说明成功连上啦！</p><hr><p>接下来，介绍<strong>文件导入</strong>方法：</p><p>我们点击<strong>文件（从文件导入）</strong>，会出现以下界面：</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image-4.png?w=482"></p><p>点击<strong>浏览文件</strong>，并点击<strong>配置文件</strong>右边的<strong>三个点</strong></p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image-5.png?w=482"></p><p>点击下面的<strong>导入</strong>，并搜索你刚刚下载的后缀为yaml或者yml的文件</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image-6.png?w=482"></p><p>长按后，点击打开并导入（这个界面会因为手机类型不同而不同）</p><p>此时原本为0kib的<strong>配置文件</strong>显示数据大小</p><p><img src="https://thdbd666666.files.wordpress.com/2021/07/image-7.png?w=482"></p><p>左上角返回，然后还是给配置起一个好听的名字，例如：002<strong>（记得保存）</strong></p><p>之后就像URL导入最后的步骤一样啦！</p><hr><p>关于订阅URL和配置文件的获取可私聊我，或自行购买机场</p><p>我的Telegram：<a href="https://t.me/thdbd0">@thdbd0</a></p><p>Bye~</p>]]></content>
    
    
    <categories>
      
      <category>EDITOR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
